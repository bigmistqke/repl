{
  "types": {
    "paths": {
      "csstype@3.1.3/index.d.ts": ["file:///.types/csstype@3.1.3/index.d.ts"],
      "solid-js/jsx-runtime": ["file:///.types/solid-js@1.8.16/types/jsx.d.ts"],
      "solid-js@1.8.16/types/index.d.ts": ["file:///.types/solid-js@1.8.16/types/index.d.ts"],
      "solid-js/web": ["file:///.types/solid-js@1.8.16/web/types/index.d.ts"],
      "solid-js": ["file:///.types/solid-js@1.8.16/types/index.d.ts"],
      "canvas-confetti": ["file:///.types/@types/canvas-confetti@~1/index.d.ts"],
      "three": ["file:///.types/@types/three@~0/index.d.ts"],
      "solid-three": ["file:///.types/solid-three/dist/core/index.d.ts"],
      "@solid-primitives/utils@6.2.3/dist/index/index.d.ts": [
        "file:///.types/@solid-primitives/utils@6.2.3/dist/index/index.d.ts"
      ],
      "solid-js@1.8.16/web/types/index.d.ts": [
        "file:///.types/solid-js@1.8.16/web/types/index.d.ts"
      ],
      "solid-js@1.8.16/types/reactive/signal.d.ts": [
        "file:///.types/solid-js@1.8.16/types/reactive/signal.d.ts"
      ],
      "@solid-primitives/resize-observer": [
        "file:///.types/@solid-primitives/resize-observer@2.0.25/dist/index.d.ts"
      ]
    },
    "files": {
      "solid-js@1.8.16/types/jsx.d.ts": "import * as csstype from \"csstype@3.1.3/index.d.ts\";\n/**\n * Based on JSX types for Surplus and Inferno and adapted for `dom-expressions`.\n *\n * https://github.com/adamhaile/surplus/blob/master/index.d.ts\n * https://github.com/infernojs/inferno/blob/master/packages/inferno/src/core/types.ts\n */\ntype DOMElement = Element;\nexport namespace JSX {\n    type Element = Node | ArrayElement | (string & {}) | number | boolean | null | undefined;\n    interface ArrayElement extends Array<Element> {\n    }\n    interface ElementClass {\n    }\n    interface ElementAttributesProperty {\n    }\n    interface ElementChildrenAttribute {\n        children: {};\n    }\n    interface EventHandler<T, E extends Event> {\n        (e: E & {\n            currentTarget: T;\n            target: DOMElement;\n        }): void;\n    }\n    interface BoundEventHandler<T, E extends Event> {\n        0: (data: any, e: E & {\n            currentTarget: T;\n            target: DOMElement;\n        }) => void;\n        1: any;\n    }\n    type EventHandlerUnion<T, E extends Event> = EventHandler<T, E> | BoundEventHandler<T, E>;\n    interface InputEventHandler<T, E extends InputEvent> {\n        (e: E & {\n            currentTarget: T;\n            target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement;\n        }): void;\n    }\n    interface BoundInputEventHandler<T, E extends InputEvent> {\n        0: (data: any, e: E & {\n            currentTarget: T;\n            target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement;\n        }) => void;\n        1: any;\n    }\n    type InputEventHandlerUnion<T, E extends InputEvent> = InputEventHandler<T, E> | BoundInputEventHandler<T, E>;\n    interface ChangeEventHandler<T, E extends Event> {\n        (e: E & {\n            currentTarget: T;\n            target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement;\n        }): void;\n    }\n    interface BoundChangeEventHandler<T, E extends Event> {\n        0: (data: any, e: E & {\n            currentTarget: T;\n            target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement;\n        }) => void;\n        1: any;\n    }\n    type ChangeEventHandlerUnion<T, E extends Event> = ChangeEventHandler<T, E> | BoundChangeEventHandler<T, E>;\n    interface FocusEventHandler<T, E extends FocusEvent> {\n        (e: E & {\n            currentTarget: T;\n            target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement;\n        }): void;\n    }\n    interface BoundFocusEventHandler<T, E extends FocusEvent> {\n        0: (data: any, e: E & {\n            currentTarget: T;\n            target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement;\n        }) => void;\n        1: any;\n    }\n    type FocusEventHandlerUnion<T, E extends FocusEvent> = FocusEventHandler<T, E> | BoundFocusEventHandler<T, E>;\n    const SERIALIZABLE: unique symbol;\n    interface SerializableAttributeValue {\n        toString(): string;\n        [SERIALIZABLE]: never;\n    }\n    interface IntrinsicAttributes {\n        ref?: unknown | ((e: unknown) => void);\n    }\n    interface CustomAttributes<T> {\n        ref?: T | ((el: T) => void);\n        classList?: {\n            [k: string]: boolean | undefined;\n        };\n        $ServerOnly?: boolean;\n    }\n    type Accessor<T> = () => T;\n    interface Directives {\n    }\n    interface DirectiveFunctions {\n        [x: string]: (el: DOMElement, accessor: Accessor<any>) => void;\n    }\n    interface ExplicitProperties {\n    }\n    interface ExplicitAttributes {\n    }\n    interface CustomEvents {\n    }\n    interface CustomCaptureEvents {\n    }\n    type DirectiveAttributes = {\n        [Key in keyof Directives as `use:${Key}`]?: Directives[Key];\n    };\n    type DirectiveFunctionAttributes<T> = {\n        [K in keyof DirectiveFunctions as string extends K ? never : `use:${K}`]?: DirectiveFunctions[K] extends (el: infer E, // will be unknown if not provided\n        ...rest: infer R // use rest so that we can check whether it's provided or not\n        ) => void ? T extends E // everything extends unknown if E is unknown\n         ? R extends [\n            infer A\n        ] // check if has accessor provided\n         ? A extends Accessor<infer V> ? V // it's an accessor\n         : never // it isn't, type error\n         : true // no accessor provided\n         : never // T is the wrong element\n         : never;\n    };\n    type PropAttributes = {\n        [Key in keyof ExplicitProperties as `prop:${Key}`]?: ExplicitProperties[Key];\n    };\n    type AttrAttributes = {\n        [Key in keyof ExplicitAttributes as `attr:${Key}`]?: ExplicitAttributes[Key];\n    };\n    type OnAttributes<T> = {\n        [Key in keyof CustomEvents as `on:${Key}`]?: EventHandler<T, CustomEvents[Key]>;\n    };\n    type OnCaptureAttributes<T> = {\n        [Key in keyof CustomCaptureEvents as `oncapture:${Key}`]?: EventHandler<T, CustomCaptureEvents[Key]>;\n    };\n    interface DOMAttributes<T> extends CustomAttributes<T>, DirectiveAttributes, DirectiveFunctionAttributes<T>, PropAttributes, AttrAttributes, OnAttributes<T>, OnCaptureAttributes<T>, CustomEventHandlersCamelCase<T>, CustomEventHandlersLowerCase<T> {\n        children?: Element;\n        innerHTML?: string;\n        innerText?: string | number;\n        textContent?: string | number;\n        // camel case events\n        onCopy?: EventHandlerUnion<T, ClipboardEvent>;\n        onCut?: EventHandlerUnion<T, ClipboardEvent>;\n        onPaste?: EventHandlerUnion<T, ClipboardEvent>;\n        onCompositionEnd?: EventHandlerUnion<T, CompositionEvent>;\n        onCompositionStart?: EventHandlerUnion<T, CompositionEvent>;\n        onCompositionUpdate?: EventHandlerUnion<T, CompositionEvent>;\n        onFocusOut?: FocusEventHandlerUnion<T, FocusEvent>;\n        onFocusIn?: FocusEventHandlerUnion<T, FocusEvent>;\n        onEncrypted?: EventHandlerUnion<T, Event>;\n        onDragExit?: EventHandlerUnion<T, DragEvent>;\n        // lower case events\n        oncopy?: EventHandlerUnion<T, ClipboardEvent>;\n        oncut?: EventHandlerUnion<T, ClipboardEvent>;\n        onpaste?: EventHandlerUnion<T, ClipboardEvent>;\n        oncompositionend?: EventHandlerUnion<T, CompositionEvent>;\n        oncompositionstart?: EventHandlerUnion<T, CompositionEvent>;\n        oncompositionupdate?: EventHandlerUnion<T, CompositionEvent>;\n        onfocusout?: FocusEventHandlerUnion<T, FocusEvent>;\n        onfocusin?: FocusEventHandlerUnion<T, FocusEvent>;\n        onencrypted?: EventHandlerUnion<T, Event>;\n        ondragexit?: EventHandlerUnion<T, DragEvent>;\n    }\n    interface CustomEventHandlersCamelCase<T> {\n        onAbort?: EventHandlerUnion<T, Event>;\n        onAnimationEnd?: EventHandlerUnion<T, AnimationEvent>;\n        onAnimationIteration?: EventHandlerUnion<T, AnimationEvent>;\n        onAnimationStart?: EventHandlerUnion<T, AnimationEvent>;\n        onAuxClick?: EventHandlerUnion<T, MouseEvent>;\n        onBeforeInput?: InputEventHandlerUnion<T, InputEvent>;\n        onBlur?: FocusEventHandlerUnion<T, FocusEvent>;\n        onCanPlay?: EventHandlerUnion<T, Event>;\n        onCanPlayThrough?: EventHandlerUnion<T, Event>;\n        onChange?: ChangeEventHandlerUnion<T, Event>;\n        onClick?: EventHandlerUnion<T, MouseEvent>;\n        onContextMenu?: EventHandlerUnion<T, MouseEvent>;\n        onDblClick?: EventHandlerUnion<T, MouseEvent>;\n        onDrag?: EventHandlerUnion<T, DragEvent>;\n        onDragEnd?: EventHandlerUnion<T, DragEvent>;\n        onDragEnter?: EventHandlerUnion<T, DragEvent>;\n        onDragLeave?: EventHandlerUnion<T, DragEvent>;\n        onDragOver?: EventHandlerUnion<T, DragEvent>;\n        onDragStart?: EventHandlerUnion<T, DragEvent>;\n        onDrop?: EventHandlerUnion<T, DragEvent>;\n        onDurationChange?: EventHandlerUnion<T, Event>;\n        onEmptied?: EventHandlerUnion<T, Event>;\n        onEnded?: EventHandlerUnion<T, Event>;\n        onError?: EventHandlerUnion<T, Event>;\n        onFocus?: FocusEventHandlerUnion<T, FocusEvent>;\n        onGotPointerCapture?: EventHandlerUnion<T, PointerEvent>;\n        onInput?: InputEventHandlerUnion<T, InputEvent>;\n        onInvalid?: EventHandlerUnion<T, Event>;\n        onKeyDown?: EventHandlerUnion<T, KeyboardEvent>;\n        onKeyPress?: EventHandlerUnion<T, KeyboardEvent>;\n        onKeyUp?: EventHandlerUnion<T, KeyboardEvent>;\n        onLoad?: EventHandlerUnion<T, Event>;\n        onLoadedData?: EventHandlerUnion<T, Event>;\n        onLoadedMetadata?: EventHandlerUnion<T, Event>;\n        onLoadStart?: EventHandlerUnion<T, Event>;\n        onLostPointerCapture?: EventHandlerUnion<T, PointerEvent>;\n        onMouseDown?: EventHandlerUnion<T, MouseEvent>;\n        onMouseEnter?: EventHandlerUnion<T, MouseEvent>;\n        onMouseLeave?: EventHandlerUnion<T, MouseEvent>;\n        onMouseMove?: EventHandlerUnion<T, MouseEvent>;\n        onMouseOut?: EventHandlerUnion<T, MouseEvent>;\n        onMouseOver?: EventHandlerUnion<T, MouseEvent>;\n        onMouseUp?: EventHandlerUnion<T, MouseEvent>;\n        onPause?: EventHandlerUnion<T, Event>;\n        onPlay?: EventHandlerUnion<T, Event>;\n        onPlaying?: EventHandlerUnion<T, Event>;\n        onPointerCancel?: EventHandlerUnion<T, PointerEvent>;\n        onPointerDown?: EventHandlerUnion<T, PointerEvent>;\n        onPointerEnter?: EventHandlerUnion<T, PointerEvent>;\n        onPointerLeave?: EventHandlerUnion<T, PointerEvent>;\n        onPointerMove?: EventHandlerUnion<T, PointerEvent>;\n        onPointerOut?: EventHandlerUnion<T, PointerEvent>;\n        onPointerOver?: EventHandlerUnion<T, PointerEvent>;\n        onPointerUp?: EventHandlerUnion<T, PointerEvent>;\n        onProgress?: EventHandlerUnion<T, Event>;\n        onRateChange?: EventHandlerUnion<T, Event>;\n        onReset?: EventHandlerUnion<T, Event>;\n        onScroll?: EventHandlerUnion<T, Event>;\n        onScrollEnd?: EventHandlerUnion<T, Event>;\n        onSeeked?: EventHandlerUnion<T, Event>;\n        onSeeking?: EventHandlerUnion<T, Event>;\n        onSelect?: EventHandlerUnion<T, UIEvent>;\n        onStalled?: EventHandlerUnion<T, Event>;\n        onSubmit?: EventHandlerUnion<T, Event & {\n            submitter: HTMLElement;\n        }>;\n        onSuspend?: EventHandlerUnion<T, Event>;\n        onTimeUpdate?: EventHandlerUnion<T, Event>;\n        onTouchCancel?: EventHandlerUnion<T, TouchEvent>;\n        onTouchEnd?: EventHandlerUnion<T, TouchEvent>;\n        onTouchMove?: EventHandlerUnion<T, TouchEvent>;\n        onTouchStart?: EventHandlerUnion<T, TouchEvent>;\n        onTransitionStart?: EventHandlerUnion<T, TransitionEvent>;\n        onTransitionEnd?: EventHandlerUnion<T, TransitionEvent>;\n        onTransitionRun?: EventHandlerUnion<T, TransitionEvent>;\n        onTransitionCancel?: EventHandlerUnion<T, TransitionEvent>;\n        onVolumeChange?: EventHandlerUnion<T, Event>;\n        onWaiting?: EventHandlerUnion<T, Event>;\n        onWheel?: EventHandlerUnion<T, WheelEvent>;\n    }\n    /**\n     * @type {GlobalEventHandlers}\n     */\n    interface CustomEventHandlersLowerCase<T> {\n        onabort?: EventHandlerUnion<T, Event>;\n        onanimationend?: EventHandlerUnion<T, AnimationEvent>;\n        onanimationiteration?: EventHandlerUnion<T, AnimationEvent>;\n        onanimationstart?: EventHandlerUnion<T, AnimationEvent>;\n        onauxclick?: EventHandlerUnion<T, MouseEvent>;\n        onbeforeinput?: InputEventHandlerUnion<T, InputEvent>;\n        onblur?: FocusEventHandlerUnion<T, FocusEvent>;\n        oncanplay?: EventHandlerUnion<T, Event>;\n        oncanplaythrough?: EventHandlerUnion<T, Event>;\n        onchange?: ChangeEventHandlerUnion<T, Event>;\n        onclick?: EventHandlerUnion<T, MouseEvent>;\n        oncontextmenu?: EventHandlerUnion<T, MouseEvent>;\n        ondblclick?: EventHandlerUnion<T, MouseEvent>;\n        ondrag?: EventHandlerUnion<T, DragEvent>;\n        ondragend?: EventHandlerUnion<T, DragEvent>;\n        ondragenter?: EventHandlerUnion<T, DragEvent>;\n        ondragleave?: EventHandlerUnion<T, DragEvent>;\n        ondragover?: EventHandlerUnion<T, DragEvent>;\n        ondragstart?: EventHandlerUnion<T, DragEvent>;\n        ondrop?: EventHandlerUnion<T, DragEvent>;\n        ondurationchange?: EventHandlerUnion<T, Event>;\n        onemptied?: EventHandlerUnion<T, Event>;\n        onended?: EventHandlerUnion<T, Event>;\n        onerror?: EventHandlerUnion<T, Event>;\n        onfocus?: FocusEventHandlerUnion<T, FocusEvent>;\n        ongotpointercapture?: EventHandlerUnion<T, PointerEvent>;\n        oninput?: InputEventHandlerUnion<T, InputEvent>;\n        oninvalid?: EventHandlerUnion<T, Event>;\n        onkeydown?: EventHandlerUnion<T, KeyboardEvent>;\n        onkeypress?: EventHandlerUnion<T, KeyboardEvent>;\n        onkeyup?: EventHandlerUnion<T, KeyboardEvent>;\n        onload?: EventHandlerUnion<T, Event>;\n        onloadeddata?: EventHandlerUnion<T, Event>;\n        onloadedmetadata?: EventHandlerUnion<T, Event>;\n        onloadstart?: EventHandlerUnion<T, Event>;\n        onlostpointercapture?: EventHandlerUnion<T, PointerEvent>;\n        onmousedown?: EventHandlerUnion<T, MouseEvent>;\n        onmouseenter?: EventHandlerUnion<T, MouseEvent>;\n        onmouseleave?: EventHandlerUnion<T, MouseEvent>;\n        onmousemove?: EventHandlerUnion<T, MouseEvent>;\n        onmouseout?: EventHandlerUnion<T, MouseEvent>;\n        onmouseover?: EventHandlerUnion<T, MouseEvent>;\n        onmouseup?: EventHandlerUnion<T, MouseEvent>;\n        onpause?: EventHandlerUnion<T, Event>;\n        onplay?: EventHandlerUnion<T, Event>;\n        onplaying?: EventHandlerUnion<T, Event>;\n        onpointercancel?: EventHandlerUnion<T, PointerEvent>;\n        onpointerdown?: EventHandlerUnion<T, PointerEvent>;\n        onpointerenter?: EventHandlerUnion<T, PointerEvent>;\n        onpointerleave?: EventHandlerUnion<T, PointerEvent>;\n        onpointermove?: EventHandlerUnion<T, PointerEvent>;\n        onpointerout?: EventHandlerUnion<T, PointerEvent>;\n        onpointerover?: EventHandlerUnion<T, PointerEvent>;\n        onpointerup?: EventHandlerUnion<T, PointerEvent>;\n        onprogress?: EventHandlerUnion<T, Event>;\n        onratechange?: EventHandlerUnion<T, Event>;\n        onreset?: EventHandlerUnion<T, Event>;\n        onscroll?: EventHandlerUnion<T, Event>;\n        onscrollend?: EventHandlerUnion<T, Event>;\n        onseeked?: EventHandlerUnion<T, Event>;\n        onseeking?: EventHandlerUnion<T, Event>;\n        onselect?: EventHandlerUnion<T, UIEvent>;\n        onstalled?: EventHandlerUnion<T, Event>;\n        onsubmit?: EventHandlerUnion<T, Event & {\n            submitter: HTMLElement;\n        }>;\n        onsuspend?: EventHandlerUnion<T, Event>;\n        ontimeupdate?: EventHandlerUnion<T, Event>;\n        ontouchcancel?: EventHandlerUnion<T, TouchEvent>;\n        ontouchend?: EventHandlerUnion<T, TouchEvent>;\n        ontouchmove?: EventHandlerUnion<T, TouchEvent>;\n        ontouchstart?: EventHandlerUnion<T, TouchEvent>;\n        ontransitionstart?: EventHandlerUnion<T, TransitionEvent>;\n        ontransitionend?: EventHandlerUnion<T, TransitionEvent>;\n        ontransitionrun?: EventHandlerUnion<T, TransitionEvent>;\n        ontransitioncancel?: EventHandlerUnion<T, TransitionEvent>;\n        onvolumechange?: EventHandlerUnion<T, Event>;\n        onwaiting?: EventHandlerUnion<T, Event>;\n        onwheel?: EventHandlerUnion<T, WheelEvent>;\n    }\n    interface CSSProperties extends csstype.PropertiesHyphen {\n        // Override\n        [key: `-${string}`]: string | number | undefined;\n    }\n    type HTMLAutocapitalize = \"off\" | \"none\" | \"on\" | \"sentences\" | \"words\" | \"characters\";\n    type HTMLDir = \"ltr\" | \"rtl\" | \"auto\";\n    type HTMLFormEncType = \"application/x-www-form-urlencoded\" | \"multipart/form-data\" | \"text/plain\";\n    type HTMLFormMethod = \"post\" | \"get\" | \"dialog\";\n    type HTMLCrossorigin = \"anonymous\" | \"use-credentials\" | \"\";\n    type HTMLReferrerPolicy = \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\";\n    type HTMLIframeSandbox = \"allow-downloads-without-user-activation\" | \"allow-downloads\" | \"allow-forms\" | \"allow-modals\" | \"allow-orientation-lock\" | \"allow-pointer-lock\" | \"allow-popups\" | \"allow-popups-to-escape-sandbox\" | \"allow-presentation\" | \"allow-same-origin\" | \"allow-scripts\" | \"allow-storage-access-by-user-activation\" | \"allow-top-navigation\" | \"allow-top-navigation-by-user-activation\" | \"allow-top-navigation-to-custom-protocols\";\n    type HTMLLinkAs = \"audio\" | \"document\" | \"embed\" | \"fetch\" | \"font\" | \"image\" | \"object\" | \"script\" | \"style\" | \"track\" | \"video\" | \"worker\";\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        \"aria-activedescendant\"?: string;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        \"aria-atomic\"?: boolean | \"false\" | \"true\";\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        \"aria-autocomplete\"?: \"none\" | \"inline\" | \"list\" | \"both\";\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        \"aria-busy\"?: boolean | \"false\" | \"true\";\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        \"aria-checked\"?: boolean | \"false\" | \"mixed\" | \"true\";\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        \"aria-colcount\"?: number | string;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        \"aria-colindex\"?: number | string;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        \"aria-colspan\"?: number | string;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        \"aria-controls\"?: string;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        \"aria-current\"?: boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\";\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        \"aria-describedby\"?: string;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        \"aria-details\"?: string;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        \"aria-disabled\"?: boolean | \"false\" | \"true\";\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-dropeffect\"?: \"none\" | \"copy\" | \"execute\" | \"link\" | \"move\" | \"popup\";\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        \"aria-errormessage\"?: string;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        \"aria-expanded\"?: boolean | \"false\" | \"true\";\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        \"aria-flowto\"?: string;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-grabbed\"?: boolean | \"false\" | \"true\";\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        \"aria-haspopup\"?: boolean | \"false\" | \"true\" | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\";\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        \"aria-hidden\"?: boolean | \"false\" | \"true\";\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        \"aria-invalid\"?: boolean | \"false\" | \"true\" | \"grammar\" | \"spelling\";\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        \"aria-keyshortcuts\"?: string;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        \"aria-label\"?: string;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        \"aria-labelledby\"?: string;\n        /** Defines the hierarchical level of an element within a structure. */\n        \"aria-level\"?: number | string;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        \"aria-live\"?: \"off\" | \"assertive\" | \"polite\";\n        /** Indicates whether an element is modal when displayed. */\n        \"aria-modal\"?: boolean | \"false\" | \"true\";\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        \"aria-multiline\"?: boolean | \"false\" | \"true\";\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        \"aria-multiselectable\"?: boolean | \"false\" | \"true\";\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        \"aria-orientation\"?: \"horizontal\" | \"vertical\";\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        \"aria-owns\"?: string;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        \"aria-placeholder\"?: string;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        \"aria-posinset\"?: number | string;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        \"aria-pressed\"?: boolean | \"false\" | \"mixed\" | \"true\";\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        \"aria-readonly\"?: boolean | \"false\" | \"true\";\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        \"aria-relevant\"?: \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text\" | \"text additions\" | \"text removals\";\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        \"aria-required\"?: boolean | \"false\" | \"true\";\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        \"aria-roledescription\"?: string;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        \"aria-rowcount\"?: number | string;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        \"aria-rowindex\"?: number | string;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        \"aria-rowspan\"?: number | string;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        \"aria-selected\"?: boolean | \"false\" | \"true\";\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        \"aria-setsize\"?: number | string;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\";\n        /** Defines the maximum allowed value for a range widget. */\n        \"aria-valuemax\"?: number | string;\n        /** Defines the minimum allowed value for a range widget. */\n        \"aria-valuemin\"?: number | string;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        \"aria-valuenow\"?: number | string;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        \"aria-valuetext\"?: string;\n        role?: \"alert\" | \"alertdialog\" | \"application\" | \"article\" | \"banner\" | \"button\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"dialog\" | \"directory\" | \"document\" | \"feed\" | \"figure\" | \"form\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"img\" | \"link\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"main\" | \"marquee\" | \"math\" | \"menu\" | \"menubar\" | \"menuitem\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"meter\" | \"navigation\" | \"none\" | \"note\" | \"option\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"search\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"switch\" | \"tab\" | \"table\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\";\n    }\n    // TODO: Should we allow this?\n    // type ClassKeys = `class:${string}`;\n    // type CSSKeys = Exclude<keyof csstype.PropertiesHyphen, `-${string}`>;\n    // type CSSAttributes = {\n    //   [key in CSSKeys as `style:${key}`]: csstype.PropertiesHyphen[key];\n    // };\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // [key: ClassKeys]: boolean;\n        accessKey?: string;\n        class?: string | undefined;\n        contenteditable?: boolean | \"plaintext-only\" | \"inherit\";\n        contextmenu?: string;\n        dir?: HTMLDir;\n        draggable?: boolean | \"false\" | \"true\";\n        hidden?: boolean | \"hidden\" | \"until-found\";\n        id?: string;\n        inert?: boolean;\n        lang?: string;\n        spellcheck?: boolean;\n        style?: CSSProperties | string;\n        tabindex?: number | string;\n        title?: string;\n        translate?: \"yes\" | \"no\";\n        about?: string;\n        datatype?: string;\n        inlist?: any;\n        popover?: boolean | \"manual\" | \"auto\";\n        prefix?: string;\n        property?: string;\n        resource?: string;\n        typeof?: string;\n        vocab?: string;\n        autocapitalize?: HTMLAutocapitalize;\n        slot?: string;\n        color?: string;\n        itemprop?: string;\n        itemscope?: boolean;\n        itemtype?: string;\n        itemid?: string;\n        itemref?: string;\n        part?: string;\n        exportparts?: string;\n        inputmode?: \"none\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\";\n        contentEditable?: boolean | \"plaintext-only\" | \"inherit\";\n        contextMenu?: string;\n        tabIndex?: number | string;\n        autoCapitalize?: HTMLAutocapitalize;\n        itemProp?: string;\n        itemScope?: boolean;\n        itemType?: string;\n        itemId?: string;\n        itemRef?: string;\n        exportParts?: string;\n        inputMode?: \"none\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\";\n    }\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string;\n        hreflang?: string;\n        media?: string;\n        ping?: string;\n        referrerpolicy?: HTMLReferrerPolicy;\n        rel?: string;\n        target?: string;\n        type?: string;\n        referrerPolicy?: HTMLReferrerPolicy;\n    }\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n    }\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        coords?: string;\n        download?: any;\n        href?: string;\n        hreflang?: string;\n        ping?: string;\n        referrerpolicy?: HTMLReferrerPolicy;\n        rel?: string;\n        shape?: \"rect\" | \"circle\" | \"poly\" | \"default\";\n        target?: string;\n        referrerPolicy?: HTMLReferrerPolicy;\n    }\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string;\n        target?: string;\n    }\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        autofocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        formaction?: string | SerializableAttributeValue;\n        formenctype?: HTMLFormEncType;\n        formmethod?: HTMLFormMethod;\n        formnovalidate?: boolean;\n        formtarget?: string;\n        popovertarget?: string;\n        popovertargetaction?: \"hide\" | \"show\" | \"toggle\";\n        name?: string;\n        type?: \"submit\" | \"reset\" | \"button\";\n        value?: string;\n        formAction?: string | SerializableAttributeValue;\n        formEnctype?: HTMLFormEncType;\n        formMethod?: HTMLFormMethod;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        popoverTarget?: string;\n        popoverTargetAction?: \"hide\" | \"show\" | \"toggle\";\n    }\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        width?: number | string;\n        height?: number | string;\n    }\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | string;\n        width?: number | string;\n    }\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | string;\n    }\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | string[] | number;\n    }\n    interface DetailsHtmlAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n        onToggle?: EventHandlerUnion<T, Event>;\n        ontoggle?: EventHandlerUnion<T, Event>;\n    }\n    interface DialogHtmlAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n        onClose?: EventHandlerUnion<T, Event>;\n        onCancel?: EventHandlerUnion<T, Event>;\n    }\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        src?: string;\n        type?: string;\n        width?: number | string;\n    }\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        form?: string;\n        name?: string;\n    }\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        \"accept-charset\"?: string;\n        action?: string | SerializableAttributeValue;\n        autocomplete?: string;\n        encoding?: HTMLFormEncType;\n        enctype?: HTMLFormEncType;\n        method?: HTMLFormMethod;\n        name?: string;\n        novalidate?: boolean;\n        target?: string;\n        noValidate?: boolean;\n    }\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string;\n        allowfullscreen?: boolean;\n        height?: number | string;\n        loading?: \"eager\" | \"lazy\";\n        name?: string;\n        referrerpolicy?: HTMLReferrerPolicy;\n        sandbox?: HTMLIframeSandbox | string;\n        src?: string;\n        srcdoc?: string;\n        width?: number | string;\n        referrerPolicy?: HTMLReferrerPolicy;\n    }\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        crossorigin?: HTMLCrossorigin;\n        decoding?: \"sync\" | \"async\" | \"auto\";\n        height?: number | string;\n        ismap?: boolean;\n        isMap?: boolean;\n        loading?: \"eager\" | \"lazy\";\n        referrerpolicy?: HTMLReferrerPolicy;\n        referrerPolicy?: HTMLReferrerPolicy;\n        sizes?: string;\n        src?: string;\n        srcset?: string;\n        srcSet?: string;\n        usemap?: string;\n        useMap?: string;\n        width?: number | string;\n        crossOrigin?: HTMLCrossorigin;\n        elementtiming?: string;\n        fetchpriority?: \"high\" | \"low\" | \"auto\";\n    }\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string;\n        alt?: string;\n        autocomplete?: string;\n        autocorrect?: \"on\" | \"off\";\n        autofocus?: boolean;\n        capture?: boolean | string;\n        checked?: boolean;\n        crossorigin?: HTMLCrossorigin;\n        disabled?: boolean;\n        enterkeyhint?: \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\";\n        form?: string;\n        formaction?: string | SerializableAttributeValue;\n        formenctype?: HTMLFormEncType;\n        formmethod?: HTMLFormMethod;\n        formnovalidate?: boolean;\n        formtarget?: string;\n        height?: number | string;\n        incremental?: boolean;\n        list?: string;\n        max?: number | string;\n        maxlength?: number | string;\n        min?: number | string;\n        minlength?: number | string;\n        multiple?: boolean;\n        name?: string;\n        pattern?: string;\n        placeholder?: string;\n        readonly?: boolean;\n        results?: number;\n        required?: boolean;\n        size?: number | string;\n        src?: string;\n        step?: number | string;\n        type?: string;\n        value?: string | string[] | number;\n        width?: number | string;\n        crossOrigin?: HTMLCrossorigin;\n        formAction?: string | SerializableAttributeValue;\n        formEnctype?: HTMLFormEncType;\n        formMethod?: HTMLFormMethod;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        maxLength?: number | string;\n        minLength?: number | string;\n        readOnly?: boolean;\n    }\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        autofocus?: boolean;\n        challenge?: string;\n        disabled?: boolean;\n        form?: string;\n        keytype?: string;\n        keyparams?: string;\n        name?: string;\n    }\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        for?: string;\n        form?: string;\n    }\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: number | string;\n    }\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: HTMLLinkAs;\n        crossorigin?: HTMLCrossorigin;\n        disabled?: boolean;\n        fetchpriority?: \"high\" | \"low\" | \"auto\";\n        href?: string;\n        hreflang?: string;\n        imagesizes?: string;\n        imagesrcset?: string;\n        integrity?: string;\n        media?: string;\n        referrerpolicy?: HTMLReferrerPolicy;\n        rel?: string;\n        sizes?: string;\n        type?: string;\n        crossOrigin?: HTMLCrossorigin;\n        referrerPolicy?: HTMLReferrerPolicy;\n    }\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoplay?: boolean;\n        controls?: boolean;\n        crossorigin?: HTMLCrossorigin;\n        loop?: boolean;\n        mediagroup?: string;\n        muted?: boolean;\n        preload?: \"none\" | \"metadata\" | \"auto\" | \"\";\n        src?: string;\n        crossOrigin?: HTMLCrossorigin;\n        mediaGroup?: string;\n    }\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        label?: string;\n        type?: \"context\" | \"toolbar\";\n    }\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charset?: string;\n        content?: string;\n        \"http-equiv\"?: string;\n        name?: string;\n        media?: string;\n    }\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        high?: number | string;\n        low?: number | string;\n        max?: number | string;\n        min?: number | string;\n        optimum?: number | string;\n        value?: string | string[] | number;\n    }\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        data?: string;\n        form?: string;\n        height?: number | string;\n        name?: string;\n        type?: string;\n        usemap?: string;\n        width?: number | string;\n        useMap?: string;\n    }\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean;\n        start?: number | string;\n        type?: \"1\" | \"a\" | \"A\" | \"i\" | \"I\";\n    }\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n    }\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n        selected?: boolean;\n        value?: string | string[] | number;\n    }\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        for?: string;\n        name?: string;\n    }\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n        value?: string | string[] | number;\n    }\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string;\n        value?: string | string[] | number;\n    }\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean;\n        charset?: string;\n        crossorigin?: HTMLCrossorigin;\n        defer?: boolean;\n        integrity?: string;\n        nomodule?: boolean;\n        nonce?: string;\n        referrerpolicy?: HTMLReferrerPolicy;\n        src?: string;\n        type?: string;\n        crossOrigin?: HTMLCrossorigin;\n        noModule?: boolean;\n        referrerPolicy?: HTMLReferrerPolicy;\n    }\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autocomplete?: string;\n        autofocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        multiple?: boolean;\n        name?: string;\n        required?: boolean;\n        size?: number | string;\n        value?: string | string[] | number;\n    }\n    interface HTMLSlotElementAttributes<T = HTMLSlotElement> extends HTMLAttributes<T> {\n        name?: string;\n    }\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        sizes?: string;\n        src?: string;\n        srcset?: string;\n        type?: string;\n    }\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        nonce?: string;\n        scoped?: boolean;\n        type?: string;\n    }\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        colspan?: number | string;\n        headers?: string;\n        rowspan?: number | string;\n        colSpan?: number | string;\n        rowSpan?: number | string;\n    }\n    interface TemplateHTMLAttributes<T extends HTMLTemplateElement> extends HTMLAttributes<T> {\n        content?: DocumentFragment;\n    }\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autocomplete?: string;\n        autofocus?: boolean;\n        cols?: number | string;\n        dirname?: string;\n        disabled?: boolean;\n        enterkeyhint?: \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\";\n        form?: string;\n        maxlength?: number | string;\n        minlength?: number | string;\n        name?: string;\n        placeholder?: string;\n        readonly?: boolean;\n        required?: boolean;\n        rows?: number | string;\n        value?: string | string[] | number;\n        wrap?: \"hard\" | \"soft\" | \"off\";\n        maxLength?: number | string;\n        minLength?: number | string;\n        readOnly?: boolean;\n    }\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        colspan?: number | string;\n        headers?: string;\n        rowspan?: number | string;\n        colSpan?: number | string;\n        rowSpan?: number | string;\n        scope?: \"col\" | \"row\" | \"rowgroup\" | \"colgroup\";\n    }\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        datetime?: string;\n        dateTime?: string;\n    }\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean;\n        kind?: \"subtitles\" | \"captions\" | \"descriptions\" | \"chapters\" | \"metadata\";\n        label?: string;\n        src?: string;\n        srclang?: string;\n    }\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string;\n        playsinline?: boolean;\n        poster?: string;\n        width?: number | string;\n    }\n    type SVGPreserveAspectRatio = \"none\" | \"xMinYMin\" | \"xMidYMin\" | \"xMaxYMin\" | \"xMinYMid\" | \"xMidYMid\" | \"xMaxYMid\" | \"xMinYMax\" | \"xMidYMax\" | \"xMaxYMax\" | \"xMinYMin meet\" | \"xMidYMin meet\" | \"xMaxYMin meet\" | \"xMinYMid meet\" | \"xMidYMid meet\" | \"xMaxYMid meet\" | \"xMinYMax meet\" | \"xMidYMax meet\" | \"xMaxYMax meet\" | \"xMinYMin slice\" | \"xMidYMin slice\" | \"xMaxYMin slice\" | \"xMinYMid slice\" | \"xMidYMid slice\" | \"xMaxYMid slice\" | \"xMinYMax slice\" | \"xMidYMax slice\" | \"xMaxYMax slice\";\n    type ImagePreserveAspectRatio = SVGPreserveAspectRatio | \"defer none\" | \"defer xMinYMin\" | \"defer xMidYMin\" | \"defer xMaxYMin\" | \"defer xMinYMid\" | \"defer xMidYMid\" | \"defer xMaxYMid\" | \"defer xMinYMax\" | \"defer xMidYMax\" | \"defer xMaxYMax\" | \"defer xMinYMin meet\" | \"defer xMidYMin meet\" | \"defer xMaxYMin meet\" | \"defer xMinYMid meet\" | \"defer xMidYMid meet\" | \"defer xMaxYMid meet\" | \"defer xMinYMax meet\" | \"defer xMidYMax meet\" | \"defer xMaxYMax meet\" | \"defer xMinYMin slice\" | \"defer xMidYMin slice\" | \"defer xMaxYMin slice\" | \"defer xMinYMid slice\" | \"defer xMidYMid slice\" | \"defer xMaxYMid slice\" | \"defer xMinYMax slice\" | \"defer xMidYMax slice\" | \"defer xMaxYMax slice\";\n    type SVGUnits = \"userSpaceOnUse\" | \"objectBoundingBox\";\n    interface CoreSVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        id?: string;\n        lang?: string;\n        tabIndex?: number | string;\n        tabindex?: number | string;\n    }\n    interface StylableSVGAttributes {\n        class?: string | undefined;\n        style?: CSSProperties | string;\n    }\n    interface TransformableSVGAttributes {\n        transform?: string;\n    }\n    interface ConditionalProcessingSVGAttributes {\n        requiredExtensions?: string;\n        requiredFeatures?: string;\n        systemLanguage?: string;\n    }\n    interface ExternalResourceSVGAttributes {\n        externalResourcesRequired?: \"true\" | \"false\";\n    }\n    interface AnimationTimingSVGAttributes {\n        begin?: string;\n        dur?: string;\n        end?: string;\n        min?: string;\n        max?: string;\n        restart?: \"always\" | \"whenNotActive\" | \"never\";\n        repeatCount?: number | \"indefinite\";\n        repeatDur?: string;\n        fill?: \"freeze\" | \"remove\";\n    }\n    interface AnimationValueSVGAttributes {\n        calcMode?: \"discrete\" | \"linear\" | \"paced\" | \"spline\";\n        values?: string;\n        keyTimes?: string;\n        keySplines?: string;\n        from?: number | string;\n        to?: number | string;\n        by?: number | string;\n    }\n    interface AnimationAdditionSVGAttributes {\n        attributeName?: string;\n        additive?: \"replace\" | \"sum\";\n        accumulate?: \"none\" | \"sum\";\n    }\n    interface AnimationAttributeTargetSVGAttributes {\n        attributeName?: string;\n        attributeType?: \"CSS\" | \"XML\" | \"auto\";\n    }\n    interface PresentationSVGAttributes {\n        \"alignment-baseline\"?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" | \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\";\n        \"baseline-shift\"?: number | string;\n        clip?: string;\n        \"clip-path\"?: string;\n        \"clip-rule\"?: \"nonzero\" | \"evenodd\" | \"inherit\";\n        color?: string;\n        \"color-interpolation\"?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\";\n        \"color-interpolation-filters\"?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\";\n        \"color-profile\"?: string;\n        \"color-rendering\"?: \"auto\" | \"optimizeSpeed\" | \"optimizeQuality\" | \"inherit\";\n        cursor?: string;\n        direction?: \"ltr\" | \"rtl\" | \"inherit\";\n        display?: string;\n        \"dominant-baseline\"?: \"auto\" | \"text-bottom\" | \"alphabetic\" | \"ideographic\" | \"middle\" | \"central\" | \"mathematical\" | \"hanging\" | \"text-top\" | \"inherit\";\n        \"enable-background\"?: string;\n        fill?: string;\n        \"fill-opacity\"?: number | string | \"inherit\";\n        \"fill-rule\"?: \"nonzero\" | \"evenodd\" | \"inherit\";\n        filter?: string;\n        \"flood-color\"?: string;\n        \"flood-opacity\"?: number | string | \"inherit\";\n        \"font-family\"?: string;\n        \"font-size\"?: string;\n        \"font-size-adjust\"?: number | string;\n        \"font-stretch\"?: string;\n        \"font-style\"?: \"normal\" | \"italic\" | \"oblique\" | \"inherit\";\n        \"font-variant\"?: string;\n        \"font-weight\"?: number | string;\n        \"glyph-orientation-horizontal\"?: string;\n        \"glyph-orientation-vertical\"?: string;\n        \"image-rendering\"?: \"auto\" | \"optimizeQuality\" | \"optimizeSpeed\" | \"inherit\";\n        kerning?: string;\n        \"letter-spacing\"?: number | string;\n        \"lighting-color\"?: string;\n        \"marker-end\"?: string;\n        \"marker-mid\"?: string;\n        \"marker-start\"?: string;\n        mask?: string;\n        opacity?: number | string | \"inherit\";\n        overflow?: \"visible\" | \"hidden\" | \"scroll\" | \"auto\" | \"inherit\";\n        pathLength?: string | number;\n        \"pointer-events\"?: \"bounding-box\" | \"visiblePainted\" | \"visibleFill\" | \"visibleStroke\" | \"visible\" | \"painted\" | \"color\" | \"fill\" | \"stroke\" | \"all\" | \"none\" | \"inherit\";\n        \"shape-rendering\"?: \"auto\" | \"optimizeSpeed\" | \"crispEdges\" | \"geometricPrecision\" | \"inherit\";\n        \"stop-color\"?: string;\n        \"stop-opacity\"?: number | string | \"inherit\";\n        stroke?: string;\n        \"stroke-dasharray\"?: string;\n        \"stroke-dashoffset\"?: number | string;\n        \"stroke-linecap\"?: \"butt\" | \"round\" | \"square\" | \"inherit\";\n        \"stroke-linejoin\"?: \"arcs\" | \"bevel\" | \"miter\" | \"miter-clip\" | \"round\" | \"inherit\";\n        \"stroke-miterlimit\"?: number | string | \"inherit\";\n        \"stroke-opacity\"?: number | string | \"inherit\";\n        \"stroke-width\"?: number | string;\n        \"text-anchor\"?: \"start\" | \"middle\" | \"end\" | \"inherit\";\n        \"text-decoration\"?: \"none\" | \"underline\" | \"overline\" | \"line-through\" | \"blink\" | \"inherit\";\n        \"text-rendering\"?: \"auto\" | \"optimizeSpeed\" | \"optimizeLegibility\" | \"geometricPrecision\" | \"inherit\";\n        \"unicode-bidi\"?: string;\n        visibility?: \"visible\" | \"hidden\" | \"collapse\" | \"inherit\";\n        \"word-spacing\"?: number | string;\n        \"writing-mode\"?: \"lr-tb\" | \"rl-tb\" | \"tb-rl\" | \"lr\" | \"rl\" | \"tb\" | \"inherit\";\n    }\n    interface AnimationElementSVGAttributes<T> extends CoreSVGAttributes<T>, ExternalResourceSVGAttributes, ConditionalProcessingSVGAttributes {\n    }\n    interface ContainerElementSVGAttributes<T> extends CoreSVGAttributes<T>, ShapeElementSVGAttributes<T>, Pick<PresentationSVGAttributes, \"clip-path\" | \"mask\" | \"cursor\" | \"opacity\" | \"filter\" | \"enable-background\" | \"color-interpolation\" | \"color-rendering\"> {\n    }\n    interface FilterPrimitiveElementSVGAttributes<T> extends CoreSVGAttributes<T>, Pick<PresentationSVGAttributes, \"color-interpolation-filters\"> {\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n        result?: string;\n    }\n    interface SingleInputFilterSVGAttributes {\n        in?: string;\n    }\n    interface DoubleInputFilterSVGAttributes {\n        in?: string;\n        in2?: string;\n    }\n    interface FitToViewBoxSVGAttributes {\n        viewBox?: string;\n        preserveAspectRatio?: SVGPreserveAspectRatio;\n    }\n    interface GradientElementSVGAttributes<T> extends CoreSVGAttributes<T>, ExternalResourceSVGAttributes, StylableSVGAttributes {\n        gradientUnits?: SVGUnits;\n        gradientTransform?: string;\n        spreadMethod?: \"pad\" | \"reflect\" | \"repeat\";\n        href?: string;\n    }\n    interface GraphicsElementSVGAttributes<T> extends CoreSVGAttributes<T>, Pick<PresentationSVGAttributes, \"clip-rule\" | \"mask\" | \"pointer-events\" | \"cursor\" | \"opacity\" | \"filter\" | \"display\" | \"visibility\" | \"color-interpolation\" | \"color-rendering\"> {\n    }\n    interface LightSourceElementSVGAttributes<T> extends CoreSVGAttributes<T> {\n    }\n    interface NewViewportSVGAttributes<T> extends CoreSVGAttributes<T>, Pick<PresentationSVGAttributes, \"overflow\" | \"clip\"> {\n        viewBox?: string;\n    }\n    interface ShapeElementSVGAttributes<T> extends CoreSVGAttributes<T>, Pick<PresentationSVGAttributes, \"color\" | \"fill\" | \"fill-rule\" | \"fill-opacity\" | \"stroke\" | \"stroke-width\" | \"stroke-linecap\" | \"stroke-linejoin\" | \"stroke-miterlimit\" | \"stroke-dasharray\" | \"stroke-dashoffset\" | \"stroke-opacity\" | \"shape-rendering\" | \"pathLength\"> {\n    }\n    interface TextContentElementSVGAttributes<T> extends CoreSVGAttributes<T>, Pick<PresentationSVGAttributes, \"font-family\" | \"font-style\" | \"font-variant\" | \"font-weight\" | \"font-stretch\" | \"font-size\" | \"font-size-adjust\" | \"kerning\" | \"letter-spacing\" | \"word-spacing\" | \"text-decoration\" | \"glyph-orientation-horizontal\" | \"glyph-orientation-vertical\" | \"direction\" | \"unicode-bidi\" | \"text-anchor\" | \"dominant-baseline\" | \"color\" | \"fill\" | \"fill-rule\" | \"fill-opacity\" | \"stroke\" | \"stroke-width\" | \"stroke-linecap\" | \"stroke-linejoin\" | \"stroke-miterlimit\" | \"stroke-dasharray\" | \"stroke-dashoffset\" | \"stroke-opacity\"> {\n    }\n    interface ZoomAndPanSVGAttributes {\n        zoomAndPan?: \"disable\" | \"magnify\";\n    }\n    interface AnimateSVGAttributes<T> extends AnimationElementSVGAttributes<T>, AnimationAttributeTargetSVGAttributes, AnimationTimingSVGAttributes, AnimationValueSVGAttributes, AnimationAdditionSVGAttributes, Pick<PresentationSVGAttributes, \"color-interpolation\" | \"color-rendering\"> {\n    }\n    interface AnimateMotionSVGAttributes<T> extends AnimationElementSVGAttributes<T>, AnimationTimingSVGAttributes, AnimationValueSVGAttributes, AnimationAdditionSVGAttributes {\n        path?: string;\n        keyPoints?: string;\n        rotate?: number | string | \"auto\" | \"auto-reverse\";\n        origin?: \"default\";\n    }\n    interface AnimateTransformSVGAttributes<T> extends AnimationElementSVGAttributes<T>, AnimationAttributeTargetSVGAttributes, AnimationTimingSVGAttributes, AnimationValueSVGAttributes, AnimationAdditionSVGAttributes {\n        type?: \"translate\" | \"scale\" | \"rotate\" | \"skewX\" | \"skewY\";\n    }\n    interface CircleSVGAttributes<T> extends GraphicsElementSVGAttributes<T>, ShapeElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes {\n        cx?: number | string;\n        cy?: number | string;\n        r?: number | string;\n    }\n    interface ClipPathSVGAttributes<T> extends CoreSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"clip-path\"> {\n        clipPathUnits?: SVGUnits;\n    }\n    interface DefsSVGAttributes<T> extends ContainerElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes {\n    }\n    interface DescSVGAttributes<T> extends CoreSVGAttributes<T>, StylableSVGAttributes {\n    }\n    interface EllipseSVGAttributes<T> extends GraphicsElementSVGAttributes<T>, ShapeElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes {\n        cx?: number | string;\n        cy?: number | string;\n        rx?: number | string;\n        ry?: number | string;\n    }\n    interface FeBlendSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, DoubleInputFilterSVGAttributes, StylableSVGAttributes {\n        mode?: \"normal\" | \"multiply\" | \"screen\" | \"darken\" | \"lighten\";\n    }\n    interface FeColorMatrixSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes {\n        type?: \"matrix\" | \"saturate\" | \"hueRotate\" | \"luminanceToAlpha\";\n        values?: string;\n    }\n    interface FeComponentTransferSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes {\n    }\n    interface FeCompositeSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, DoubleInputFilterSVGAttributes, StylableSVGAttributes {\n        operator?: \"over\" | \"in\" | \"out\" | \"atop\" | \"xor\" | \"arithmetic\";\n        k1?: number | string;\n        k2?: number | string;\n        k3?: number | string;\n        k4?: number | string;\n    }\n    interface FeConvolveMatrixSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes {\n        order?: number | string;\n        kernelMatrix?: string;\n        divisor?: number | string;\n        bias?: number | string;\n        targetX?: number | string;\n        targetY?: number | string;\n        edgeMode?: \"duplicate\" | \"wrap\" | \"none\";\n        kernelUnitLength?: number | string;\n        preserveAlpha?: \"true\" | \"false\";\n    }\n    interface FeDiffuseLightingSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes, Pick<PresentationSVGAttributes, \"color\" | \"lighting-color\"> {\n        surfaceScale?: number | string;\n        diffuseConstant?: number | string;\n        kernelUnitLength?: number | string;\n    }\n    interface FeDisplacementMapSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, DoubleInputFilterSVGAttributes, StylableSVGAttributes {\n        scale?: number | string;\n        xChannelSelector?: \"R\" | \"G\" | \"B\" | \"A\";\n        yChannelSelector?: \"R\" | \"G\" | \"B\" | \"A\";\n    }\n    interface FeDistantLightSVGAttributes<T> extends LightSourceElementSVGAttributes<T> {\n        azimuth?: number | string;\n        elevation?: number | string;\n    }\n    interface FeDropShadowSVGAttributes<T> extends CoreSVGAttributes<T>, FilterPrimitiveElementSVGAttributes<T>, StylableSVGAttributes, Pick<PresentationSVGAttributes, \"color\" | \"flood-color\" | \"flood-opacity\"> {\n        dx?: number | string;\n        dy?: number | string;\n        stdDeviation?: number | string;\n    }\n    interface FeFloodSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, StylableSVGAttributes, Pick<PresentationSVGAttributes, \"color\" | \"flood-color\" | \"flood-opacity\"> {\n    }\n    interface FeFuncSVGAttributes<T> extends CoreSVGAttributes<T> {\n        type?: \"identity\" | \"table\" | \"discrete\" | \"linear\" | \"gamma\";\n        tableValues?: string;\n        slope?: number | string;\n        intercept?: number | string;\n        amplitude?: number | string;\n        exponent?: number | string;\n        offset?: number | string;\n    }\n    interface FeGaussianBlurSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes {\n        stdDeviation?: number | string;\n    }\n    interface FeImageSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, ExternalResourceSVGAttributes, StylableSVGAttributes {\n        preserveAspectRatio?: SVGPreserveAspectRatio;\n        href?: string;\n    }\n    interface FeMergeSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, StylableSVGAttributes {\n    }\n    interface FeMergeNodeSVGAttributes<T> extends CoreSVGAttributes<T>, SingleInputFilterSVGAttributes {\n    }\n    interface FeMorphologySVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes {\n        operator?: \"erode\" | \"dilate\";\n        radius?: number | string;\n    }\n    interface FeOffsetSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes {\n        dx?: number | string;\n        dy?: number | string;\n    }\n    interface FePointLightSVGAttributes<T> extends LightSourceElementSVGAttributes<T> {\n        x?: number | string;\n        y?: number | string;\n        z?: number | string;\n    }\n    interface FeSpecularLightingSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes, Pick<PresentationSVGAttributes, \"color\" | \"lighting-color\"> {\n        surfaceScale?: string;\n        specularConstant?: string;\n        specularExponent?: string;\n        kernelUnitLength?: number | string;\n    }\n    interface FeSpotLightSVGAttributes<T> extends LightSourceElementSVGAttributes<T> {\n        x?: number | string;\n        y?: number | string;\n        z?: number | string;\n        pointsAtX?: number | string;\n        pointsAtY?: number | string;\n        pointsAtZ?: number | string;\n        specularExponent?: number | string;\n        limitingConeAngle?: number | string;\n    }\n    interface FeTileSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, SingleInputFilterSVGAttributes, StylableSVGAttributes {\n    }\n    interface FeTurbulanceSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, StylableSVGAttributes {\n        baseFrequency?: number | string;\n        numOctaves?: number | string;\n        seed?: number | string;\n        stitchTiles?: \"stitch\" | \"noStitch\";\n        type?: \"fractalNoise\" | \"turbulence\";\n    }\n    interface FilterSVGAttributes<T> extends CoreSVGAttributes<T>, ExternalResourceSVGAttributes, StylableSVGAttributes {\n        filterUnits?: SVGUnits;\n        primitiveUnits?: SVGUnits;\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n        filterRes?: number | string;\n    }\n    interface ForeignObjectSVGAttributes<T> extends NewViewportSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"display\" | \"visibility\"> {\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n    }\n    interface GSVGAttributes<T> extends ContainerElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"display\" | \"visibility\"> {\n    }\n    interface ImageSVGAttributes<T> extends NewViewportSVGAttributes<T>, GraphicsElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"color-profile\" | \"image-rendering\"> {\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n        preserveAspectRatio?: ImagePreserveAspectRatio;\n        href?: string;\n    }\n    interface LineSVGAttributes<T> extends GraphicsElementSVGAttributes<T>, ShapeElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"marker-start\" | \"marker-mid\" | \"marker-end\"> {\n        x1?: number | string;\n        y1?: number | string;\n        x2?: number | string;\n        y2?: number | string;\n    }\n    interface LinearGradientSVGAttributes<T> extends GradientElementSVGAttributes<T> {\n        x1?: number | string;\n        x2?: number | string;\n        y1?: number | string;\n        y2?: number | string;\n    }\n    interface MarkerSVGAttributes<T> extends ContainerElementSVGAttributes<T>, ExternalResourceSVGAttributes, StylableSVGAttributes, FitToViewBoxSVGAttributes, Pick<PresentationSVGAttributes, \"overflow\" | \"clip\"> {\n        markerUnits?: \"strokeWidth\" | \"userSpaceOnUse\";\n        refX?: number | string;\n        refY?: number | string;\n        markerWidth?: number | string;\n        markerHeight?: number | string;\n        orient?: string;\n    }\n    interface MaskSVGAttributes<T> extends Omit<ContainerElementSVGAttributes<T>, \"opacity\" | \"filter\">, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes {\n        maskUnits?: SVGUnits;\n        maskContentUnits?: SVGUnits;\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n    }\n    interface MetadataSVGAttributes<T> extends CoreSVGAttributes<T> {\n    }\n    interface MPathSVGAttributes<T> extends CoreSVGAttributes<T> {\n    }\n    interface PathSVGAttributes<T> extends GraphicsElementSVGAttributes<T>, ShapeElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"marker-start\" | \"marker-mid\" | \"marker-end\"> {\n        d?: string;\n        pathLength?: number | string;\n    }\n    interface PatternSVGAttributes<T> extends ContainerElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, FitToViewBoxSVGAttributes, Pick<PresentationSVGAttributes, \"overflow\" | \"clip\"> {\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n        patternUnits?: SVGUnits;\n        patternContentUnits?: SVGUnits;\n        patternTransform?: string;\n        href?: string;\n    }\n    interface PolygonSVGAttributes<T> extends GraphicsElementSVGAttributes<T>, ShapeElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"marker-start\" | \"marker-mid\" | \"marker-end\"> {\n        points?: string;\n    }\n    interface PolylineSVGAttributes<T> extends GraphicsElementSVGAttributes<T>, ShapeElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"marker-start\" | \"marker-mid\" | \"marker-end\"> {\n        points?: string;\n    }\n    interface RadialGradientSVGAttributes<T> extends GradientElementSVGAttributes<T> {\n        cx?: number | string;\n        cy?: number | string;\n        r?: number | string;\n        fx?: number | string;\n        fy?: number | string;\n    }\n    interface RectSVGAttributes<T> extends GraphicsElementSVGAttributes<T>, ShapeElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes {\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n        rx?: number | string;\n        ry?: number | string;\n    }\n    interface SetSVGAttributes<T> extends CoreSVGAttributes<T>, StylableSVGAttributes, AnimationTimingSVGAttributes {\n    }\n    interface StopSVGAttributes<T> extends CoreSVGAttributes<T>, StylableSVGAttributes, Pick<PresentationSVGAttributes, \"color\" | \"stop-color\" | \"stop-opacity\"> {\n        offset?: number | string;\n    }\n    interface SvgSVGAttributes<T> extends ContainerElementSVGAttributes<T>, NewViewportSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, FitToViewBoxSVGAttributes, ZoomAndPanSVGAttributes, PresentationSVGAttributes {\n        version?: string;\n        baseProfile?: string;\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n        contentScriptType?: string;\n        contentStyleType?: string;\n        xmlns?: string;\n    }\n    interface SwitchSVGAttributes<T> extends ContainerElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"display\" | \"visibility\"> {\n    }\n    interface SymbolSVGAttributes<T> extends ContainerElementSVGAttributes<T>, NewViewportSVGAttributes<T>, ExternalResourceSVGAttributes, StylableSVGAttributes, FitToViewBoxSVGAttributes {\n        width?: number | string;\n        height?: number | string;\n        preserveAspectRatio?: SVGPreserveAspectRatio;\n        refX?: number | string;\n        refY?: number | string;\n        viewBox?: string;\n        x?: number | string;\n        y?: number | string;\n    }\n    interface TextSVGAttributes<T> extends TextContentElementSVGAttributes<T>, GraphicsElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, TransformableSVGAttributes, Pick<PresentationSVGAttributes, \"writing-mode\" | \"text-rendering\"> {\n        x?: number | string;\n        y?: number | string;\n        dx?: number | string;\n        dy?: number | string;\n        rotate?: number | string;\n        textLength?: number | string;\n        lengthAdjust?: \"spacing\" | \"spacingAndGlyphs\";\n    }\n    interface TextPathSVGAttributes<T> extends TextContentElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, Pick<PresentationSVGAttributes, \"alignment-baseline\" | \"baseline-shift\" | \"display\" | \"visibility\"> {\n        startOffset?: number | string;\n        method?: \"align\" | \"stretch\";\n        spacing?: \"auto\" | \"exact\";\n        href?: string;\n    }\n    interface TSpanSVGAttributes<T> extends TextContentElementSVGAttributes<T>, ConditionalProcessingSVGAttributes, ExternalResourceSVGAttributes, StylableSVGAttributes, Pick<PresentationSVGAttributes, \"alignment-baseline\" | \"baseline-shift\" | \"display\" | \"visibility\"> {\n        x?: number | string;\n        y?: number | string;\n        dx?: number | string;\n        dy?: number | string;\n        rotate?: number | string;\n        textLength?: number | string;\n        lengthAdjust?: \"spacing\" | \"spacingAndGlyphs\";\n    }\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use\n     */\n    interface UseSVGAttributes<T> extends CoreSVGAttributes<T>, StylableSVGAttributes, ConditionalProcessingSVGAttributes, GraphicsElementSVGAttributes<T>, PresentationSVGAttributes, ExternalResourceSVGAttributes, TransformableSVGAttributes {\n        x?: number | string;\n        y?: number | string;\n        width?: number | string;\n        height?: number | string;\n        href?: string;\n    }\n    interface ViewSVGAttributes<T> extends CoreSVGAttributes<T>, ExternalResourceSVGAttributes, FitToViewBoxSVGAttributes, ZoomAndPanSVGAttributes {\n        viewTarget?: string;\n    }\n    /**\n     * @type {HTMLElementTagNameMap}\n     */\n    interface HTMLElementTags {\n        a: AnchorHTMLAttributes<HTMLAnchorElement>;\n        abbr: HTMLAttributes<HTMLElement>;\n        address: HTMLAttributes<HTMLElement>;\n        area: AreaHTMLAttributes<HTMLAreaElement>;\n        article: HTMLAttributes<HTMLElement>;\n        aside: HTMLAttributes<HTMLElement>;\n        audio: AudioHTMLAttributes<HTMLAudioElement>;\n        b: HTMLAttributes<HTMLElement>;\n        base: BaseHTMLAttributes<HTMLBaseElement>;\n        bdi: HTMLAttributes<HTMLElement>;\n        bdo: HTMLAttributes<HTMLElement>;\n        blockquote: BlockquoteHTMLAttributes<HTMLElement>;\n        body: HTMLAttributes<HTMLBodyElement>;\n        br: HTMLAttributes<HTMLBRElement>;\n        button: ButtonHTMLAttributes<HTMLButtonElement>;\n        canvas: CanvasHTMLAttributes<HTMLCanvasElement>;\n        caption: HTMLAttributes<HTMLElement>;\n        cite: HTMLAttributes<HTMLElement>;\n        code: HTMLAttributes<HTMLElement>;\n        col: ColHTMLAttributes<HTMLTableColElement>;\n        colgroup: ColgroupHTMLAttributes<HTMLTableColElement>;\n        data: DataHTMLAttributes<HTMLElement>;\n        datalist: HTMLAttributes<HTMLDataListElement>;\n        dd: HTMLAttributes<HTMLElement>;\n        del: HTMLAttributes<HTMLElement>;\n        details: DetailsHtmlAttributes<HTMLDetailsElement>;\n        dfn: HTMLAttributes<HTMLElement>;\n        dialog: DialogHtmlAttributes<HTMLDialogElement>;\n        div: HTMLAttributes<HTMLDivElement>;\n        dl: HTMLAttributes<HTMLDListElement>;\n        dt: HTMLAttributes<HTMLElement>;\n        em: HTMLAttributes<HTMLElement>;\n        embed: EmbedHTMLAttributes<HTMLEmbedElement>;\n        fieldset: FieldsetHTMLAttributes<HTMLFieldSetElement>;\n        figcaption: HTMLAttributes<HTMLElement>;\n        figure: HTMLAttributes<HTMLElement>;\n        footer: HTMLAttributes<HTMLElement>;\n        form: FormHTMLAttributes<HTMLFormElement>;\n        h1: HTMLAttributes<HTMLHeadingElement>;\n        h2: HTMLAttributes<HTMLHeadingElement>;\n        h3: HTMLAttributes<HTMLHeadingElement>;\n        h4: HTMLAttributes<HTMLHeadingElement>;\n        h5: HTMLAttributes<HTMLHeadingElement>;\n        h6: HTMLAttributes<HTMLHeadingElement>;\n        head: HTMLAttributes<HTMLHeadElement>;\n        header: HTMLAttributes<HTMLElement>;\n        hgroup: HTMLAttributes<HTMLElement>;\n        hr: HTMLAttributes<HTMLHRElement>;\n        html: HTMLAttributes<HTMLHtmlElement>;\n        i: HTMLAttributes<HTMLElement>;\n        iframe: IframeHTMLAttributes<HTMLIFrameElement>;\n        img: ImgHTMLAttributes<HTMLImageElement>;\n        input: InputHTMLAttributes<HTMLInputElement>;\n        ins: InsHTMLAttributes<HTMLModElement>;\n        kbd: HTMLAttributes<HTMLElement>;\n        label: LabelHTMLAttributes<HTMLLabelElement>;\n        legend: HTMLAttributes<HTMLLegendElement>;\n        li: LiHTMLAttributes<HTMLLIElement>;\n        link: LinkHTMLAttributes<HTMLLinkElement>;\n        main: HTMLAttributes<HTMLElement>;\n        map: MapHTMLAttributes<HTMLMapElement>;\n        mark: HTMLAttributes<HTMLElement>;\n        menu: MenuHTMLAttributes<HTMLElement>;\n        meta: MetaHTMLAttributes<HTMLMetaElement>;\n        meter: MeterHTMLAttributes<HTMLElement>;\n        nav: HTMLAttributes<HTMLElement>;\n        noscript: HTMLAttributes<HTMLElement>;\n        object: ObjectHTMLAttributes<HTMLObjectElement>;\n        ol: OlHTMLAttributes<HTMLOListElement>;\n        optgroup: OptgroupHTMLAttributes<HTMLOptGroupElement>;\n        option: OptionHTMLAttributes<HTMLOptionElement>;\n        output: OutputHTMLAttributes<HTMLElement>;\n        p: HTMLAttributes<HTMLParagraphElement>;\n        picture: HTMLAttributes<HTMLElement>;\n        pre: HTMLAttributes<HTMLPreElement>;\n        progress: ProgressHTMLAttributes<HTMLProgressElement>;\n        q: QuoteHTMLAttributes<HTMLQuoteElement>;\n        rp: HTMLAttributes<HTMLElement>;\n        rt: HTMLAttributes<HTMLElement>;\n        ruby: HTMLAttributes<HTMLElement>;\n        s: HTMLAttributes<HTMLElement>;\n        samp: HTMLAttributes<HTMLElement>;\n        script: ScriptHTMLAttributes<HTMLScriptElement>;\n        search: HTMLAttributes<HTMLElement>;\n        section: HTMLAttributes<HTMLElement>;\n        select: SelectHTMLAttributes<HTMLSelectElement>;\n        slot: HTMLSlotElementAttributes;\n        small: HTMLAttributes<HTMLElement>;\n        source: SourceHTMLAttributes<HTMLSourceElement>;\n        span: HTMLAttributes<HTMLSpanElement>;\n        strong: HTMLAttributes<HTMLElement>;\n        style: StyleHTMLAttributes<HTMLStyleElement>;\n        sub: HTMLAttributes<HTMLElement>;\n        summary: HTMLAttributes<HTMLElement>;\n        sup: HTMLAttributes<HTMLElement>;\n        table: HTMLAttributes<HTMLTableElement>;\n        tbody: HTMLAttributes<HTMLTableSectionElement>;\n        td: TdHTMLAttributes<HTMLTableCellElement>;\n        template: TemplateHTMLAttributes<HTMLTemplateElement>;\n        textarea: TextareaHTMLAttributes<HTMLTextAreaElement>;\n        tfoot: HTMLAttributes<HTMLTableSectionElement>;\n        th: ThHTMLAttributes<HTMLTableCellElement>;\n        thead: HTMLAttributes<HTMLTableSectionElement>;\n        time: TimeHTMLAttributes<HTMLElement>;\n        title: HTMLAttributes<HTMLTitleElement>;\n        tr: HTMLAttributes<HTMLTableRowElement>;\n        track: TrackHTMLAttributes<HTMLTrackElement>;\n        u: HTMLAttributes<HTMLElement>;\n        ul: HTMLAttributes<HTMLUListElement>;\n        var: HTMLAttributes<HTMLElement>;\n        video: VideoHTMLAttributes<HTMLVideoElement>;\n        wbr: HTMLAttributes<HTMLElement>;\n    }\n    /**\n     * @type {HTMLElementDeprecatedTagNameMap}\n     */\n    interface HTMLElementDeprecatedTags {\n        big: HTMLAttributes<HTMLElement>;\n        keygen: KeygenHTMLAttributes<HTMLElement>;\n        menuitem: HTMLAttributes<HTMLElement>;\n        noindex: HTMLAttributes<HTMLElement>;\n        param: ParamHTMLAttributes<HTMLParamElement>;\n    }\n    /**\n     * @type {SVGElementTagNameMap}\n     */\n    interface SVGElementTags {\n        animate: AnimateSVGAttributes<SVGAnimateElement>;\n        animateMotion: AnimateMotionSVGAttributes<SVGAnimateMotionElement>;\n        animateTransform: AnimateTransformSVGAttributes<SVGAnimateTransformElement>;\n        circle: CircleSVGAttributes<SVGCircleElement>;\n        clipPath: ClipPathSVGAttributes<SVGClipPathElement>;\n        defs: DefsSVGAttributes<SVGDefsElement>;\n        desc: DescSVGAttributes<SVGDescElement>;\n        ellipse: EllipseSVGAttributes<SVGEllipseElement>;\n        feBlend: FeBlendSVGAttributes<SVGFEBlendElement>;\n        feColorMatrix: FeColorMatrixSVGAttributes<SVGFEColorMatrixElement>;\n        feComponentTransfer: FeComponentTransferSVGAttributes<SVGFEComponentTransferElement>;\n        feComposite: FeCompositeSVGAttributes<SVGFECompositeElement>;\n        feConvolveMatrix: FeConvolveMatrixSVGAttributes<SVGFEConvolveMatrixElement>;\n        feDiffuseLighting: FeDiffuseLightingSVGAttributes<SVGFEDiffuseLightingElement>;\n        feDisplacementMap: FeDisplacementMapSVGAttributes<SVGFEDisplacementMapElement>;\n        feDistantLight: FeDistantLightSVGAttributes<SVGFEDistantLightElement>;\n        feDropShadow: FeDropShadowSVGAttributes<SVGFEDropShadowElement>;\n        feFlood: FeFloodSVGAttributes<SVGFEFloodElement>;\n        feFuncA: FeFuncSVGAttributes<SVGFEFuncAElement>;\n        feFuncB: FeFuncSVGAttributes<SVGFEFuncBElement>;\n        feFuncG: FeFuncSVGAttributes<SVGFEFuncGElement>;\n        feFuncR: FeFuncSVGAttributes<SVGFEFuncRElement>;\n        feGaussianBlur: FeGaussianBlurSVGAttributes<SVGFEGaussianBlurElement>;\n        feImage: FeImageSVGAttributes<SVGFEImageElement>;\n        feMerge: FeMergeSVGAttributes<SVGFEMergeElement>;\n        feMergeNode: FeMergeNodeSVGAttributes<SVGFEMergeNodeElement>;\n        feMorphology: FeMorphologySVGAttributes<SVGFEMorphologyElement>;\n        feOffset: FeOffsetSVGAttributes<SVGFEOffsetElement>;\n        fePointLight: FePointLightSVGAttributes<SVGFEPointLightElement>;\n        feSpecularLighting: FeSpecularLightingSVGAttributes<SVGFESpecularLightingElement>;\n        feSpotLight: FeSpotLightSVGAttributes<SVGFESpotLightElement>;\n        feTile: FeTileSVGAttributes<SVGFETileElement>;\n        feTurbulence: FeTurbulanceSVGAttributes<SVGFETurbulenceElement>;\n        filter: FilterSVGAttributes<SVGFilterElement>;\n        foreignObject: ForeignObjectSVGAttributes<SVGForeignObjectElement>;\n        g: GSVGAttributes<SVGGElement>;\n        image: ImageSVGAttributes<SVGImageElement>;\n        line: LineSVGAttributes<SVGLineElement>;\n        linearGradient: LinearGradientSVGAttributes<SVGLinearGradientElement>;\n        marker: MarkerSVGAttributes<SVGMarkerElement>;\n        mask: MaskSVGAttributes<SVGMaskElement>;\n        metadata: MetadataSVGAttributes<SVGMetadataElement>;\n        mpath: MPathSVGAttributes<SVGMPathElement>;\n        path: PathSVGAttributes<SVGPathElement>;\n        pattern: PatternSVGAttributes<SVGPatternElement>;\n        polygon: PolygonSVGAttributes<SVGPolygonElement>;\n        polyline: PolylineSVGAttributes<SVGPolylineElement>;\n        radialGradient: RadialGradientSVGAttributes<SVGRadialGradientElement>;\n        rect: RectSVGAttributes<SVGRectElement>;\n        set: SetSVGAttributes<SVGSetElement>;\n        stop: StopSVGAttributes<SVGStopElement>;\n        svg: SvgSVGAttributes<SVGSVGElement>;\n        switch: SwitchSVGAttributes<SVGSwitchElement>;\n        symbol: SymbolSVGAttributes<SVGSymbolElement>;\n        text: TextSVGAttributes<SVGTextElement>;\n        textPath: TextPathSVGAttributes<SVGTextPathElement>;\n        tspan: TSpanSVGAttributes<SVGTSpanElement>;\n        use: UseSVGAttributes<SVGUseElement>;\n        view: ViewSVGAttributes<SVGViewElement>;\n    }\n    interface IntrinsicElements extends HTMLElementTags, HTMLElementDeprecatedTags, SVGElementTags {\n    }\n}\n",
      "csstype@3.1.3/index.d.ts": "export {};\n\nexport type PropertyValue<TValue> = TValue extends Array<infer AValue>\n  ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue>\n  : TValue extends infer TUnpacked & {}\n  ? TUnpacked\n  : TValue;\n\nexport type Fallback<T> = { [P in keyof T]: T[P] | readonly NonNullable<T[P]>[] };\n\nexport interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  accentColor?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  alignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  alignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  alignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  alignTracks?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** | **115** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  animationComposition?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  animationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  animationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  animationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  animationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  animationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  animationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  animationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-range-end`** CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-end\n   */\n  animationRangeEnd?: Property.AnimationRangeEnd<TLength> | undefined;\n  /**\n   * The **`animation-range-start`** CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-start\n   */\n  animationRangeStart?: Property.AnimationRangeStart<TLength> | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  animationTimeline?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  animationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  aspectRatio?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  backdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  backfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  backgroundAttachment?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  backgroundBlendMode?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  |  **5**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  backgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  backgroundColor?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  backgroundImage?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  backgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  backgroundPositionX?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  backgroundPositionY?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  backgroundRepeat?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  backgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  blockOverflow?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  blockSize?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  borderBlockColor?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  borderBlockEndColor?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  borderBlockEndStyle?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  borderBlockEndWidth?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  borderBlockStartColor?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  borderBlockStartStyle?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  borderBlockStartWidth?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  borderBlockStyle?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  borderBlockWidth?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  borderBottomColor?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  borderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  borderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  borderBottomStyle?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  borderBottomWidth?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  borderCollapse?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  borderEndEndRadius?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  borderEndStartRadius?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  borderImageOutset?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  borderImageRepeat?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  borderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  borderImageSource?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  borderImageWidth?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  borderInlineColor?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  borderInlineEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  borderInlineEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  borderInlineEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  borderInlineStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  borderInlineStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  borderInlineStartWidth?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  borderInlineStyle?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  borderInlineWidth?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  borderLeftColor?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  borderLeftStyle?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  borderLeftWidth?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  borderRightColor?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  borderRightStyle?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  borderRightWidth?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  borderSpacing?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  borderStartEndRadius?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  borderStartStartRadius?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  borderTopColor?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  borderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  borderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  borderTopStyle?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  borderTopWidth?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  boxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  boxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  boxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  breakAfter?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  breakBefore?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  breakInside?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  captionSide?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  caretColor?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  caretShape?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  clipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  colorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  colorScheme?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  columnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  columnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  columnGap?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  columnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  columnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  columnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  columnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  columnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  containIntrinsicBlockSize?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  containIntrinsicHeight?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  containIntrinsicInlineSize?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  containIntrinsicWidth?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  containerName?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  containerType?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome |   Firefox   | Safari | Edge | IE  |\n   * | :----: | :---------: | :----: | :--: | :-: |\n   * | **85** | **preview** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  contentVisibility?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  counterIncrement?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  counterReset?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **85** | **68**  | **17.2** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  counterSet?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  emptyCells?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  flexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  flexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  flexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  flexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  flexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  fontFamily?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  fontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  fontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  fontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  fontOpticalSizing?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  fontPalette?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  fontSize?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  fontSmooth?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  fontStretch?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  fontStyle?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps || position]`\n   *\n   * **Initial value**: `weight style small-caps position `\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  fontSynthesis?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-synthesis-position`** CSS property lets you specify whether or not a browser may synthesize the subscript and superscript \"position\" typefaces when they are missing in a font family, while using `font-variant-position` to set the positions.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **118** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position\n   */\n  fontSynthesisPosition?: Property.FontSynthesisPosition | undefined;\n  /**\n   * The **`font-synthesis-small-caps`** CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps\n   */\n  fontSynthesisSmallCaps?: Property.FontSynthesisSmallCaps | undefined;\n  /**\n   * The **`font-synthesis-style`** CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style\n   */\n  fontSynthesisStyle?: Property.FontSynthesisStyle | undefined;\n  /**\n   * The **`font-synthesis-weight`** CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight\n   */\n  fontSynthesisWeight?: Property.FontSynthesisWeight | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  fontVariant?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **111** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  fontVariantAlternates?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  fontVariantCaps?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  fontVariantEastAsian?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  fontVariantEmoji?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  fontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  fontVariantNumeric?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **117** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  fontVariantPosition?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  fontVariationSettings?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  fontWeight?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** | **113** |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  forcedColorAdjust?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  gridAutoColumns?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  gridAutoFlow?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  gridAutoRows?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  gridColumnEnd?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  gridColumnStart?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  gridRowEnd?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  gridRowStart?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  gridTemplateAreas?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  gridTemplateColumns?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  gridTemplateRows?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  hangingPunctuation?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :-----: | :-----: | :-------: | :--: | :-: |\n   * | **106** | **98**  |  **17**   | n/a  | No  |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  hyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  hyphenateLimitChars?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |      IE      |\n   * | :------: | :-----: | :-------: | :----: | :----------: |\n   * |  **55**  | **43**  |  **17**   | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ | 5.1 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  imageOrientation?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  imageRendering?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  imageResolution?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  initialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  inlineSize?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  inputSecurity?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  insetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  insetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  insetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  insetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  justifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  justifyItems?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  justifySelf?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  justifyTracks?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  lineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  lineHeightStep?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  listStyleImage?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  listStylePosition?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  listStyleType?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  marginBlockEnd?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  marginBlockStart?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  marginBottom?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  marginInlineEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  marginInlineStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  marginLeft?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  marginRight?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  marginTop?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  marginTrim?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  maskBorderMode?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-outset)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  maskBorderOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-repeat)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  maskBorderRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-slice)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  maskBorderSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-source)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  maskBorderSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-width)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  maskBorderWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  maskClip?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  maskComposite?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 16-79 | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  maskImage?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  maskMode?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  maskOrigin?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  maskPosition?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  maskRepeat?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   * | 4 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  maskSize?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  maskType?: Property.MaskType | undefined;\n  /**\n   * This feature is not Baseline because it does not work in some of the most widely-used browsers.\n   *\n   * **Syntax**: `[ pack | next ] || [ definite-first | ordered ]`\n   *\n   * **Initial value**: `pack`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow\n   */\n  masonryAutoFlow?: Property.MasonryAutoFlow | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** | **117** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  mathDepth?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  mathShift?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** | **117** | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  mathStyle?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  maxBlockSize?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  maxHeight?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  maxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  maxLines?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  maxWidth?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  minBlockSize?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  minHeight?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  minInlineSize?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  minWidth?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  mixBlendMode?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  motionDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  motionPath?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  motionRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  objectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  objectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** | **72**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  offsetAnchor?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  offsetDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  offsetPath?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `normal | auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  offsetPosition?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotate?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  outlineColor?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  outlineOffset?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  outlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  outlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  overflowAnchor?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  overflowBlock?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   */\n  overflowClipBox?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  overflowClipMargin?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  overflowInline?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  overflowWrap?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  overflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  overflowY?: Property.OverflowY | undefined;\n  /**\n   * The **`overlay`** CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal `<dialog>` element) is actually rendered in the top layer. This property is only relevant within a list of `transition-property` values, and only if `allow-discrete` is set as the `transition-behavior`.\n   *\n   * **Syntax**: `none | auto`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overlay\n   */\n  overlay?: Property.Overlay | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  overscrollBehaviorBlock?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  overscrollBehaviorInline?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  overscrollBehaviorX?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  overscrollBehaviorY?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  paddingBlockEnd?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  paddingBlockStart?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  paddingBottom?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  paddingInlineEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  paddingInlineStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  paddingLeft?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  paddingRight?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  paddingTop?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari   | Edge | IE  |\n   * | :----: | :-----: | :-------: | :--: | :-: |\n   * | **85** | **110** | **≤13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  pageBreakAfter?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  pageBreakBefore?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  pageBreakInside?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  paintOrder?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  perspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  pointerEvents?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  printColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  rowGap?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  rubyAlign?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  rubyMerge?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  rubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  scrollBehavior?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  scrollMarginBlockEnd?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  scrollMarginBlockStart?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  scrollMarginInlineEnd?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  scrollMarginInlineStart?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  scrollPaddingBlockEnd?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  scrollPaddingBlockStart?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  scrollPaddingBottom?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  scrollPaddingInlineEnd?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  scrollPaddingInlineStart?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  scrollPaddingLeft?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  scrollPaddingRight?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  scrollPaddingTop?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  scrollSnapAlign?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollSnapMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollSnapMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollSnapMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollSnapMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  scrollSnapStop?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  scrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  scrollTimelineAxis?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  scrollTimelineName?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  scrollbarColor?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  scrollbarGutter?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  scrollbarWidth?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  shapeImageThreshold?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  shapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  shapeOutside?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  tabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  tableLayout?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  textAlign?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  textAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            |  Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :----: | :------------------------------------: |\n   * |           **48**           | **48**  |           **15.4**           | **79** | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  textCombineUpright?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  textDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  textDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  textDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  textDecorationSkipInk?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  textDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationThickness?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  textEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  textEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  textEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  textIndent?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge  |   IE   |\n   * | :----: | :-----: | :----: | :---: | :----: |\n   * |  n/a   | **55**  |   No   | 12-79 | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  textJustify?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  textOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  textOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  textRendering?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  textShadow?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  textSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  textTransform?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  textUnderlineOffset?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  textUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`text-wrap`** CSS property controls how text inside an element is wrapped. The different values provide:\n   *\n   * **Syntax**: `wrap | nowrap | balance | stable | pretty`\n   *\n   * **Initial value**: `wrap`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** | **121** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-wrap\n   */\n  textWrap?: Property.TextWrap | undefined;\n  /**\n   * The **`timeline-scope`** CSS property modifies the scope of a named animation timeline.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/timeline-scope\n   */\n  timelineScope?: Property.TimelineScope | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  touchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  transformBox?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **36**  | **16**  |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ |         | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  transformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **36**  | **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  transformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-behavior`** CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.\n   *\n   * **Syntax**: `<transition-behavior-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-behavior\n   */\n  transitionBehavior?: Property.TransitionBehavior | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  transitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  transitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  transitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  transitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  userSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  verticalAlign?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-timeline-axis`** CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a _named view progress timeline_ animation, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline-axis` is set on the subject. See CSS scroll-driven animations for more details.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis\n   */\n  viewTimelineAxis?: Property.ViewTimelineAxis | undefined;\n  /**\n   * The **`view-timeline-inset`** CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a _named view progress timeline_ animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.\n   *\n   * **Syntax**: `[ [ auto | <length-percentage> ]{1,2} ]#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset\n   */\n  viewTimelineInset?: Property.ViewTimelineInset<TLength> | undefined;\n  /**\n   * The **`view-timeline-name`** CSS property is used to define the name of a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-name\n   */\n  viewTimelineName?: Property.ViewTimelineName | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  viewTransitionName?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  whiteSpace?: Property.WhiteSpace | undefined;\n  /**\n   * The **`white-space-collapse`** CSS property controls how white space inside an element is collapsed.\n   *\n   * **Syntax**: `collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces`\n   *\n   * **Initial value**: `collapse`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space-collapse\n   */\n  whiteSpaceCollapse?: Property.WhiteSpaceCollapse | undefined;\n  /**\n   * **Syntax**: `none | discard-before || discard-after || discard-inner`\n   *\n   * **Initial value**: `none`\n   */\n  whiteSpaceTrim?: Property.WhiteSpaceTrim | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  willChange?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  wordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge   | IE  |\n   * | :-----: | :-----: | :-------: | :-----: | :-: |\n   * | **≤80** | **≤72** | **≤13.1** | **≤80** | No  |\n   */\n  wordWrap?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  writingMode?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  zIndex?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   n/a   | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-range`** CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.\n   *\n   * **Syntax**: `[ <'animation-range-start'> <'animation-range-end'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range\n   */\n  animationRange?: Property.AnimationRange<TLength> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  backgroundPosition?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  borderBlock?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  borderBlockEnd?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  borderBlockStart?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  borderBottom?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  borderColor?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  borderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  borderInline?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  borderInlineEnd?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  borderInlineStart?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  borderLeft?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  borderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  borderRight?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  borderStyle?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  borderTop?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  borderWidth?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  columnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ auto? [ none | <length> ] ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  containIntrinsicSize?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  flexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  gridArea?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  gridColumn?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  gridRow?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  gridTemplate?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  insetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  insetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  lineClamp?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  listStyle?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  marginBlock?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  marginInline?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox |  Safari   | Edge  | IE  |\n   * | :----: | :-----: | :-------: | :---: | :-: |\n   * | **1**  | **53**  | **15.4**  | 12-79 | No  |\n   * |        |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |             Safari             | Edge | IE  |\n   * | :------------------------------: | :-----: | :----------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    |            **17.2**            | n/a  | No  |\n   * |                                  |         | 3.1 _(-webkit-mask-box-image)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  maskBorder?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **94** | **88**  | **16.4** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  overscrollBehavior?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  paddingBlock?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  paddingInline?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  placeContent?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  placeItems?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  placeSelf?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  scrollMarginBlock?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  scrollMarginInline?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  scrollPadding?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  scrollPaddingBlock?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  scrollPaddingInline?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollSnapMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  scrollTimeline?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  textEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`view-timeline`** CSS shorthand property is used to define a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `[ <'view-timeline-name'> <'view-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline\n   */\n  viewTimeline?: Property.ViewTimeline | undefined;\n}\n\nexport interface StandardProperties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandProperties<TLength, TTime>,\n    StandardShorthandProperties<TLength, TTime> {}\n\nexport interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  MozAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  MozAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  MozAppearance?: Property.MozAppearance | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBinding?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderBottomColors?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozBorderEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderLeftColors?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderRightColors?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderTopColors?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  MozColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozContextProperties?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  MozHyphens?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozImageRegion?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  MozOrient?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  MozOsxFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomleft?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomright?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopleft?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopright?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  MozStackSizing?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  MozTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  MozTextBlink?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  MozTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozUserFocus?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  MozUserModify?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  MozUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  MozWindowDragging?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  MozWindowShadow?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  msAccelerator?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  msBlockProgression?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomChaining?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  msContentZoomLimitMax?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  msContentZoomLimitMin?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  msContentZoomSnapPoints?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomSnapType?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  msContentZooming?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  msFilter?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  msFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  msFlexPositive?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowFrom?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowInto?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridColumns?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridRows?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  msHighContrastAdjust?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  msHyphenateLimitChars?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  msHyphenateLimitLines?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  msHyphenateLimitZone?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  msHyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  msImeAlign?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  msLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  msOrder?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  msOverflowStyle?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowY?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  msScrollChaining?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitXMax?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitXMin?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitYMax?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitYMin?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  msScrollRails?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsX?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsY?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollSnapType?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollTranslation?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbar3dlightColor?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  msScrollbarArrowColor?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbarBaseColor?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarDarkshadowColor?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  msScrollbarFaceColor?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  msScrollbarHighlightColor?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarShadowColor?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  msScrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  msTextAutospace?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  msTextCombineHorizontal?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  msTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  msTouchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  msTouchSelect?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  msTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  msTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  msTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  msUserSelect?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  msWordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  msWrapFlow?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msWrapMargin?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  msWrapThrough?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  msWritingMode?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitAlignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  WebkitAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  WebkitAppearance?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBackdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  WebkitBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  WebkitBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  WebkitBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitBorderBeforeColor?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBorderBeforeStyle?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitBorderBeforeWidth?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  WebkitBorderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  WebkitBoxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxReflect?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  WebkitBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitClipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  WebkitColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitFilter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFlexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  WebkitFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitFlexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitFlexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  WebkitFlexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitHyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  WebkitHyphens?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitInitialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitJustifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitLineClamp?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  WebkitMaskAttachment?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  WebkitMaskBoxImageRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskBoxImageSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitMaskBoxImageWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  WebkitMaskClip?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  WebkitMaskComposite?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskImage?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  WebkitMaskOrigin?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  WebkitMaskPosition?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionX?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionY?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeat?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatX?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatY?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitMaskSize?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitOrder?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitOverflowScrolling?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  WebkitPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  WebkitPrintColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  WebkitRubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitScrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitShapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  WebkitTapHighlightColor?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextCombine?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  WebkitTextDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  WebkitTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  WebkitTextEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextFillColor?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  WebkitTextOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  WebkitTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextStrokeColor?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitTextStrokeWidth?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitTextUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  WebkitTouchCallout?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  WebkitTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  WebkitTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  WebkitTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  WebkitUserModify?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  WebkitWritingMode?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  MozAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  MozBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  MozColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  MozColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   */\n  MozOutlineRadius?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  msContentZoomLimit?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  msContentZoomSnap?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  msFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  msScrollLimit?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  msScrollSnapX?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  msScrollSnapY?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  msTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  WebkitAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  WebkitBorderBefore?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  WebkitBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  WebkitBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  WebkitColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  WebkitColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  WebkitFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  WebkitFlexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  WebkitMask?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  WebkitMaskBoxImage?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  WebkitTextEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  WebkitTextStroke?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  WebkitTransition?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorProperties<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {}\n\nexport interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  boxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  boxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  boxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  boxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  boxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  boxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridColumnGap?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  gridGap?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridRowGap?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  imeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapCoordinate?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  scrollSnapDestination?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeX?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeY?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  KhtmlBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  KhtmlBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  KhtmlBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  KhtmlBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * @deprecated\n   */\n  MozBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  MozBackgroundInlinePolicy?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  MozBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomleft?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomright?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopleft?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopright?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  MozBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  MozBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  MozBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  MozBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  MozFloatEdge?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozForceBrokenImageIcon?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  MozOutline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  MozOutlineColor?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozOutlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  MozOutlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  MozPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozTextAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  MozTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  MozTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  MozTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * @deprecated\n   */\n  MozTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  MozTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  MozTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  MozTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  MozTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  MozTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozUserInput?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  msImeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  OAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  OAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  OAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  OAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  OBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  OBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  OObjectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  OObjectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  OTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  OTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  OTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  OTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  OTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  WebkitBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  WebkitBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  WebkitBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  WebkitBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  WebkitBoxPack?: Property.BoxPack | undefined;\n}\n\nexport interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  alignmentBaseline?: Property.AlignmentBaseline | undefined;\n  baselineShift?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  clipPath?: Property.ClipPath | undefined;\n  clipRule?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  colorInterpolation?: Property.ColorInterpolation | undefined;\n  colorRendering?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  dominantBaseline?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  fillOpacity?: Property.FillOpacity | undefined;\n  fillRule?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  floodColor?: Property.FloodColor | undefined;\n  floodOpacity?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  fontFamily?: Property.FontFamily | undefined;\n  fontSize?: Property.FontSize<TLength> | undefined;\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  fontStretch?: Property.FontStretch | undefined;\n  fontStyle?: Property.FontStyle | undefined;\n  fontVariant?: Property.FontVariant | undefined;\n  fontWeight?: Property.FontWeight | undefined;\n  glyphOrientationVertical?: Property.GlyphOrientationVertical | undefined;\n  imageRendering?: Property.ImageRendering | undefined;\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  lightingColor?: Property.LightingColor | undefined;\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  markerEnd?: Property.MarkerEnd | undefined;\n  markerMid?: Property.MarkerMid | undefined;\n  markerStart?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  paintOrder?: Property.PaintOrder | undefined;\n  pointerEvents?: Property.PointerEvents | undefined;\n  shapeRendering?: Property.ShapeRendering | undefined;\n  stopColor?: Property.StopColor | undefined;\n  stopOpacity?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  strokeDasharray?: Property.StrokeDasharray<TLength> | undefined;\n  strokeDashoffset?: Property.StrokeDashoffset<TLength> | undefined;\n  strokeLinecap?: Property.StrokeLinecap | undefined;\n  strokeLinejoin?: Property.StrokeLinejoin | undefined;\n  strokeMiterlimit?: Property.StrokeMiterlimit | undefined;\n  strokeOpacity?: Property.StrokeOpacity | undefined;\n  strokeWidth?: Property.StrokeWidth<TLength> | undefined;\n  textAnchor?: Property.TextAnchor | undefined;\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  textRendering?: Property.TextRendering | undefined;\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  vectorEffect?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  whiteSpace?: Property.WhiteSpace | undefined;\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  writingMode?: Property.WritingMode | undefined;\n}\n\nexport interface Properties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardProperties<TLength, TTime>,\n    VendorProperties<TLength, TTime>,\n    ObsoleteProperties<TLength, TTime>,\n    SvgProperties<TLength, TTime> {}\n\nexport interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  \"accent-color\"?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  \"align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  \"align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  \"align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  \"align-tracks\"?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** | **115** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  \"animation-composition\"?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  \"animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  \"animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  \"animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  \"animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  \"animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  \"animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  \"animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-range-end`** CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-end\n   */\n  \"animation-range-end\"?: Property.AnimationRangeEnd<TLength> | undefined;\n  /**\n   * The **`animation-range-start`** CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-start\n   */\n  \"animation-range-start\"?: Property.AnimationRangeStart<TLength> | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  \"animation-timeline\"?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  \"animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  \"aspect-ratio\"?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  \"backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  \"backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  \"background-attachment\"?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  \"background-blend-mode\"?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  |  **5**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  \"background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  \"background-color\"?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  \"background-image\"?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  \"background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  \"background-position-x\"?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  \"background-position-y\"?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  \"background-repeat\"?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  \"background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  \"block-overflow\"?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  \"block-size\"?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  \"border-block-color\"?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  \"border-block-end-color\"?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  \"border-block-end-style\"?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  \"border-block-end-width\"?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  \"border-block-start-color\"?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  \"border-block-start-style\"?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  \"border-block-start-width\"?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  \"border-block-style\"?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  \"border-block-width\"?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  \"border-bottom-color\"?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  \"border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  \"border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  \"border-bottom-style\"?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  \"border-bottom-width\"?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  \"border-collapse\"?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  \"border-end-end-radius\"?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  \"border-end-start-radius\"?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  \"border-image-outset\"?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  \"border-image-repeat\"?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  \"border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  \"border-image-source\"?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  \"border-image-width\"?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  \"border-inline-color\"?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  \"border-inline-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  \"border-inline-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  \"border-inline-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  \"border-inline-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  \"border-inline-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  \"border-inline-start-width\"?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  \"border-inline-style\"?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  \"border-inline-width\"?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  \"border-left-color\"?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  \"border-left-style\"?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  \"border-left-width\"?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  \"border-right-color\"?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  \"border-right-style\"?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  \"border-right-width\"?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  \"border-spacing\"?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  \"border-start-end-radius\"?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  \"border-start-start-radius\"?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  \"border-top-color\"?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  \"border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  \"border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  \"border-top-style\"?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  \"border-top-width\"?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  \"box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  \"box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  \"box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  \"break-after\"?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  \"break-before\"?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  \"break-inside\"?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  \"caption-side\"?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  \"caret-color\"?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  \"caret-shape\"?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  \"clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  \"color-scheme\"?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  \"column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  \"column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  \"column-gap\"?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  \"column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  \"column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  \"column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  \"column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  \"column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  \"contain-intrinsic-block-size\"?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  \"contain-intrinsic-height\"?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  \"contain-intrinsic-inline-size\"?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  \"contain-intrinsic-width\"?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  \"container-name\"?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  \"container-type\"?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome |   Firefox   | Safari | Edge | IE  |\n   * | :----: | :---------: | :----: | :--: | :-: |\n   * | **85** | **preview** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  \"content-visibility\"?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  \"counter-increment\"?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  \"counter-reset\"?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **85** | **68**  | **17.2** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  \"counter-set\"?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  \"empty-cells\"?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  \"flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  \"flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  \"flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  \"flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  \"flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  \"font-family\"?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  \"font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  \"font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  \"font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  \"font-optical-sizing\"?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  \"font-palette\"?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  \"font-smooth\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  \"font-style\"?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps || position]`\n   *\n   * **Initial value**: `weight style small-caps position `\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  \"font-synthesis\"?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-synthesis-position`** CSS property lets you specify whether or not a browser may synthesize the subscript and superscript \"position\" typefaces when they are missing in a font family, while using `font-variant-position` to set the positions.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **118** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position\n   */\n  \"font-synthesis-position\"?: Property.FontSynthesisPosition | undefined;\n  /**\n   * The **`font-synthesis-small-caps`** CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps\n   */\n  \"font-synthesis-small-caps\"?: Property.FontSynthesisSmallCaps | undefined;\n  /**\n   * The **`font-synthesis-style`** CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style\n   */\n  \"font-synthesis-style\"?: Property.FontSynthesisStyle | undefined;\n  /**\n   * The **`font-synthesis-weight`** CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight\n   */\n  \"font-synthesis-weight\"?: Property.FontSynthesisWeight | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  \"font-variant\"?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **111** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  \"font-variant-alternates\"?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  \"font-variant-caps\"?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  \"font-variant-east-asian\"?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  \"font-variant-emoji\"?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  \"font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  \"font-variant-numeric\"?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **117** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  \"font-variant-position\"?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  \"font-variation-settings\"?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  \"font-weight\"?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** | **113** |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  \"forced-color-adjust\"?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  \"grid-auto-columns\"?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  \"grid-auto-flow\"?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  \"grid-auto-rows\"?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  \"grid-column-end\"?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  \"grid-column-start\"?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  \"grid-row-end\"?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  \"grid-row-start\"?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  \"grid-template-areas\"?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  \"grid-template-columns\"?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  \"grid-template-rows\"?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  \"hanging-punctuation\"?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :-----: | :-----: | :-------: | :--: | :-: |\n   * | **106** | **98**  |  **17**   | n/a  | No  |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  \"hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  \"hyphenate-limit-chars\"?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |      IE      |\n   * | :------: | :-----: | :-------: | :----: | :----------: |\n   * |  **55**  | **43**  |  **17**   | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ | 5.1 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  \"image-orientation\"?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  \"image-resolution\"?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  \"initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  \"inline-size\"?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"input-security\"?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  \"inset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  \"inset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  \"inset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  \"inset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  \"justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  \"justify-items\"?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  \"justify-self\"?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  \"justify-tracks\"?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  \"line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  \"line-height-step\"?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  \"list-style-image\"?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  \"list-style-position\"?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  \"list-style-type\"?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  \"margin-block-end\"?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  \"margin-block-start\"?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  \"margin-bottom\"?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  \"margin-inline-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  \"margin-inline-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  \"margin-left\"?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  \"margin-right\"?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  \"margin-top\"?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  \"margin-trim\"?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  \"mask-border-mode\"?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-outset)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  \"mask-border-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-repeat)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  \"mask-border-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-slice)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  \"mask-border-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-source)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  \"mask-border-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-width)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  \"mask-border-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  \"mask-clip\"?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  \"mask-composite\"?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 16-79 | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  \"mask-image\"?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  \"mask-mode\"?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  \"mask-origin\"?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  \"mask-position\"?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  \"mask-repeat\"?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   * | 4 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  \"mask-size\"?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  \"mask-type\"?: Property.MaskType | undefined;\n  /**\n   * This feature is not Baseline because it does not work in some of the most widely-used browsers.\n   *\n   * **Syntax**: `[ pack | next ] || [ definite-first | ordered ]`\n   *\n   * **Initial value**: `pack`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow\n   */\n  \"masonry-auto-flow\"?: Property.MasonryAutoFlow | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** | **117** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  \"math-depth\"?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  \"math-shift\"?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** | **117** | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  \"math-style\"?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  \"max-block-size\"?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  \"max-height\"?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  \"max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"max-lines\"?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  \"max-width\"?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  \"min-block-size\"?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  \"min-height\"?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  \"min-inline-size\"?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  \"min-width\"?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  \"mix-blend-mode\"?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"motion-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"motion-path\"?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"motion-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  \"object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  \"object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** | **72**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  \"offset-anchor\"?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"offset-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"offset-path\"?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `normal | auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  \"offset-position\"?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotate\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  \"outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  \"outline-offset\"?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  \"outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  \"outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  \"overflow-anchor\"?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  \"overflow-block\"?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"overflow-clip-box\"?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  \"overflow-clip-margin\"?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  \"overflow-inline\"?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"overflow-wrap\"?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  \"overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  \"overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The **`overlay`** CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal `<dialog>` element) is actually rendered in the top layer. This property is only relevant within a list of `transition-property` values, and only if `allow-discrete` is set as the `transition-behavior`.\n   *\n   * **Syntax**: `none | auto`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overlay\n   */\n  overlay?: Property.Overlay | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  \"overscroll-behavior-block\"?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  \"overscroll-behavior-inline\"?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  \"overscroll-behavior-x\"?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  \"overscroll-behavior-y\"?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  \"padding-block-end\"?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  \"padding-block-start\"?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  \"padding-bottom\"?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  \"padding-inline-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  \"padding-inline-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  \"padding-left\"?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  \"padding-right\"?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  \"padding-top\"?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari   | Edge | IE  |\n   * | :----: | :-----: | :-------: | :--: | :-: |\n   * | **85** | **110** | **≤13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  \"page-break-after\"?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  \"page-break-before\"?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  \"page-break-inside\"?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  \"perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  \"row-gap\"?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  \"ruby-align\"?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  \"ruby-merge\"?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  \"ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  \"scroll-behavior\"?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  \"scroll-margin-block-end\"?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  \"scroll-margin-block-start\"?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  \"scroll-margin-inline-end\"?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  \"scroll-margin-inline-start\"?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  \"scroll-padding-block-end\"?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  \"scroll-padding-block-start\"?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  \"scroll-padding-bottom\"?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  \"scroll-padding-inline-end\"?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  \"scroll-padding-inline-start\"?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  \"scroll-padding-left\"?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  \"scroll-padding-right\"?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  \"scroll-padding-top\"?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  \"scroll-snap-align\"?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-snap-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-snap-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-snap-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-snap-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  \"scroll-snap-stop\"?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  \"scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  \"scroll-timeline-axis\"?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  \"scroll-timeline-name\"?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  \"scrollbar-color\"?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  \"scrollbar-gutter\"?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  \"scrollbar-width\"?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  \"shape-image-threshold\"?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  \"shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  \"shape-outside\"?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  \"tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  \"table-layout\"?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  \"text-align\"?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  \"text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            |  Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :----: | :------------------------------------: |\n   * |           **48**           | **48**  |           **15.4**           | **79** | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  \"text-combine-upright\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  \"text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  \"text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  \"text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  \"text-decoration-skip-ink\"?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  \"text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-thickness\"?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  \"text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  \"text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  \"text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  \"text-indent\"?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge  |   IE   |\n   * | :----: | :-----: | :----: | :---: | :----: |\n   * |  n/a   | **55**  |   No   | 12-79 | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  \"text-justify\"?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  \"text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  \"text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  \"text-shadow\"?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  \"text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  \"text-transform\"?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  \"text-underline-offset\"?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  \"text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`text-wrap`** CSS property controls how text inside an element is wrapped. The different values provide:\n   *\n   * **Syntax**: `wrap | nowrap | balance | stable | pretty`\n   *\n   * **Initial value**: `wrap`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** | **121** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-wrap\n   */\n  \"text-wrap\"?: Property.TextWrap | undefined;\n  /**\n   * The **`timeline-scope`** CSS property modifies the scope of a named animation timeline.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/timeline-scope\n   */\n  \"timeline-scope\"?: Property.TimelineScope | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  \"touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  \"transform-box\"?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **36**  | **16**  |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ |         | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  \"transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **36**  | **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  \"transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-behavior`** CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.\n   *\n   * **Syntax**: `<transition-behavior-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-behavior\n   */\n  \"transition-behavior\"?: Property.TransitionBehavior | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  \"transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  \"transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  \"transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  \"transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  \"user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  \"vertical-align\"?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-timeline-axis`** CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a _named view progress timeline_ animation, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline-axis` is set on the subject. See CSS scroll-driven animations for more details.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis\n   */\n  \"view-timeline-axis\"?: Property.ViewTimelineAxis | undefined;\n  /**\n   * The **`view-timeline-inset`** CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a _named view progress timeline_ animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.\n   *\n   * **Syntax**: `[ [ auto | <length-percentage> ]{1,2} ]#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset\n   */\n  \"view-timeline-inset\"?: Property.ViewTimelineInset<TLength> | undefined;\n  /**\n   * The **`view-timeline-name`** CSS property is used to define the name of a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-name\n   */\n  \"view-timeline-name\"?: Property.ViewTimelineName | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  \"view-transition-name\"?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  /**\n   * The **`white-space-collapse`** CSS property controls how white space inside an element is collapsed.\n   *\n   * **Syntax**: `collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces`\n   *\n   * **Initial value**: `collapse`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space-collapse\n   */\n  \"white-space-collapse\"?: Property.WhiteSpaceCollapse | undefined;\n  /**\n   * **Syntax**: `none | discard-before || discard-after || discard-inner`\n   *\n   * **Initial value**: `none`\n   */\n  \"white-space-trim\"?: Property.WhiteSpaceTrim | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  \"will-change\"?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  \"word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge   | IE  |\n   * | :-----: | :-----: | :-------: | :-----: | :-: |\n   * | **≤80** | **≤72** | **≤13.1** | **≤80** | No  |\n   */\n  \"word-wrap\"?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  \"writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  \"z-index\"?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   n/a   | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-range`** CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.\n   *\n   * **Syntax**: `[ <'animation-range-start'> <'animation-range-end'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range\n   */\n  \"animation-range\"?: Property.AnimationRange<TLength> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  \"background-position\"?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  \"border-block\"?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  \"border-block-end\"?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  \"border-block-start\"?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  \"border-bottom\"?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  \"border-color\"?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  \"border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  \"border-inline\"?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  \"border-inline-end\"?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  \"border-inline-start\"?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  \"border-left\"?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  \"border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  \"border-right\"?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  \"border-style\"?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  \"border-top\"?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  \"border-width\"?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  \"column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ auto? [ none | <length> ] ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  \"contain-intrinsic-size\"?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  \"flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  \"grid-area\"?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  \"grid-column\"?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  \"grid-row\"?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  \"grid-template\"?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  \"inset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  \"inset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"line-clamp\"?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  \"list-style\"?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  \"margin-block\"?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  \"margin-inline\"?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox |  Safari   | Edge  | IE  |\n   * | :----: | :-----: | :-------: | :---: | :-: |\n   * | **1**  | **53**  | **15.4**  | 12-79 | No  |\n   * |        |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |             Safari             | Edge | IE  |\n   * | :------------------------------: | :-----: | :----------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    |            **17.2**            | n/a  | No  |\n   * |                                  |         | 3.1 _(-webkit-mask-box-image)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  \"mask-border\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **94** | **88**  | **16.4** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  \"overscroll-behavior\"?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  \"padding-block\"?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  \"padding-inline\"?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  \"place-content\"?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  \"place-items\"?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  \"place-self\"?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  \"scroll-margin-block\"?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  \"scroll-margin-inline\"?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  \"scroll-padding\"?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  \"scroll-padding-block\"?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  \"scroll-padding-inline\"?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-snap-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  \"scroll-timeline\"?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  \"text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`view-timeline`** CSS shorthand property is used to define a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `[ <'view-timeline-name'> <'view-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline\n   */\n  \"view-timeline\"?: Property.ViewTimeline | undefined;\n}\n\nexport interface StandardPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphen<TLength, TTime>,\n    StandardShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-moz-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-moz-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-moz-appearance\"?: Property.MozAppearance | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-binding\"?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-bottom-colors\"?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-border-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-left-colors\"?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-right-colors\"?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-top-colors\"?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-moz-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-context-properties\"?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-moz-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-image-region\"?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  \"-moz-orient\"?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-osx-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomleft\"?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomright\"?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topleft\"?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topright\"?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  \"-moz-stack-sizing\"?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-moz-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-text-blink\"?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-moz-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-user-focus\"?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-moz-user-modify\"?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  \"-moz-window-dragging\"?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-moz-window-shadow\"?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  \"-ms-accelerator\"?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  \"-ms-block-progression\"?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-chaining\"?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  \"-ms-content-zoom-limit-max\"?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-ms-content-zoom-limit-min\"?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  \"-ms-content-zoom-snap-points\"?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-snap-type\"?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  \"-ms-content-zooming\"?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  \"-ms-filter\"?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-ms-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-flex-positive\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-from\"?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-into\"?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-columns\"?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-rows\"?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-high-contrast-adjust\"?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-hyphenate-limit-chars\"?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  \"-ms-hyphenate-limit-lines\"?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-hyphenate-limit-zone\"?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-ms-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-ime-align\"?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-order\"?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-overflow-style\"?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  \"-ms-scroll-chaining\"?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-x-max\"?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-x-min\"?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-y-max\"?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-y-min\"?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  \"-ms-scroll-rails\"?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-x\"?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-y\"?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-snap-type\"?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-translation\"?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-3dlight-color\"?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  \"-ms-scrollbar-arrow-color\"?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-base-color\"?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-darkshadow-color\"?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  \"-ms-scrollbar-face-color\"?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  \"-ms-scrollbar-highlight-color\"?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-shadow-color\"?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  \"-ms-scrollbar-track-color\"?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-autospace\"?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-combine-horizontal\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-ms-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  \"-ms-touch-select\"?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-ms-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-ms-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-ms-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  \"-ms-user-select\"?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-ms-word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-wrap-flow\"?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-wrap-margin\"?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  \"-ms-wrap-through\"?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-ms-writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-webkit-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-webkit-appearance\"?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-webkit-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  \"-webkit-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"-webkit-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-border-before-color\"?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-border-before-style\"?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-border-before-width\"?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-webkit-border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  \"-webkit-box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-reflect\"?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-webkit-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-webkit-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-filter\"?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-webkit-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  \"-webkit-flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-webkit-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-line-clamp\"?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  \"-webkit-mask-attachment\"?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  \"-webkit-mask-box-image-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-box-image-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-mask-box-image-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  \"-webkit-mask-clip\"?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  \"-webkit-mask-composite\"?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-image\"?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  \"-webkit-mask-origin\"?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  \"-webkit-mask-position\"?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-x\"?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-y\"?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat\"?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-x\"?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-y\"?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-mask-size\"?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-order\"?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-overflow-scrolling\"?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-webkit-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  \"-webkit-print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  \"-webkit-ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  \"-webkit-tap-highlight-color\"?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-combine\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  \"-webkit-text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  \"-webkit-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  \"-webkit-text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-fill-color\"?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  \"-webkit-text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-webkit-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-stroke-color\"?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-text-stroke-width\"?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-webkit-touch-callout\"?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-webkit-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-webkit-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-webkit-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-webkit-user-modify\"?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-webkit-writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-moz-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-moz-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-moz-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-moz-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   */\n  \"-moz-outline-radius\"?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  \"-ms-content-zoom-limit\"?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  \"-ms-content-zoom-snap\"?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-ms-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  \"-ms-scroll-limit\"?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  \"-ms-scroll-snap-x\"?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  \"-ms-scroll-snap-y\"?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-ms-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-webkit-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  \"-webkit-border-before\"?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-webkit-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  \"-webkit-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-webkit-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-webkit-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-webkit-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  \"-webkit-flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  \"-webkit-mask\"?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  \"-webkit-mask-box-image\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  \"-webkit-text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  \"-webkit-text-stroke\"?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-webkit-transition\"?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphen<TLength, TTime>,\n    VendorShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-column-gap\"?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  \"grid-gap\"?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-row-gap\"?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-coordinate\"?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-destination\"?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-x\"?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-y\"?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-x\"?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-y\"?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-khtml-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * @deprecated\n   */\n  \"-moz-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  \"-moz-background-inline-policy\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-moz-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomleft\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomright\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topleft\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topright\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-moz-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-moz-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-moz-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-moz-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  \"-moz-float-edge\"?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-force-broken-image-icon\"?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  \"-moz-outline\"?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  \"-moz-outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  \"-moz-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  \"-moz-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * @deprecated\n   */\n  \"-moz-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-moz-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-moz-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-user-input\"?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-ms-ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  \"-o-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-o-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-o-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  \"-o-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-o-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  \"-o-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  \"-o-object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  \"-o-object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  \"-o-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  \"-o-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  \"-o-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-o-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-o-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-webkit-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-pack\"?: Property.BoxPack | undefined;\n}\n\nexport interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  \"alignment-baseline\"?: Property.AlignmentBaseline | undefined;\n  \"baseline-shift\"?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  \"clip-path\"?: Property.ClipPath | undefined;\n  \"clip-rule\"?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  \"color-interpolation\"?: Property.ColorInterpolation | undefined;\n  \"color-rendering\"?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  \"dominant-baseline\"?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  \"fill-opacity\"?: Property.FillOpacity | undefined;\n  \"fill-rule\"?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  \"flood-color\"?: Property.FloodColor | undefined;\n  \"flood-opacity\"?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  \"font-family\"?: Property.FontFamily | undefined;\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  \"font-style\"?: Property.FontStyle | undefined;\n  \"font-variant\"?: Property.FontVariant | undefined;\n  \"font-weight\"?: Property.FontWeight | undefined;\n  \"glyph-orientation-vertical\"?: Property.GlyphOrientationVertical | undefined;\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  \"lighting-color\"?: Property.LightingColor | undefined;\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  \"marker-end\"?: Property.MarkerEnd | undefined;\n  \"marker-mid\"?: Property.MarkerMid | undefined;\n  \"marker-start\"?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  \"shape-rendering\"?: Property.ShapeRendering | undefined;\n  \"stop-color\"?: Property.StopColor | undefined;\n  \"stop-opacity\"?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  \"stroke-dasharray\"?: Property.StrokeDasharray<TLength> | undefined;\n  \"stroke-dashoffset\"?: Property.StrokeDashoffset<TLength> | undefined;\n  \"stroke-linecap\"?: Property.StrokeLinecap | undefined;\n  \"stroke-linejoin\"?: Property.StrokeLinejoin | undefined;\n  \"stroke-miterlimit\"?: Property.StrokeMiterlimit | undefined;\n  \"stroke-opacity\"?: Property.StrokeOpacity | undefined;\n  \"stroke-width\"?: Property.StrokeWidth<TLength> | undefined;\n  \"text-anchor\"?: Property.TextAnchor | undefined;\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  \"vector-effect\"?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  \"writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface PropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphen<TLength, TTime>,\n    VendorPropertiesHyphen<TLength, TTime>,\n    ObsoletePropertiesHyphen<TLength, TTime>,\n    SvgPropertiesHyphen<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandProperties<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandProperties<TLength, TTime>>;\n\nexport interface StandardPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesFallback<TLength, TTime>,\n    StandardShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandProperties<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandProperties<TLength, TTime>>;\n\nexport interface VendorPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesFallback<TLength, TTime>,\n    VendorShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoleteProperties<TLength, TTime>>;\n\nexport type SvgPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgProperties<TLength, TTime>>;\n\nexport interface PropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesFallback<TLength, TTime>,\n    VendorPropertiesFallback<TLength, TTime>,\n    ObsoletePropertiesFallback<TLength, TTime>,\n    SvgPropertiesFallback<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface StandardPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphenFallback<TLength, TTime>,\n    StandardShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface VendorPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphenFallback<TLength, TTime>,\n    VendorShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;\n\nexport type SvgPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;\n\nexport interface PropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphenFallback<TLength, TTime>,\n    VendorPropertiesHyphenFallback<TLength, TTime>,\n    ObsoletePropertiesHyphenFallback<TLength, TTime>,\n    SvgPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type AtRules =\n  | \"@charset\"\n  | \"@counter-style\"\n  | \"@document\"\n  | \"@font-face\"\n  | \"@font-feature-values\"\n  | \"@font-palette-values\"\n  | \"@import\"\n  | \"@keyframes\"\n  | \"@layer\"\n  | \"@media\"\n  | \"@namespace\"\n  | \"@page\"\n  | \"@property\"\n  | \"@scope\"\n  | \"@scroll-timeline\"\n  | \"@starting-style\"\n  | \"@supports\"\n  | \"@viewport\";\n\nexport type AdvancedPseudos =\n  | \":-moz-any()\"\n  | \":-moz-dir\"\n  | \":-webkit-any()\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::part\"\n  | \"::slotted\"\n  | \"::view-transition-group\"\n  | \"::view-transition-image-pair\"\n  | \"::view-transition-new\"\n  | \"::view-transition-old\"\n  | \":dir\"\n  | \":has\"\n  | \":host\"\n  | \":host-context\"\n  | \":is\"\n  | \":lang\"\n  | \":matches()\"\n  | \":not\"\n  | \":nth-child\"\n  | \":nth-last-child\"\n  | \":nth-last-of-type\"\n  | \":nth-of-type\"\n  | \":where\";\n\nexport type SimplePseudos =\n  | \":-khtml-any-link\"\n  | \":-moz-any-link\"\n  | \":-moz-focusring\"\n  | \":-moz-full-screen\"\n  | \":-moz-placeholder\"\n  | \":-moz-read-only\"\n  | \":-moz-read-write\"\n  | \":-moz-ui-invalid\"\n  | \":-moz-ui-valid\"\n  | \":-ms-fullscreen\"\n  | \":-ms-input-placeholder\"\n  | \":-webkit-any-link\"\n  | \":-webkit-full-screen\"\n  | \"::-moz-placeholder\"\n  | \"::-moz-progress-bar\"\n  | \"::-moz-range-progress\"\n  | \"::-moz-range-thumb\"\n  | \"::-moz-range-track\"\n  | \"::-moz-selection\"\n  | \"::-ms-backdrop\"\n  | \"::-ms-browse\"\n  | \"::-ms-check\"\n  | \"::-ms-clear\"\n  | \"::-ms-expand\"\n  | \"::-ms-fill\"\n  | \"::-ms-fill-lower\"\n  | \"::-ms-fill-upper\"\n  | \"::-ms-input-placeholder\"\n  | \"::-ms-reveal\"\n  | \"::-ms-thumb\"\n  | \"::-ms-ticks-after\"\n  | \"::-ms-ticks-before\"\n  | \"::-ms-tooltip\"\n  | \"::-ms-track\"\n  | \"::-ms-value\"\n  | \"::-webkit-backdrop\"\n  | \"::-webkit-input-placeholder\"\n  | \"::-webkit-progress-bar\"\n  | \"::-webkit-progress-inner-value\"\n  | \"::-webkit-progress-value\"\n  | \"::-webkit-slider-runnable-track\"\n  | \"::-webkit-slider-thumb\"\n  | \"::after\"\n  | \"::backdrop\"\n  | \"::before\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::first-letter\"\n  | \"::first-line\"\n  | \"::grammar-error\"\n  | \"::marker\"\n  | \"::placeholder\"\n  | \"::selection\"\n  | \"::spelling-error\"\n  | \"::target-text\"\n  | \"::view-transition\"\n  | \":active\"\n  | \":after\"\n  | \":any-link\"\n  | \":before\"\n  | \":blank\"\n  | \":checked\"\n  | \":current\"\n  | \":default\"\n  | \":defined\"\n  | \":disabled\"\n  | \":empty\"\n  | \":enabled\"\n  | \":first\"\n  | \":first-child\"\n  | \":first-letter\"\n  | \":first-line\"\n  | \":first-of-type\"\n  | \":focus\"\n  | \":focus-visible\"\n  | \":focus-within\"\n  | \":fullscreen\"\n  | \":future\"\n  | \":hover\"\n  | \":in-range\"\n  | \":indeterminate\"\n  | \":invalid\"\n  | \":last-child\"\n  | \":last-of-type\"\n  | \":left\"\n  | \":link\"\n  | \":local-link\"\n  | \":nth-col\"\n  | \":nth-last-col\"\n  | \":only-child\"\n  | \":only-of-type\"\n  | \":optional\"\n  | \":out-of-range\"\n  | \":past\"\n  | \":paused\"\n  | \":picture-in-picture\"\n  | \":placeholder-shown\"\n  | \":playing\"\n  | \":read-only\"\n  | \":read-write\"\n  | \":required\"\n  | \":right\"\n  | \":root\"\n  | \":scope\"\n  | \":target\"\n  | \":target-within\"\n  | \":user-invalid\"\n  | \":user-valid\"\n  | \":valid\"\n  | \":visited\";\n\nexport type Pseudos = AdvancedPseudos | SimplePseudos;\n\nexport type HtmlAttributes =\n  | \"[abbr]\"\n  | \"[accept-charset]\"\n  | \"[accept]\"\n  | \"[accesskey]\"\n  | \"[action]\"\n  | \"[align]\"\n  | \"[alink]\"\n  | \"[allow]\"\n  | \"[allowfullscreen]\"\n  | \"[allowpaymentrequest]\"\n  | \"[alt]\"\n  | \"[archive]\"\n  | \"[async]\"\n  | \"[attributionsrc]\"\n  | \"[autobuffer]\"\n  | \"[autocapitalize]\"\n  | \"[autocomplete]\"\n  | \"[autofocus]\"\n  | \"[autoplay]\"\n  | \"[axis]\"\n  | \"[background]\"\n  | \"[behavior]\"\n  | \"[bgcolor]\"\n  | \"[blocking]\"\n  | \"[border]\"\n  | \"[bottommargin]\"\n  | \"[browsingtopics]\"\n  | \"[capture]\"\n  | \"[cellpadding]\"\n  | \"[cellspacing]\"\n  | \"[char]\"\n  | \"[charoff]\"\n  | \"[charset]\"\n  | \"[checked]\"\n  | \"[cite]\"\n  | \"[class]\"\n  | \"[classid]\"\n  | \"[clear]\"\n  | \"[codebase]\"\n  | \"[codetype]\"\n  | \"[color]\"\n  | \"[cols]\"\n  | \"[colspan]\"\n  | \"[compact]\"\n  | \"[content]\"\n  | \"[contenteditable]\"\n  | \"[contextmenu]\"\n  | \"[controls]\"\n  | \"[coords]\"\n  | \"[credentialless]\"\n  | \"[crossorigin]\"\n  | \"[data]\"\n  | \"[datetime]\"\n  | \"[declare]\"\n  | \"[decoding]\"\n  | \"[default]\"\n  | \"[defer]\"\n  | \"[dir]\"\n  | \"[direction]\"\n  | \"[dirname]\"\n  | \"[disabled]\"\n  | \"[download]\"\n  | \"[draggable]\"\n  | \"[enctype]\"\n  | \"[enterkeyhint]\"\n  | \"[exportparts]\"\n  | \"[face]\"\n  | \"[fetchpriority]\"\n  | \"[for]\"\n  | \"[form]\"\n  | \"[formaction]\"\n  | \"[formenctype]\"\n  | \"[formmethod]\"\n  | \"[formnovalidate]\"\n  | \"[formtarget]\"\n  | \"[frame]\"\n  | \"[frameborder]\"\n  | \"[headers]\"\n  | \"[height]\"\n  | \"[hidden]\"\n  | \"[high]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[hspace]\"\n  | \"[http-equiv]\"\n  | \"[id]\"\n  | \"[imagesizes]\"\n  | \"[imagesrcset]\"\n  | \"[inert]\"\n  | \"[inputmode]\"\n  | \"[integrity]\"\n  | \"[is]\"\n  | \"[ismap]\"\n  | \"[itemid]\"\n  | \"[itemprop]\"\n  | \"[itemref]\"\n  | \"[itemscope]\"\n  | \"[itemtype]\"\n  | \"[kind]\"\n  | \"[label]\"\n  | \"[lang]\"\n  | \"[language]\"\n  | \"[leftmargin]\"\n  | \"[link]\"\n  | \"[list]\"\n  | \"[loading]\"\n  | \"[longdesc]\"\n  | \"[loop]\"\n  | \"[low]\"\n  | \"[manifest]\"\n  | \"[marginheight]\"\n  | \"[marginwidth]\"\n  | \"[max]\"\n  | \"[maxlength]\"\n  | \"[media]\"\n  | \"[method]\"\n  | \"[methods]\"\n  | \"[min]\"\n  | \"[minlength]\"\n  | \"[moz-opaque]\"\n  | \"[mozactionhint]\"\n  | \"[mozallowfullscreen]\"\n  | \"[msallowfullscreen]\"\n  | \"[multiple]\"\n  | \"[muted]\"\n  | \"[name]\"\n  | \"[nohref]\"\n  | \"[nomodule]\"\n  | \"[nonce]\"\n  | \"[noresize]\"\n  | \"[noshade]\"\n  | \"[novalidate]\"\n  | \"[nowrap]\"\n  | \"[onerror]\"\n  | \"[open]\"\n  | \"[optimum]\"\n  | \"[part]\"\n  | \"[pattern]\"\n  | \"[ping]\"\n  | \"[placeholder]\"\n  | \"[popover]\"\n  | \"[popovertarget]\"\n  | \"[popovertargetaction]\"\n  | \"[poster]\"\n  | \"[preload]\"\n  | \"[profile]\"\n  | \"[readonly]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[required]\"\n  | \"[rev]\"\n  | \"[reversed]\"\n  | \"[rightmargin]\"\n  | \"[rows]\"\n  | \"[rowspan]\"\n  | \"[rules]\"\n  | \"[sandbox]\"\n  | \"[scope]\"\n  | \"[scrollamount]\"\n  | \"[scrolldelay]\"\n  | \"[scrolling]\"\n  | \"[selected]\"\n  | \"[shadowroot]\"\n  | \"[shadowrootmode]\"\n  | \"[shape]\"\n  | \"[size]\"\n  | \"[sizes]\"\n  | \"[slot]\"\n  | \"[span]\"\n  | \"[spellcheck]\"\n  | \"[src]\"\n  | \"[srcdoc]\"\n  | \"[srclang]\"\n  | \"[srcset]\"\n  | \"[standby]\"\n  | \"[start]\"\n  | \"[step]\"\n  | \"[style]\"\n  | \"[summary]\"\n  | \"[tabindex]\"\n  | \"[target]\"\n  | \"[text]\"\n  | \"[title]\"\n  | \"[topmargin]\"\n  | \"[translate]\"\n  | \"[truespeed]\"\n  | \"[type]\"\n  | \"[usemap]\"\n  | \"[valign]\"\n  | \"[value]\"\n  | \"[valuetype]\"\n  | \"[version]\"\n  | \"[virtualkeyboardpolicy]\"\n  | \"[vlink]\"\n  | \"[vspace]\"\n  | \"[webkitallowfullscreen]\"\n  | \"[width]\"\n  | \"[wrap]\"\n  | \"[x-moz-errormessage]\"\n  | \"[xmlns]\";\n\nexport type SvgAttributes =\n  | \"[accent-height]\"\n  | \"[alignment-baseline]\"\n  | \"[allowReorder]\"\n  | \"[alphabetic]\"\n  | \"[animation]\"\n  | \"[arabic-form]\"\n  | \"[ascent]\"\n  | \"[async]\"\n  | \"[attributeName]\"\n  | \"[attributeType]\"\n  | \"[azimuth]\"\n  | \"[baseFrequency]\"\n  | \"[baseProfile]\"\n  | \"[baseline-shift]\"\n  | \"[bbox]\"\n  | \"[bias]\"\n  | \"[by]\"\n  | \"[calcMode]\"\n  | \"[cap-height]\"\n  | \"[class]\"\n  | \"[clip-path]\"\n  | \"[clip-rule]\"\n  | \"[clipPathUnits]\"\n  | \"[clip]\"\n  | \"[color-interpolation-filters]\"\n  | \"[color-interpolation]\"\n  | \"[color-profile]\"\n  | \"[color]\"\n  | \"[contentScriptType]\"\n  | \"[contentStyleType]\"\n  | \"[crossorigin]\"\n  | \"[cursor]\"\n  | \"[cx]\"\n  | \"[cy]\"\n  | \"[d]\"\n  | \"[decoding]\"\n  | \"[defer]\"\n  | \"[descent]\"\n  | \"[diffuseConstant]\"\n  | \"[direction]\"\n  | \"[display]\"\n  | \"[divisor]\"\n  | \"[document]\"\n  | \"[dominant-baseline]\"\n  | \"[download]\"\n  | \"[dur]\"\n  | \"[dx]\"\n  | \"[dy]\"\n  | \"[edgeMode]\"\n  | \"[elevation]\"\n  | \"[enable-background]\"\n  | \"[fill-opacity]\"\n  | \"[fill-rule]\"\n  | \"[fill]\"\n  | \"[filterRes]\"\n  | \"[filterUnits]\"\n  | \"[filter]\"\n  | \"[flood-color]\"\n  | \"[flood-opacity]\"\n  | \"[font-family]\"\n  | \"[font-size-adjust]\"\n  | \"[font-size]\"\n  | \"[font-stretch]\"\n  | \"[font-style]\"\n  | \"[font-variant]\"\n  | \"[font-weight]\"\n  | \"[format]\"\n  | \"[fr]\"\n  | \"[from]\"\n  | \"[fx]\"\n  | \"[fy]\"\n  | \"[g1]\"\n  | \"[g2]\"\n  | \"[global]\"\n  | \"[glyph-name]\"\n  | \"[glyph-orientation-horizontal]\"\n  | \"[glyph-orientation-vertical]\"\n  | \"[glyphRef]\"\n  | \"[gradientTransform]\"\n  | \"[gradientUnits]\"\n  | \"[graphical]\"\n  | \"[hanging]\"\n  | \"[height]\"\n  | \"[horiz-adv-x]\"\n  | \"[horiz-origin-x]\"\n  | \"[horiz-origin-y]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[id]\"\n  | \"[ideographic]\"\n  | \"[image-rendering]\"\n  | \"[in2]\"\n  | \"[in]\"\n  | \"[k1]\"\n  | \"[k2]\"\n  | \"[k3]\"\n  | \"[k4]\"\n  | \"[k]\"\n  | \"[kernelMatrix]\"\n  | \"[kernelUnitLength]\"\n  | \"[kerning]\"\n  | \"[keyPoints]\"\n  | \"[lang]\"\n  | \"[lengthAdjust]\"\n  | \"[letter-spacing]\"\n  | \"[lighting-color]\"\n  | \"[limitingConeAngle]\"\n  | \"[marker-end]\"\n  | \"[marker-mid]\"\n  | \"[marker-start]\"\n  | \"[markerHeight]\"\n  | \"[markerUnits]\"\n  | \"[markerWidth]\"\n  | \"[maskContentUnits]\"\n  | \"[maskUnits]\"\n  | \"[mask]\"\n  | \"[mathematical]\"\n  | \"[media]\"\n  | \"[mode]\"\n  | \"[name]\"\n  | \"[numOctaves]\"\n  | \"[offset]\"\n  | \"[opacity]\"\n  | \"[operator]\"\n  | \"[order]\"\n  | \"[orient]\"\n  | \"[orientation]\"\n  | \"[origin]\"\n  | \"[overflow]\"\n  | \"[overline-position]\"\n  | \"[overline-thickness]\"\n  | \"[paint-order]\"\n  | \"[panose-1]\"\n  | \"[path]\"\n  | \"[patternContentUnits]\"\n  | \"[patternTransform]\"\n  | \"[patternUnits]\"\n  | \"[ping]\"\n  | \"[pointer-events]\"\n  | \"[pointsAtX]\"\n  | \"[pointsAtY]\"\n  | \"[pointsAtZ]\"\n  | \"[points]\"\n  | \"[preserveAlpha]\"\n  | \"[preserveAspectRatio]\"\n  | \"[primitiveUnits]\"\n  | \"[r]\"\n  | \"[radius]\"\n  | \"[refX]\"\n  | \"[refY]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[repeatCount]\"\n  | \"[requiredExtensions]\"\n  | \"[requiredFeatures]\"\n  | \"[rotate]\"\n  | \"[rx]\"\n  | \"[ry]\"\n  | \"[scale]\"\n  | \"[seed]\"\n  | \"[shape-rendering]\"\n  | \"[side]\"\n  | \"[slope]\"\n  | \"[solid-color]\"\n  | \"[solid-opacity]\"\n  | \"[spacing]\"\n  | \"[specularConstant]\"\n  | \"[specularExponent]\"\n  | \"[spreadMethod]\"\n  | \"[startOffset]\"\n  | \"[stdDeviation]\"\n  | \"[stemh]\"\n  | \"[stemv]\"\n  | \"[stitchTiles]\"\n  | \"[stop-color]\"\n  | \"[stop-opacity]\"\n  | \"[strikethrough-position]\"\n  | \"[strikethrough-thickness]\"\n  | \"[string]\"\n  | \"[stroke-dasharray]\"\n  | \"[stroke-dashoffset]\"\n  | \"[stroke-linecap]\"\n  | \"[stroke-linejoin]\"\n  | \"[stroke-miterlimit]\"\n  | \"[stroke-opacity]\"\n  | \"[stroke-width]\"\n  | \"[stroke]\"\n  | \"[style]\"\n  | \"[surfaceScale]\"\n  | \"[systemLanguage]\"\n  | \"[tabindex]\"\n  | \"[targetX]\"\n  | \"[targetY]\"\n  | \"[target]\"\n  | \"[text-anchor]\"\n  | \"[text-decoration]\"\n  | \"[text-overflow]\"\n  | \"[text-rendering]\"\n  | \"[textLength]\"\n  | \"[title]\"\n  | \"[to]\"\n  | \"[transform-origin]\"\n  | \"[transform]\"\n  | \"[type]\"\n  | \"[u1]\"\n  | \"[u2]\"\n  | \"[underline-position]\"\n  | \"[underline-thickness]\"\n  | \"[unicode-bidi]\"\n  | \"[unicode-range]\"\n  | \"[unicode]\"\n  | \"[units-per-em]\"\n  | \"[v-alphabetic]\"\n  | \"[v-hanging]\"\n  | \"[v-ideographic]\"\n  | \"[v-mathematical]\"\n  | \"[values]\"\n  | \"[vector-effect]\"\n  | \"[version]\"\n  | \"[vert-adv-y]\"\n  | \"[vert-origin-x]\"\n  | \"[vert-origin-y]\"\n  | \"[viewBox]\"\n  | \"[viewTarget]\"\n  | \"[visibility]\"\n  | \"[white-space]\"\n  | \"[width]\"\n  | \"[widths]\"\n  | \"[word-spacing]\"\n  | \"[writing-mode]\"\n  | \"[x-height]\"\n  | \"[x1]\"\n  | \"[x2]\"\n  | \"[xChannelSelector]\"\n  | \"[x]\"\n  | \"[y1]\"\n  | \"[y2]\"\n  | \"[yChannelSelector]\"\n  | \"[y]\"\n  | \"[z]\"\n  | \"[zoomAndPan]\";\n\nexport type Globals = \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\";\n\nexport namespace Property {\n  export type AccentColor = Globals | DataType.Color | \"auto\";\n\n  export type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type AlignItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type All = Globals;\n\n  export type Animation<TTime = string & {}> = Globals | DataType.SingleAnimation<TTime> | (string & {});\n\n  export type AnimationComposition = Globals | DataType.SingleAnimationComposition | (string & {});\n\n  export type AnimationDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationDirection = Globals | DataType.SingleAnimationDirection | (string & {});\n\n  export type AnimationDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (string & {});\n\n  export type AnimationIterationCount = Globals | \"infinite\" | (string & {}) | (number & {});\n\n  export type AnimationName = Globals | \"none\" | (string & {});\n\n  export type AnimationPlayState = Globals | \"paused\" | \"running\" | (string & {});\n\n  export type AnimationRange<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationRangeEnd<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationRangeStart<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationTimeline = Globals | DataType.SingleAnimationTimeline | (string & {});\n\n  export type AnimationTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Appearance = Globals | DataType.CompatAuto | \"auto\" | \"menulist-button\" | \"none\" | \"textfield\";\n\n  export type AspectRatio = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Azimuth =\n    | Globals\n    | \"behind\"\n    | \"center\"\n    | \"center-left\"\n    | \"center-right\"\n    | \"far-left\"\n    | \"far-right\"\n    | \"left\"\n    | \"left-side\"\n    | \"leftwards\"\n    | \"right\"\n    | \"right-side\"\n    | \"rightwards\"\n    | (string & {});\n\n  export type BackdropFilter = Globals | \"none\" | (string & {});\n\n  export type BackfaceVisibility = Globals | \"hidden\" | \"visible\";\n\n  export type Background<TLength = (string & {}) | 0> = Globals | DataType.FinalBgLayer<TLength> | (string & {});\n\n  export type BackgroundAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type BackgroundBlendMode = Globals | DataType.BlendMode | (string & {});\n\n  export type BackgroundClip = Globals | DataType.Box | (string & {});\n\n  export type BackgroundColor = Globals | DataType.Color;\n\n  export type BackgroundImage = Globals | \"none\" | (string & {});\n\n  export type BackgroundOrigin = Globals | DataType.Box | (string & {});\n\n  export type BackgroundPosition<TLength = (string & {}) | 0> = Globals | DataType.BgPosition<TLength> | (string & {});\n\n  export type BackgroundPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | \"x-end\" | \"x-start\" | (string & {});\n\n  export type BackgroundPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | \"y-end\" | \"y-start\" | (string & {});\n\n  export type BackgroundRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type BackgroundSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type BlockOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type BlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type Border<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlock<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockColor = Globals | DataType.Color | (string & {});\n\n  export type BorderBlockEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockEndColor = Globals | DataType.Color;\n\n  export type BorderBlockEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockStartColor = Globals | DataType.Color;\n\n  export type BorderBlockStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBottom<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBottomColor = Globals | DataType.Color;\n\n  export type BorderBottomLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomStyle = Globals | DataType.LineStyle;\n\n  export type BorderBottomWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderCollapse = Globals | \"collapse\" | \"separate\";\n\n  export type BorderColor = Globals | DataType.Color | (string & {});\n\n  export type BorderEndEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderEndStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderImage = Globals | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type BorderImageOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type BorderImageRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type BorderImageSlice = Globals | (string & {}) | (number & {});\n\n  export type BorderImageSource = Globals | \"none\" | (string & {});\n\n  export type BorderImageWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type BorderInline<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineColor = Globals | DataType.Color | (string & {});\n\n  export type BorderInlineEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineEndColor = Globals | DataType.Color;\n\n  export type BorderInlineEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineStartColor = Globals | DataType.Color;\n\n  export type BorderInlineStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderLeft<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderLeftColor = Globals | DataType.Color;\n\n  export type BorderLeftStyle = Globals | DataType.LineStyle;\n\n  export type BorderLeftWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderRight<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderRightColor = Globals | DataType.Color;\n\n  export type BorderRightStyle = Globals | DataType.LineStyle;\n\n  export type BorderRightWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderSpacing<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type BorderTop<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderTopColor = Globals | DataType.Color;\n\n  export type BorderTopLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopStyle = Globals | DataType.LineStyle;\n\n  export type BorderTopWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type Bottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type BoxAlign = Globals | \"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\";\n\n  export type BoxDecorationBreak = Globals | \"clone\" | \"slice\";\n\n  export type BoxDirection = Globals | \"inherit\" | \"normal\" | \"reverse\";\n\n  export type BoxFlex = Globals | (number & {}) | (string & {});\n\n  export type BoxFlexGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxLines = Globals | \"multiple\" | \"single\";\n\n  export type BoxOrdinalGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxOrient = Globals | \"block-axis\" | \"horizontal\" | \"inherit\" | \"inline-axis\" | \"vertical\";\n\n  export type BoxPack = Globals | \"center\" | \"end\" | \"justify\" | \"start\";\n\n  export type BoxShadow = Globals | \"none\" | (string & {});\n\n  export type BoxSizing = Globals | \"border-box\" | \"content-box\";\n\n  export type BreakAfter =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakBefore =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakInside = Globals | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\";\n\n  export type CaptionSide = Globals | \"block-end\" | \"block-start\" | \"bottom\" | \"inline-end\" | \"inline-start\" | \"top\";\n\n  export type Caret = Globals | DataType.Color | \"auto\" | \"bar\" | \"block\" | \"underscore\" | (string & {});\n\n  export type CaretColor = Globals | DataType.Color | \"auto\";\n\n  export type CaretShape = Globals | \"auto\" | \"bar\" | \"block\" | \"underscore\";\n\n  export type Clear = Globals | \"both\" | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Clip = Globals | \"auto\" | (string & {});\n\n  export type ClipPath = Globals | DataType.GeometryBox | \"none\" | (string & {});\n\n  export type Color = Globals | DataType.Color;\n\n  export type PrintColorAdjust = Globals | \"economy\" | \"exact\";\n\n  export type ColorScheme = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type ColumnCount = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type ColumnFill = Globals | \"auto\" | \"balance\" | \"balance-all\";\n\n  export type ColumnGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type ColumnRule<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type ColumnRuleColor = Globals | DataType.Color;\n\n  export type ColumnRuleStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type ColumnRuleWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type ColumnSpan = Globals | \"all\" | \"none\";\n\n  export type ColumnWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type Columns<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type Contain = Globals | \"content\" | \"inline-size\" | \"layout\" | \"none\" | \"paint\" | \"size\" | \"strict\" | \"style\" | (string & {});\n\n  export type ContainIntrinsicBlockSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicHeight<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicInlineSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicWidth<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type Container = Globals | \"none\" | (string & {});\n\n  export type ContainerName = Globals | \"none\" | (string & {});\n\n  export type ContainerType = Globals | \"inline-size\" | \"normal\" | \"size\";\n\n  export type Content = Globals | DataType.ContentList | \"none\" | \"normal\" | (string & {});\n\n  export type ContentVisibility = Globals | \"auto\" | \"hidden\" | \"visible\";\n\n  export type CounterIncrement = Globals | \"none\" | (string & {});\n\n  export type CounterReset = Globals | \"none\" | (string & {});\n\n  export type CounterSet = Globals | \"none\" | (string & {});\n\n  export type Cursor =\n    | Globals\n    | \"-moz-grab\"\n    | \"-webkit-grab\"\n    | \"alias\"\n    | \"all-scroll\"\n    | \"auto\"\n    | \"cell\"\n    | \"col-resize\"\n    | \"context-menu\"\n    | \"copy\"\n    | \"crosshair\"\n    | \"default\"\n    | \"e-resize\"\n    | \"ew-resize\"\n    | \"grab\"\n    | \"grabbing\"\n    | \"help\"\n    | \"move\"\n    | \"n-resize\"\n    | \"ne-resize\"\n    | \"nesw-resize\"\n    | \"no-drop\"\n    | \"none\"\n    | \"not-allowed\"\n    | \"ns-resize\"\n    | \"nw-resize\"\n    | \"nwse-resize\"\n    | \"pointer\"\n    | \"progress\"\n    | \"row-resize\"\n    | \"s-resize\"\n    | \"se-resize\"\n    | \"sw-resize\"\n    | \"text\"\n    | \"vertical-text\"\n    | \"w-resize\"\n    | \"wait\"\n    | \"zoom-in\"\n    | \"zoom-out\"\n    | (string & {});\n\n  export type Direction = Globals | \"ltr\" | \"rtl\";\n\n  export type Display =\n    | Globals\n    | DataType.DisplayOutside\n    | DataType.DisplayInside\n    | DataType.DisplayInternal\n    | DataType.DisplayLegacy\n    | \"contents\"\n    | \"list-item\"\n    | \"none\"\n    | (string & {});\n\n  export type EmptyCells = Globals | \"hide\" | \"show\";\n\n  export type Filter = Globals | \"none\" | (string & {});\n\n  export type Flex<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"content\" | \"fit-content\" | \"max-content\" | \"min-content\" | \"none\" | (string & {}) | (number & {});\n\n  export type FlexBasis<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-auto\"\n    | \"auto\"\n    | \"content\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type FlexDirection = Globals | \"column\" | \"column-reverse\" | \"row\" | \"row-reverse\";\n\n  export type FlexFlow = Globals | \"column\" | \"column-reverse\" | \"nowrap\" | \"row\" | \"row-reverse\" | \"wrap\" | \"wrap-reverse\" | (string & {});\n\n  export type FlexGrow = Globals | (number & {}) | (string & {});\n\n  export type FlexShrink = Globals | (number & {}) | (string & {});\n\n  export type FlexWrap = Globals | \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n\n  export type Float = Globals | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Font = Globals | \"caption\" | \"icon\" | \"menu\" | \"message-box\" | \"small-caption\" | \"status-bar\" | (string & {});\n\n  export type FontFamily = Globals | DataType.GenericFamily | (string & {});\n\n  export type FontFeatureSettings = Globals | \"normal\" | (string & {});\n\n  export type FontKerning = Globals | \"auto\" | \"none\" | \"normal\";\n\n  export type FontLanguageOverride = Globals | \"normal\" | (string & {});\n\n  export type FontOpticalSizing = Globals | \"auto\" | \"none\";\n\n  export type FontPalette = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type FontSize<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"larger\" | \"smaller\" | (string & {});\n\n  export type FontSizeAdjust = Globals | \"from-font\" | \"none\" | (string & {}) | (number & {});\n\n  export type FontSmooth<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"always\" | \"auto\" | \"never\";\n\n  export type FontStretch = Globals | DataType.FontStretchAbsolute;\n\n  export type FontStyle = Globals | \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  export type FontSynthesis = Globals | \"none\" | \"position\" | \"small-caps\" | \"style\" | \"weight\" | (string & {});\n\n  export type FontSynthesisPosition = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisSmallCaps = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisStyle = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisWeight = Globals | \"auto\" | \"none\";\n\n  export type FontVariant =\n    | Globals\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  export type FontVariantAlternates = Globals | \"historical-forms\" | \"normal\" | (string & {});\n\n  export type FontVariantCaps = Globals | \"all-petite-caps\" | \"all-small-caps\" | \"normal\" | \"petite-caps\" | \"small-caps\" | \"titling-caps\" | \"unicase\";\n\n  export type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | \"full-width\" | \"normal\" | \"proportional-width\" | \"ruby\" | (string & {});\n\n  export type FontVariantEmoji = Globals | \"emoji\" | \"normal\" | \"text\" | \"unicode\";\n\n  export type FontVariantLigatures =\n    | Globals\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"discretionary-ligatures\"\n    | \"historical-ligatures\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | (string & {});\n\n  export type FontVariantNumeric =\n    | Globals\n    | \"diagonal-fractions\"\n    | \"lining-nums\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"proportional-nums\"\n    | \"slashed-zero\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | (string & {});\n\n  export type FontVariantPosition = Globals | \"normal\" | \"sub\" | \"super\";\n\n  export type FontVariationSettings = Globals | \"normal\" | (string & {});\n\n  export type FontWeight = Globals | DataType.FontWeightAbsolute | \"bolder\" | \"lighter\";\n\n  export type ForcedColorAdjust = Globals | \"auto\" | \"none\";\n\n  export type Gap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type Grid = Globals | \"none\" | (string & {});\n\n  export type GridArea = Globals | DataType.GridLine | (string & {});\n\n  export type GridAutoColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridAutoFlow = Globals | \"column\" | \"dense\" | \"row\" | (string & {});\n\n  export type GridAutoRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridColumn = Globals | DataType.GridLine | (string & {});\n\n  export type GridColumnEnd = Globals | DataType.GridLine;\n\n  export type GridColumnGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridColumnStart = Globals | DataType.GridLine;\n\n  export type GridGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRow = Globals | DataType.GridLine | (string & {});\n\n  export type GridRowEnd = Globals | DataType.GridLine;\n\n  export type GridRowGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRowStart = Globals | DataType.GridLine;\n\n  export type GridTemplate = Globals | \"none\" | (string & {});\n\n  export type GridTemplateAreas = Globals | \"none\" | (string & {});\n\n  export type GridTemplateColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type GridTemplateRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type HangingPunctuation = Globals | \"allow-end\" | \"first\" | \"force-end\" | \"last\" | \"none\" | (string & {});\n\n  export type Height<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type HyphenateCharacter = Globals | \"auto\" | (string & {});\n\n  export type HyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Hyphens = Globals | \"auto\" | \"manual\" | \"none\";\n\n  export type ImageOrientation = Globals | \"flip\" | \"from-image\" | (string & {});\n\n  export type ImageRendering = Globals | \"-moz-crisp-edges\" | \"-webkit-optimize-contrast\" | \"auto\" | \"crisp-edges\" | \"pixelated\";\n\n  export type ImageResolution = Globals | \"from-image\" | (string & {});\n\n  export type ImeMode = Globals | \"active\" | \"auto\" | \"disabled\" | \"inactive\" | \"normal\";\n\n  export type InitialLetter = Globals | \"normal\" | (string & {}) | (number & {});\n\n  export type InlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type InputSecurity = Globals | \"auto\" | \"none\";\n\n  export type Inset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Isolation = Globals | \"auto\" | \"isolate\";\n\n  export type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type JustifyItems = Globals | DataType.SelfPosition | \"baseline\" | \"left\" | \"legacy\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifySelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"left\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type Left<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type LetterSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type LineBreak = Globals | \"anywhere\" | \"auto\" | \"loose\" | \"normal\" | \"strict\";\n\n  export type LineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type LineHeight<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {}) | (number & {});\n\n  export type LineHeightStep<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ListStyle = Globals | \"inside\" | \"none\" | \"outside\" | (string & {});\n\n  export type ListStyleImage = Globals | \"none\" | (string & {});\n\n  export type ListStylePosition = Globals | \"inside\" | \"outside\";\n\n  export type ListStyleType = Globals | \"none\" | (string & {});\n\n  export type Margin<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTrim = Globals | \"all\" | \"in-flow\" | \"none\";\n\n  export type Mask<TLength = (string & {}) | 0> = Globals | DataType.MaskLayer<TLength> | (string & {});\n\n  export type MaskBorder = Globals | \"alpha\" | \"luminance\" | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type MaskBorderMode = Globals | \"alpha\" | \"luminance\";\n\n  export type MaskBorderOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type MaskBorderRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type MaskBorderSlice = Globals | (string & {}) | (number & {});\n\n  export type MaskBorderSource = Globals | \"none\" | (string & {});\n\n  export type MaskBorderWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type MaskClip = Globals | DataType.GeometryBox | \"no-clip\" | (string & {});\n\n  export type MaskComposite = Globals | DataType.CompositingOperator | (string & {});\n\n  export type MaskImage = Globals | \"none\" | (string & {});\n\n  export type MaskMode = Globals | DataType.MaskingMode | (string & {});\n\n  export type MaskOrigin = Globals | DataType.GeometryBox | (string & {});\n\n  export type MaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type MaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type MaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type MaskType = Globals | \"alpha\" | \"luminance\";\n\n  export type MasonryAutoFlow = Globals | \"definite-first\" | \"next\" | \"ordered\" | \"pack\" | (string & {});\n\n  export type MathDepth = Globals | \"auto-add\" | (string & {}) | (number & {});\n\n  export type MathShift = Globals | \"compact\" | \"normal\";\n\n  export type MathStyle = Globals | \"compact\" | \"normal\";\n\n  export type MaxBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxLines = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type MaxWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MinBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type MixBlendMode = Globals | DataType.BlendMode | \"plus-lighter\";\n\n  export type Offset<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\" | \"none\" | \"normal\" | (string & {});\n\n  export type OffsetDistance<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type OffsetPath = Globals | \"none\" | (string & {});\n\n  export type OffsetRotate = Globals | \"auto\" | \"reverse\" | (string & {});\n\n  export type ObjectFit = Globals | \"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\";\n\n  export type ObjectPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type OffsetAnchor<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\";\n\n  export type OffsetPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\" | \"normal\";\n\n  export type Opacity = Globals | (string & {}) | (number & {});\n\n  export type Order = Globals | (number & {}) | (string & {});\n\n  export type Orphans = Globals | (number & {}) | (string & {});\n\n  export type Outline<TLength = (string & {}) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | \"auto\" | \"invert\" | (string & {});\n\n  export type OutlineColor = Globals | DataType.Color | \"invert\";\n\n  export type OutlineOffset<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type OutlineStyle = Globals | DataType.LineStyle | \"auto\" | (string & {});\n\n  export type OutlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type Overflow = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\" | (string & {});\n\n  export type OverflowAnchor = Globals | \"auto\" | \"none\";\n\n  export type OverflowBlock = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowClipBox = Globals | \"content-box\" | \"padding-box\";\n\n  export type OverflowClipMargin<TLength = (string & {}) | 0> = Globals | DataType.VisualBox | TLength | (string & {});\n\n  export type OverflowInline = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowWrap = Globals | \"anywhere\" | \"break-word\" | \"normal\";\n\n  export type OverflowX = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowY = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type Overlay = Globals | \"auto\" | \"none\";\n\n  export type OverscrollBehavior = Globals | \"auto\" | \"contain\" | \"none\" | (string & {});\n\n  export type OverscrollBehaviorBlock = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorInline = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorX = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorY = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type Padding<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingRight<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingTop<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type Page = Globals | \"auto\" | (string & {});\n\n  export type PageBreakAfter = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakBefore = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakInside = Globals | \"auto\" | \"avoid\";\n\n  export type PaintOrder = Globals | \"fill\" | \"markers\" | \"normal\" | \"stroke\" | (string & {});\n\n  export type Perspective<TLength = (string & {}) | 0> = Globals | TLength | \"none\";\n\n  export type PerspectiveOrigin<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type PlaceItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PlaceSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PointerEvents = Globals | \"all\" | \"auto\" | \"fill\" | \"inherit\" | \"none\" | \"painted\" | \"stroke\" | \"visible\" | \"visibleFill\" | \"visiblePainted\" | \"visibleStroke\";\n\n  export type Position = Globals | \"-webkit-sticky\" | \"absolute\" | \"fixed\" | \"relative\" | \"static\" | \"sticky\";\n\n  export type Quotes = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type Resize = Globals | \"block\" | \"both\" | \"horizontal\" | \"inline\" | \"none\" | \"vertical\";\n\n  export type Right<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Rotate = Globals | \"none\" | (string & {});\n\n  export type RowGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type RubyAlign = Globals | \"center\" | \"space-around\" | \"space-between\" | \"start\";\n\n  export type RubyMerge = Globals | \"auto\" | \"collapse\" | \"separate\";\n\n  export type RubyPosition = Globals | \"alternate\" | \"inter-character\" | \"over\" | \"under\" | (string & {});\n\n  export type Scale = Globals | \"none\" | (string & {}) | (number & {});\n\n  export type ScrollBehavior = Globals | \"auto\" | \"smooth\";\n\n  export type ScrollMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBottom<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginLeft<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginRight<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginTop<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollPadding<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollSnapAlign = Globals | \"center\" | \"end\" | \"none\" | \"start\" | (string & {});\n\n  export type ScrollSnapCoordinate<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"none\" | (string & {});\n\n  export type ScrollSnapDestination<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type ScrollSnapPointsX = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapPointsY = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapStop = Globals | \"always\" | \"normal\";\n\n  export type ScrollSnapType = Globals | \"block\" | \"both\" | \"inline\" | \"none\" | \"x\" | \"y\" | (string & {});\n\n  export type ScrollSnapTypeX = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollSnapTypeY = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollTimeline = Globals | \"none\" | (string & {});\n\n  export type ScrollTimelineAxis = Globals | \"block\" | \"inline\" | \"x\" | \"y\" | (string & {});\n\n  export type ScrollTimelineName = Globals | \"none\" | (string & {});\n\n  export type ScrollbarColor = Globals | \"auto\" | (string & {});\n\n  export type ScrollbarGutter = Globals | \"auto\" | \"stable\" | (string & {});\n\n  export type ScrollbarWidth = Globals | \"auto\" | \"none\" | \"thin\";\n\n  export type ShapeImageThreshold = Globals | (string & {}) | (number & {});\n\n  export type ShapeMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ShapeOutside = Globals | DataType.Box | \"margin-box\" | \"none\" | (string & {});\n\n  export type TabSize<TLength = (string & {}) | 0> = Globals | TLength | (number & {}) | (string & {});\n\n  export type TableLayout = Globals | \"auto\" | \"fixed\";\n\n  export type TextAlign = Globals | \"-webkit-match-parent\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\";\n\n  export type TextAlignLast = Globals | \"auto\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"right\" | \"start\";\n\n  export type TextCombineUpright = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TextDecoration<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Color\n    | TLength\n    | \"auto\"\n    | \"blink\"\n    | \"dashed\"\n    | \"dotted\"\n    | \"double\"\n    | \"from-font\"\n    | \"grammar-error\"\n    | \"line-through\"\n    | \"none\"\n    | \"overline\"\n    | \"solid\"\n    | \"spelling-error\"\n    | \"underline\"\n    | \"wavy\"\n    | (string & {});\n\n  export type TextDecorationColor = Globals | DataType.Color;\n\n  export type TextDecorationLine = Globals | \"blink\" | \"grammar-error\" | \"line-through\" | \"none\" | \"overline\" | \"spelling-error\" | \"underline\" | (string & {});\n\n  export type TextDecorationSkip = Globals | \"box-decoration\" | \"edges\" | \"leading-spaces\" | \"none\" | \"objects\" | \"spaces\" | \"trailing-spaces\" | (string & {});\n\n  export type TextDecorationSkipInk = Globals | \"all\" | \"auto\" | \"none\";\n\n  export type TextDecorationStyle = Globals | \"dashed\" | \"dotted\" | \"double\" | \"solid\" | \"wavy\";\n\n  export type TextDecorationThickness<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"from-font\" | (string & {});\n\n  export type TextEmphasis = Globals | DataType.Color | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextEmphasisColor = Globals | DataType.Color;\n\n  export type TextEmphasisPosition = Globals | (string & {});\n\n  export type TextEmphasisStyle = Globals | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextIndent<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextJustify = Globals | \"auto\" | \"inter-character\" | \"inter-word\" | \"none\";\n\n  export type TextOrientation = Globals | \"mixed\" | \"sideways\" | \"upright\";\n\n  export type TextOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type TextRendering = Globals | \"auto\" | \"geometricPrecision\" | \"optimizeLegibility\" | \"optimizeSpeed\";\n\n  export type TextShadow = Globals | \"none\" | (string & {});\n\n  export type TextSizeAdjust = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type TextTransform = Globals | \"capitalize\" | \"full-size-kana\" | \"full-width\" | \"lowercase\" | \"none\" | \"uppercase\";\n\n  export type TextUnderlineOffset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TextUnderlinePosition = Globals | \"auto\" | \"from-font\" | \"left\" | \"right\" | \"under\" | (string & {});\n\n  export type TextWrap = Globals | \"balance\" | \"nowrap\" | \"pretty\" | \"stable\" | \"wrap\";\n\n  export type TimelineScope = Globals | \"none\" | (string & {});\n\n  export type Top<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TouchAction =\n    | Globals\n    | \"-ms-manipulation\"\n    | \"-ms-none\"\n    | \"-ms-pinch-zoom\"\n    | \"auto\"\n    | \"manipulation\"\n    | \"none\"\n    | \"pan-down\"\n    | \"pan-left\"\n    | \"pan-right\"\n    | \"pan-up\"\n    | \"pan-x\"\n    | \"pan-y\"\n    | \"pinch-zoom\"\n    | (string & {});\n\n  export type Transform = Globals | \"none\" | (string & {});\n\n  export type TransformBox = Globals | \"border-box\" | \"content-box\" | \"fill-box\" | \"stroke-box\" | \"view-box\";\n\n  export type TransformOrigin<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  export type TransformStyle = Globals | \"flat\" | \"preserve-3d\";\n\n  export type Transition<TTime = string & {}> = Globals | DataType.SingleTransition<TTime> | (string & {});\n\n  export type TransitionBehavior = Globals | \"allow-discrete\" | \"normal\" | (string & {});\n\n  export type TransitionDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionProperty = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TransitionTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Translate<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type UnicodeBidi =\n    | Globals\n    | \"-moz-isolate\"\n    | \"-moz-isolate-override\"\n    | \"-moz-plaintext\"\n    | \"-webkit-isolate\"\n    | \"-webkit-isolate-override\"\n    | \"-webkit-plaintext\"\n    | \"bidi-override\"\n    | \"embed\"\n    | \"isolate\"\n    | \"isolate-override\"\n    | \"normal\"\n    | \"plaintext\";\n\n  export type UserSelect = Globals | \"-moz-none\" | \"all\" | \"auto\" | \"contain\" | \"element\" | \"none\" | \"text\";\n\n  export type VerticalAlign<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"baseline\"\n    | \"bottom\"\n    | \"middle\"\n    | \"sub\"\n    | \"super\"\n    | \"text-bottom\"\n    | \"text-top\"\n    | \"top\"\n    | (string & {});\n\n  export type ViewTimeline = Globals | \"none\" | (string & {});\n\n  export type ViewTimelineAxis = Globals | \"block\" | \"inline\" | \"x\" | \"y\" | (string & {});\n\n  export type ViewTimelineInset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ViewTimelineName = Globals | \"none\" | (string & {});\n\n  export type ViewTransitionName = Globals | \"none\" | (string & {});\n\n  export type Visibility = Globals | \"collapse\" | \"hidden\" | \"visible\";\n\n  export type WhiteSpace =\n    | Globals\n    | \"-moz-pre-wrap\"\n    | \"balance\"\n    | \"break-spaces\"\n    | \"collapse\"\n    | \"discard\"\n    | \"discard-after\"\n    | \"discard-before\"\n    | \"discard-inner\"\n    | \"none\"\n    | \"normal\"\n    | \"nowrap\"\n    | \"pre\"\n    | \"pre-line\"\n    | \"pre-wrap\"\n    | \"preserve\"\n    | \"preserve-breaks\"\n    | \"preserve-spaces\"\n    | \"pretty\"\n    | \"stable\"\n    | \"wrap\"\n    | (string & {});\n\n  export type WhiteSpaceCollapse = Globals | \"break-spaces\" | \"collapse\" | \"discard\" | \"preserve\" | \"preserve-breaks\" | \"preserve-spaces\";\n\n  export type WhiteSpaceTrim = Globals | \"discard-after\" | \"discard-before\" | \"discard-inner\" | \"none\" | (string & {});\n\n  export type Widows = Globals | (number & {}) | (string & {});\n\n  export type Width<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type WillChange = Globals | DataType.AnimateableFeature | \"auto\" | (string & {});\n\n  export type WordBreak = Globals | \"break-all\" | \"break-word\" | \"keep-all\" | \"normal\";\n\n  export type WordSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type WordWrap = Globals | \"break-word\" | \"normal\";\n\n  export type WritingMode = Globals | \"horizontal-tb\" | \"sideways-lr\" | \"sideways-rl\" | \"vertical-lr\" | \"vertical-rl\";\n\n  export type ZIndex = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type Zoom = Globals | \"normal\" | \"reset\" | (string & {}) | (number & {});\n\n  export type MozAppearance =\n    | Globals\n    | \"-moz-mac-unified-toolbar\"\n    | \"-moz-win-borderless-glass\"\n    | \"-moz-win-browsertabbar-toolbox\"\n    | \"-moz-win-communications-toolbox\"\n    | \"-moz-win-communicationstext\"\n    | \"-moz-win-exclude-glass\"\n    | \"-moz-win-glass\"\n    | \"-moz-win-media-toolbox\"\n    | \"-moz-win-mediatext\"\n    | \"-moz-window-button-box\"\n    | \"-moz-window-button-box-maximized\"\n    | \"-moz-window-button-close\"\n    | \"-moz-window-button-maximize\"\n    | \"-moz-window-button-minimize\"\n    | \"-moz-window-button-restore\"\n    | \"-moz-window-frame-bottom\"\n    | \"-moz-window-frame-left\"\n    | \"-moz-window-frame-right\"\n    | \"-moz-window-titlebar\"\n    | \"-moz-window-titlebar-maximized\"\n    | \"button\"\n    | \"button-arrow-down\"\n    | \"button-arrow-next\"\n    | \"button-arrow-previous\"\n    | \"button-arrow-up\"\n    | \"button-bevel\"\n    | \"button-focus\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"checkbox-container\"\n    | \"checkbox-label\"\n    | \"checkmenuitem\"\n    | \"dualbutton\"\n    | \"groupbox\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"menuarrow\"\n    | \"menubar\"\n    | \"menucheckbox\"\n    | \"menuimage\"\n    | \"menuitem\"\n    | \"menuitemtext\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"menupopup\"\n    | \"menuradio\"\n    | \"menuseparator\"\n    | \"meterbar\"\n    | \"meterchunk\"\n    | \"none\"\n    | \"progressbar\"\n    | \"progressbar-vertical\"\n    | \"progresschunk\"\n    | \"progresschunk-vertical\"\n    | \"radio\"\n    | \"radio-container\"\n    | \"radio-label\"\n    | \"radiomenuitem\"\n    | \"range\"\n    | \"range-thumb\"\n    | \"resizer\"\n    | \"resizerpanel\"\n    | \"scale-horizontal\"\n    | \"scale-vertical\"\n    | \"scalethumb-horizontal\"\n    | \"scalethumb-vertical\"\n    | \"scalethumbend\"\n    | \"scalethumbstart\"\n    | \"scalethumbtick\"\n    | \"scrollbarbutton-down\"\n    | \"scrollbarbutton-left\"\n    | \"scrollbarbutton-right\"\n    | \"scrollbarbutton-up\"\n    | \"scrollbarthumb-horizontal\"\n    | \"scrollbarthumb-vertical\"\n    | \"scrollbartrack-horizontal\"\n    | \"scrollbartrack-vertical\"\n    | \"searchfield\"\n    | \"separator\"\n    | \"sheet\"\n    | \"spinner\"\n    | \"spinner-downbutton\"\n    | \"spinner-textfield\"\n    | \"spinner-upbutton\"\n    | \"splitter\"\n    | \"statusbar\"\n    | \"statusbarpanel\"\n    | \"tab\"\n    | \"tab-scroll-arrow-back\"\n    | \"tab-scroll-arrow-forward\"\n    | \"tabpanel\"\n    | \"tabpanels\"\n    | \"textfield\"\n    | \"textfield-multiline\"\n    | \"toolbar\"\n    | \"toolbarbutton\"\n    | \"toolbarbutton-dropdown\"\n    | \"toolbargripper\"\n    | \"toolbox\"\n    | \"tooltip\"\n    | \"treeheader\"\n    | \"treeheadercell\"\n    | \"treeheadersortarrow\"\n    | \"treeitem\"\n    | \"treeline\"\n    | \"treetwisty\"\n    | \"treetwistyopen\"\n    | \"treeview\";\n\n  export type MozBinding = Globals | \"none\" | (string & {});\n\n  export type MozBorderBottomColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderLeftColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderRightColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderTopColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozContextProperties = Globals | \"fill\" | \"fill-opacity\" | \"none\" | \"stroke\" | \"stroke-opacity\" | (string & {});\n\n  export type MozFloatEdge = Globals | \"border-box\" | \"content-box\" | \"margin-box\" | \"padding-box\";\n\n  export type MozForceBrokenImageIcon = Globals | 0 | (string & {}) | 1;\n\n  export type MozImageRegion = Globals | \"auto\" | (string & {});\n\n  export type MozOrient = Globals | \"block\" | \"horizontal\" | \"inline\" | \"vertical\";\n\n  export type MozOutlineRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozStackSizing = Globals | \"ignore\" | \"stretch-to-fit\";\n\n  export type MozTextBlink = Globals | \"blink\" | \"none\";\n\n  export type MozUserFocus = Globals | \"ignore\" | \"none\" | \"normal\" | \"select-after\" | \"select-all\" | \"select-before\" | \"select-menu\" | \"select-same\";\n\n  export type MozUserInput = Globals | \"auto\" | \"disabled\" | \"enabled\" | \"none\";\n\n  export type MozUserModify = Globals | \"read-only\" | \"read-write\" | \"write-only\";\n\n  export type MozWindowDragging = Globals | \"drag\" | \"no-drag\";\n\n  export type MozWindowShadow = Globals | \"default\" | \"menu\" | \"none\" | \"sheet\" | \"tooltip\";\n\n  export type MsAccelerator = Globals | \"false\" | \"true\";\n\n  export type MsBlockProgression = Globals | \"bt\" | \"lr\" | \"rl\" | \"tb\";\n\n  export type MsContentZoomChaining = Globals | \"chained\" | \"none\";\n\n  export type MsContentZoomLimit = Globals | (string & {});\n\n  export type MsContentZoomLimitMax = Globals | (string & {});\n\n  export type MsContentZoomLimitMin = Globals | (string & {});\n\n  export type MsContentZoomSnap = Globals | \"mandatory\" | \"none\" | \"proximity\" | (string & {});\n\n  export type MsContentZoomSnapPoints = Globals | (string & {});\n\n  export type MsContentZoomSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsContentZooming = Globals | \"none\" | \"zoom\";\n\n  export type MsFilter = Globals | (string & {});\n\n  export type MsFlowFrom = Globals | \"none\" | (string & {});\n\n  export type MsFlowInto = Globals | \"none\" | (string & {});\n\n  export type MsGridColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsGridRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsHighContrastAdjust = Globals | \"auto\" | \"none\";\n\n  export type MsHyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type MsHyphenateLimitLines = Globals | \"no-limit\" | (number & {}) | (string & {});\n\n  export type MsHyphenateLimitZone<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MsImeAlign = Globals | \"after\" | \"auto\";\n\n  export type MsOverflowStyle = Globals | \"-ms-autohiding-scrollbar\" | \"auto\" | \"none\" | \"scrollbar\";\n\n  export type MsScrollChaining = Globals | \"chained\" | \"none\";\n\n  export type MsScrollLimit = Globals | (string & {});\n\n  export type MsScrollLimitXMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitXMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollLimitYMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitYMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollRails = Globals | \"none\" | \"railed\";\n\n  export type MsScrollSnapPointsX = Globals | (string & {});\n\n  export type MsScrollSnapPointsY = Globals | (string & {});\n\n  export type MsScrollSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsScrollSnapX = Globals | (string & {});\n\n  export type MsScrollSnapY = Globals | (string & {});\n\n  export type MsScrollTranslation = Globals | \"none\" | \"vertical-to-horizontal\";\n\n  export type MsScrollbar3dlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarArrowColor = Globals | DataType.Color;\n\n  export type MsScrollbarBaseColor = Globals | DataType.Color;\n\n  export type MsScrollbarDarkshadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarFaceColor = Globals | DataType.Color;\n\n  export type MsScrollbarHighlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarShadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarTrackColor = Globals | DataType.Color;\n\n  export type MsTextAutospace = Globals | \"ideograph-alpha\" | \"ideograph-numeric\" | \"ideograph-parenthesis\" | \"ideograph-space\" | \"none\";\n\n  export type MsTouchSelect = Globals | \"grippers\" | \"none\";\n\n  export type MsUserSelect = Globals | \"element\" | \"none\" | \"text\";\n\n  export type MsWrapFlow = Globals | \"auto\" | \"both\" | \"clear\" | \"end\" | \"maximum\" | \"start\";\n\n  export type MsWrapMargin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsWrapThrough = Globals | \"none\" | \"wrap\";\n\n  export type WebkitAppearance =\n    | Globals\n    | \"-apple-pay-button\"\n    | \"button\"\n    | \"button-bevel\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"default-button\"\n    | \"inner-spin-button\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"media-controls-background\"\n    | \"media-controls-fullscreen-background\"\n    | \"media-current-time-display\"\n    | \"media-enter-fullscreen-button\"\n    | \"media-exit-fullscreen-button\"\n    | \"media-fullscreen-button\"\n    | \"media-mute-button\"\n    | \"media-overlay-play-button\"\n    | \"media-play-button\"\n    | \"media-seek-back-button\"\n    | \"media-seek-forward-button\"\n    | \"media-slider\"\n    | \"media-sliderthumb\"\n    | \"media-time-remaining-display\"\n    | \"media-toggle-closed-captions-button\"\n    | \"media-volume-slider\"\n    | \"media-volume-slider-container\"\n    | \"media-volume-sliderthumb\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"meter\"\n    | \"none\"\n    | \"progress-bar\"\n    | \"progress-bar-value\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"searchfield-cancel-button\"\n    | \"searchfield-decoration\"\n    | \"searchfield-results-button\"\n    | \"searchfield-results-decoration\"\n    | \"slider-horizontal\"\n    | \"slider-vertical\"\n    | \"sliderthumb-horizontal\"\n    | \"sliderthumb-vertical\"\n    | \"square-button\"\n    | \"textarea\"\n    | \"textfield\";\n\n  export type WebkitBorderBefore<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type WebkitBorderBeforeColor = Globals | DataType.Color;\n\n  export type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type WebkitBorderBeforeWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type WebkitBoxReflect<TLength = (string & {}) | 0> = Globals | TLength | \"above\" | \"below\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitLineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type WebkitMask<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Position<TLength>\n    | DataType.RepeatStyle\n    | DataType.Box\n    | \"border\"\n    | \"content\"\n    | \"none\"\n    | \"padding\"\n    | \"text\"\n    | (string & {});\n\n  export type WebkitMaskAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type WebkitMaskClip = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | \"text\" | (string & {});\n\n  export type WebkitMaskComposite = Globals | DataType.CompositeStyle | (string & {});\n\n  export type WebkitMaskImage = Globals | \"none\" | (string & {});\n\n  export type WebkitMaskOrigin = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | (string & {});\n\n  export type WebkitMaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type WebkitMaskPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitMaskPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | (string & {});\n\n  export type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type WebkitMaskRepeatX = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskRepeatY = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type WebkitOverflowScrolling = Globals | \"auto\" | \"touch\";\n\n  export type WebkitTapHighlightColor = Globals | DataType.Color;\n\n  export type WebkitTextFillColor = Globals | DataType.Color;\n\n  export type WebkitTextStroke<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | (string & {});\n\n  export type WebkitTextStrokeColor = Globals | DataType.Color;\n\n  export type WebkitTextStrokeWidth<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type WebkitTouchCallout = Globals | \"default\" | \"none\";\n\n  export type WebkitUserModify = Globals | \"read-only\" | \"read-write\" | \"read-write-plaintext-only\";\n\n  export type AlignmentBaseline =\n    | Globals\n    | \"after-edge\"\n    | \"alphabetic\"\n    | \"auto\"\n    | \"baseline\"\n    | \"before-edge\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"text-after-edge\"\n    | \"text-before-edge\";\n\n  export type BaselineShift<TLength = (string & {}) | 0> = Globals | TLength | \"baseline\" | \"sub\" | \"super\" | (string & {});\n\n  export type ClipRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type ColorInterpolation = Globals | \"auto\" | \"linearRGB\" | \"sRGB\";\n\n  export type ColorRendering = Globals | \"auto\" | \"optimizeQuality\" | \"optimizeSpeed\";\n\n  export type DominantBaseline =\n    | Globals\n    | \"alphabetic\"\n    | \"auto\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"no-change\"\n    | \"reset-size\"\n    | \"text-after-edge\"\n    | \"text-before-edge\"\n    | \"use-script\";\n\n  export type Fill = Globals | DataType.Paint;\n\n  export type FillOpacity = Globals | (number & {}) | (string & {});\n\n  export type FillRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type FloodColor = Globals | DataType.Color | \"currentColor\";\n\n  export type FloodOpacity = Globals | (number & {}) | (string & {});\n\n  export type GlyphOrientationVertical = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type LightingColor = Globals | DataType.Color | \"currentColor\";\n\n  export type Marker = Globals | \"none\" | (string & {});\n\n  export type MarkerEnd = Globals | \"none\" | (string & {});\n\n  export type MarkerMid = Globals | \"none\" | (string & {});\n\n  export type MarkerStart = Globals | \"none\" | (string & {});\n\n  export type ShapeRendering = Globals | \"auto\" | \"crispEdges\" | \"geometricPrecision\" | \"optimizeSpeed\";\n\n  export type StopColor = Globals | DataType.Color | \"currentColor\";\n\n  export type StopOpacity = Globals | (number & {}) | (string & {});\n\n  export type Stroke = Globals | DataType.Paint;\n\n  export type StrokeDasharray<TLength = (string & {}) | 0> = Globals | DataType.Dasharray<TLength> | \"none\";\n\n  export type StrokeDashoffset<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type StrokeLinecap = Globals | \"butt\" | \"round\" | \"square\";\n\n  export type StrokeLinejoin = Globals | \"bevel\" | \"miter\" | \"round\";\n\n  export type StrokeMiterlimit = Globals | (number & {}) | (string & {});\n\n  export type StrokeOpacity = Globals | (number & {}) | (string & {});\n\n  export type StrokeWidth<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextAnchor = Globals | \"end\" | \"middle\" | \"start\";\n\n  export type VectorEffect = Globals | \"non-scaling-stroke\" | \"none\";\n}\n\nexport namespace AtRule {\n  export interface CounterStyle<TLength = (string & {}) | 0, TTime = string & {}> {\n    additiveSymbols?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    speakAs?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export interface CounterStyleHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"additive-symbols\"?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    \"speak-as\"?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export type CounterStyleFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyle<TLength, TTime>>;\n\n  export type CounterStyleHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyleHyphen<TLength, TTime>>;\n\n  export interface FontFace<TLength = (string & {}) | 0, TTime = string & {}> {\n    MozFontFeatureSettings?: FontFeatureSettings | undefined;\n    ascentOverride?: AscentOverride | undefined;\n    descentOverride?: DescentOverride | undefined;\n    fontDisplay?: FontDisplay | undefined;\n    fontFamily?: string | undefined;\n    fontFeatureSettings?: FontFeatureSettings | undefined;\n    fontStretch?: FontStretch | undefined;\n    fontStyle?: FontStyle | undefined;\n    fontVariant?: FontVariant | undefined;\n    fontVariationSettings?: FontVariationSettings | undefined;\n    fontWeight?: FontWeight | undefined;\n    lineGapOverride?: LineGapOverride | undefined;\n    sizeAdjust?: string | undefined;\n    src?: string | undefined;\n    unicodeRange?: string | undefined;\n  }\n\n  export interface FontFaceHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"-moz-font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"ascent-override\"?: AscentOverride | undefined;\n    \"descent-override\"?: DescentOverride | undefined;\n    \"font-display\"?: FontDisplay | undefined;\n    \"font-family\"?: string | undefined;\n    \"font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"font-stretch\"?: FontStretch | undefined;\n    \"font-style\"?: FontStyle | undefined;\n    \"font-variant\"?: FontVariant | undefined;\n    \"font-variation-settings\"?: FontVariationSettings | undefined;\n    \"font-weight\"?: FontWeight | undefined;\n    \"line-gap-override\"?: LineGapOverride | undefined;\n    \"size-adjust\"?: string | undefined;\n    src?: string | undefined;\n    \"unicode-range\"?: string | undefined;\n  }\n\n  export type FontFaceFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFace<TLength, TTime>>;\n\n  export type FontFaceHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFaceHyphen<TLength, TTime>>;\n\n  export interface FontPaletteValues<TLength = (string & {}) | 0, TTime = string & {}> {\n    basePalette?: BasePalette | undefined;\n    fontFamily?: string | undefined;\n    overrideColors?: string | undefined;\n  }\n\n  export interface FontPaletteValuesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"base-palette\"?: BasePalette | undefined;\n    \"font-family\"?: string | undefined;\n    \"override-colors\"?: string | undefined;\n  }\n\n  export type FontPaletteValuesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValues<TLength, TTime>>;\n\n  export type FontPaletteValuesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValuesHyphen<TLength, TTime>>;\n\n  export interface Page<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    pageOrientation?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export interface PageHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    \"page-orientation\"?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export type PageFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Page<TLength, TTime>>;\n\n  export type PageHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PageHyphen<TLength, TTime>>;\n\n  export interface Property<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    initialValue?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export interface PropertyHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    \"initial-value\"?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export type PropertyFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Property<TLength, TTime>>;\n\n  export type PropertyHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PropertyHyphen<TLength, TTime>>;\n\n  export interface Viewport<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    maxHeight?: MaxHeight<TLength> | undefined;\n    maxWidth?: MaxWidth<TLength> | undefined;\n    maxZoom?: MaxZoom | undefined;\n    minHeight?: MinHeight<TLength> | undefined;\n    minWidth?: MinWidth<TLength> | undefined;\n    minZoom?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    userZoom?: UserZoom | undefined;\n    viewportFit?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export interface ViewportHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    \"max-height\"?: MaxHeight<TLength> | undefined;\n    \"max-width\"?: MaxWidth<TLength> | undefined;\n    \"max-zoom\"?: MaxZoom | undefined;\n    \"min-height\"?: MinHeight<TLength> | undefined;\n    \"min-width\"?: MinWidth<TLength> | undefined;\n    \"min-zoom\"?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    \"user-zoom\"?: UserZoom | undefined;\n    \"viewport-fit\"?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export type ViewportFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Viewport<TLength, TTime>>;\n\n  export type ViewportHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ViewportHyphen<TLength, TTime>>;\n\n  type Range = \"auto\" | (string & {});\n\n  type SpeakAs = \"auto\" | \"bullets\" | \"numbers\" | \"spell-out\" | \"words\" | (string & {});\n\n  type System = \"additive\" | \"alphabetic\" | \"cyclic\" | \"fixed\" | \"numeric\" | \"symbolic\" | (string & {});\n\n  type FontFeatureSettings = \"normal\" | (string & {});\n\n  type AscentOverride = \"normal\" | (string & {});\n\n  type DescentOverride = \"normal\" | (string & {});\n\n  type FontDisplay = \"auto\" | \"block\" | \"fallback\" | \"optional\" | \"swap\";\n\n  type FontStretch = DataType.FontStretchAbsolute | (string & {});\n\n  type FontStyle = \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  type FontVariant =\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  type FontVariationSettings = \"normal\" | (string & {});\n\n  type FontWeight = DataType.FontWeightAbsolute | (string & {});\n\n  type LineGapOverride = \"normal\" | (string & {});\n\n  type BasePalette = \"dark\" | \"light\" | (number & {}) | (string & {});\n\n  type Bleed<TLength> = TLength | \"auto\";\n\n  type Marks = \"crop\" | \"cross\" | \"none\" | (string & {});\n\n  type PageOrientation = \"rotate-left\" | \"rotate-right\" | \"upright\";\n\n  type Size<TLength> = DataType.PageSize | TLength | \"auto\" | \"landscape\" | \"portrait\" | (string & {});\n\n  type Inherits = \"false\" | \"true\";\n\n  type Height<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type MaxHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxZoom = \"auto\" | (string & {}) | (number & {});\n\n  type MinHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinZoom = \"auto\" | (string & {}) | (number & {});\n\n  type Orientation = \"auto\" | \"landscape\" | \"portrait\";\n\n  type UserZoom = \"fixed\" | \"zoom\";\n\n  type ViewportFit = \"auto\" | \"contain\" | \"cover\";\n\n  type Width<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type Zoom = \"auto\" | (string & {}) | (number & {});\n}\n\n/**\n * **Attention!** Data types receives its name from the spec. E.g. `<color>` becomes `DataType.Color` and\n * `<content-distribution>` becomes `DataType.ContentDistribution`. It happens quite frequent that these data types\n * are split into several data types or/and name changes as the spec develops. So there's a risk that a minor/patch\n * update from `csstype` can break your typing if you're using the `DataType` namespace.\n */\nexport namespace DataType {\n  type AbsoluteSize = \"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\";\n\n  type AnimateableFeature = \"contents\" | \"scroll-position\" | (string & {});\n\n  type Attachment = \"fixed\" | \"local\" | \"scroll\";\n\n  type BgPosition<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type BgSize<TLength> = TLength | \"auto\" | \"contain\" | \"cover\" | (string & {});\n\n  type BlendMode =\n    | \"color\"\n    | \"color-burn\"\n    | \"color-dodge\"\n    | \"darken\"\n    | \"difference\"\n    | \"exclusion\"\n    | \"hard-light\"\n    | \"hue\"\n    | \"lighten\"\n    | \"luminosity\"\n    | \"multiply\"\n    | \"normal\"\n    | \"overlay\"\n    | \"saturation\"\n    | \"screen\"\n    | \"soft-light\";\n\n  type Box = \"border-box\" | \"content-box\" | \"padding-box\";\n\n  type Color = NamedColor | DeprecatedSystemColor | \"currentcolor\" | (string & {});\n\n  type CompatAuto =\n    | \"button\"\n    | \"checkbox\"\n    | \"listbox\"\n    | \"menulist\"\n    | \"meter\"\n    | \"progress-bar\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"slider-horizontal\"\n    | \"square-button\"\n    | \"textarea\";\n\n  type CompositeStyle =\n    | \"clear\"\n    | \"copy\"\n    | \"destination-atop\"\n    | \"destination-in\"\n    | \"destination-out\"\n    | \"destination-over\"\n    | \"source-atop\"\n    | \"source-in\"\n    | \"source-out\"\n    | \"source-over\"\n    | \"xor\";\n\n  type CompositingOperator = \"add\" | \"exclude\" | \"intersect\" | \"subtract\";\n\n  type ContentDistribution = \"space-around\" | \"space-between\" | \"space-evenly\" | \"stretch\";\n\n  type ContentList = Quote | \"contents\" | (string & {});\n\n  type ContentPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\";\n\n  type CubicBezierTimingFunction = \"ease\" | \"ease-in\" | \"ease-in-out\" | \"ease-out\" | (string & {});\n\n  type Dasharray<TLength> = TLength | (string & {}) | (number & {});\n\n  type DeprecatedSystemColor =\n    | \"ActiveBorder\"\n    | \"ActiveCaption\"\n    | \"AppWorkspace\"\n    | \"Background\"\n    | \"ButtonFace\"\n    | \"ButtonHighlight\"\n    | \"ButtonShadow\"\n    | \"ButtonText\"\n    | \"CaptionText\"\n    | \"GrayText\"\n    | \"Highlight\"\n    | \"HighlightText\"\n    | \"InactiveBorder\"\n    | \"InactiveCaption\"\n    | \"InactiveCaptionText\"\n    | \"InfoBackground\"\n    | \"InfoText\"\n    | \"Menu\"\n    | \"MenuText\"\n    | \"Scrollbar\"\n    | \"ThreeDDarkShadow\"\n    | \"ThreeDFace\"\n    | \"ThreeDHighlight\"\n    | \"ThreeDLightShadow\"\n    | \"ThreeDShadow\"\n    | \"Window\"\n    | \"WindowFrame\"\n    | \"WindowText\";\n\n  type DisplayInside = \"-ms-flexbox\" | \"-ms-grid\" | \"-webkit-flex\" | \"flex\" | \"flow\" | \"flow-root\" | \"grid\" | \"ruby\" | \"table\";\n\n  type DisplayInternal =\n    | \"ruby-base\"\n    | \"ruby-base-container\"\n    | \"ruby-text\"\n    | \"ruby-text-container\"\n    | \"table-caption\"\n    | \"table-cell\"\n    | \"table-column\"\n    | \"table-column-group\"\n    | \"table-footer-group\"\n    | \"table-header-group\"\n    | \"table-row\"\n    | \"table-row-group\";\n\n  type DisplayLegacy = \"-ms-inline-flexbox\" | \"-ms-inline-grid\" | \"-webkit-inline-flex\" | \"inline-block\" | \"inline-flex\" | \"inline-grid\" | \"inline-list-item\" | \"inline-table\";\n\n  type DisplayOutside = \"block\" | \"inline\" | \"run-in\";\n\n  type EasingFunction = CubicBezierTimingFunction | StepTimingFunction | \"linear\";\n\n  type EastAsianVariantValues = \"jis04\" | \"jis78\" | \"jis83\" | \"jis90\" | \"simplified\" | \"traditional\";\n\n  type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | \"none\" | (string & {});\n\n  type FontStretchAbsolute =\n    | \"condensed\"\n    | \"expanded\"\n    | \"extra-condensed\"\n    | \"extra-expanded\"\n    | \"normal\"\n    | \"semi-condensed\"\n    | \"semi-expanded\"\n    | \"ultra-condensed\"\n    | \"ultra-expanded\"\n    | (string & {});\n\n  type FontWeightAbsolute = \"bold\" | \"normal\" | (number & {}) | (string & {});\n\n  type GenericFamily = \"cursive\" | \"fantasy\" | \"monospace\" | \"sans-serif\" | \"serif\";\n\n  type GeometryBox = Box | \"fill-box\" | \"margin-box\" | \"stroke-box\" | \"view-box\";\n\n  type GridLine = \"auto\" | (string & {}) | (number & {});\n\n  type LineStyle = \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"hidden\" | \"inset\" | \"none\" | \"outset\" | \"ridge\" | \"solid\";\n\n  type LineWidth<TLength> = TLength | \"medium\" | \"thick\" | \"thin\";\n\n  type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | \"no-clip\" | \"none\" | (string & {});\n\n  type MaskingMode = \"alpha\" | \"luminance\" | \"match-source\";\n\n  type NamedColor =\n    | \"aliceblue\"\n    | \"antiquewhite\"\n    | \"aqua\"\n    | \"aquamarine\"\n    | \"azure\"\n    | \"beige\"\n    | \"bisque\"\n    | \"black\"\n    | \"blanchedalmond\"\n    | \"blue\"\n    | \"blueviolet\"\n    | \"brown\"\n    | \"burlywood\"\n    | \"cadetblue\"\n    | \"chartreuse\"\n    | \"chocolate\"\n    | \"coral\"\n    | \"cornflowerblue\"\n    | \"cornsilk\"\n    | \"crimson\"\n    | \"cyan\"\n    | \"darkblue\"\n    | \"darkcyan\"\n    | \"darkgoldenrod\"\n    | \"darkgray\"\n    | \"darkgreen\"\n    | \"darkgrey\"\n    | \"darkkhaki\"\n    | \"darkmagenta\"\n    | \"darkolivegreen\"\n    | \"darkorange\"\n    | \"darkorchid\"\n    | \"darkred\"\n    | \"darksalmon\"\n    | \"darkseagreen\"\n    | \"darkslateblue\"\n    | \"darkslategray\"\n    | \"darkslategrey\"\n    | \"darkturquoise\"\n    | \"darkviolet\"\n    | \"deeppink\"\n    | \"deepskyblue\"\n    | \"dimgray\"\n    | \"dimgrey\"\n    | \"dodgerblue\"\n    | \"firebrick\"\n    | \"floralwhite\"\n    | \"forestgreen\"\n    | \"fuchsia\"\n    | \"gainsboro\"\n    | \"ghostwhite\"\n    | \"gold\"\n    | \"goldenrod\"\n    | \"gray\"\n    | \"green\"\n    | \"greenyellow\"\n    | \"grey\"\n    | \"honeydew\"\n    | \"hotpink\"\n    | \"indianred\"\n    | \"indigo\"\n    | \"ivory\"\n    | \"khaki\"\n    | \"lavender\"\n    | \"lavenderblush\"\n    | \"lawngreen\"\n    | \"lemonchiffon\"\n    | \"lightblue\"\n    | \"lightcoral\"\n    | \"lightcyan\"\n    | \"lightgoldenrodyellow\"\n    | \"lightgray\"\n    | \"lightgreen\"\n    | \"lightgrey\"\n    | \"lightpink\"\n    | \"lightsalmon\"\n    | \"lightseagreen\"\n    | \"lightskyblue\"\n    | \"lightslategray\"\n    | \"lightslategrey\"\n    | \"lightsteelblue\"\n    | \"lightyellow\"\n    | \"lime\"\n    | \"limegreen\"\n    | \"linen\"\n    | \"magenta\"\n    | \"maroon\"\n    | \"mediumaquamarine\"\n    | \"mediumblue\"\n    | \"mediumorchid\"\n    | \"mediumpurple\"\n    | \"mediumseagreen\"\n    | \"mediumslateblue\"\n    | \"mediumspringgreen\"\n    | \"mediumturquoise\"\n    | \"mediumvioletred\"\n    | \"midnightblue\"\n    | \"mintcream\"\n    | \"mistyrose\"\n    | \"moccasin\"\n    | \"navajowhite\"\n    | \"navy\"\n    | \"oldlace\"\n    | \"olive\"\n    | \"olivedrab\"\n    | \"orange\"\n    | \"orangered\"\n    | \"orchid\"\n    | \"palegoldenrod\"\n    | \"palegreen\"\n    | \"paleturquoise\"\n    | \"palevioletred\"\n    | \"papayawhip\"\n    | \"peachpuff\"\n    | \"peru\"\n    | \"pink\"\n    | \"plum\"\n    | \"powderblue\"\n    | \"purple\"\n    | \"rebeccapurple\"\n    | \"red\"\n    | \"rosybrown\"\n    | \"royalblue\"\n    | \"saddlebrown\"\n    | \"salmon\"\n    | \"sandybrown\"\n    | \"seagreen\"\n    | \"seashell\"\n    | \"sienna\"\n    | \"silver\"\n    | \"skyblue\"\n    | \"slateblue\"\n    | \"slategray\"\n    | \"slategrey\"\n    | \"snow\"\n    | \"springgreen\"\n    | \"steelblue\"\n    | \"tan\"\n    | \"teal\"\n    | \"thistle\"\n    | \"tomato\"\n    | \"transparent\"\n    | \"turquoise\"\n    | \"violet\"\n    | \"wheat\"\n    | \"white\"\n    | \"whitesmoke\"\n    | \"yellow\"\n    | \"yellowgreen\";\n\n  type PageSize = \"A3\" | \"A4\" | \"A5\" | \"B4\" | \"B5\" | \"JIS-B4\" | \"JIS-B5\" | \"ledger\" | \"legal\" | \"letter\";\n\n  type Paint = Color | \"child\" | \"context-fill\" | \"context-stroke\" | \"none\" | (string & {});\n\n  type Position<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type Quote = \"close-quote\" | \"no-close-quote\" | \"no-open-quote\" | \"open-quote\";\n\n  type RepeatStyle = \"no-repeat\" | \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"round\" | \"space\" | (string & {});\n\n  type SelfPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"self-end\" | \"self-start\" | \"start\";\n\n  type SingleAnimation<TTime> =\n    | EasingFunction\n    | SingleAnimationDirection\n    | SingleAnimationFillMode\n    | SingleAnimationTimeline\n    | TTime\n    | \"infinite\"\n    | \"none\"\n    | \"paused\"\n    | \"running\"\n    | (string & {})\n    | (number & {});\n\n  type SingleAnimationComposition = \"accumulate\" | \"add\" | \"replace\";\n\n  type SingleAnimationDirection = \"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\";\n\n  type SingleAnimationFillMode = \"backwards\" | \"both\" | \"forwards\" | \"none\";\n\n  type SingleAnimationTimeline = \"auto\" | \"none\" | (string & {});\n\n  type SingleTransition<TTime> = EasingFunction | TTime | \"all\" | \"allow-discrete\" | \"none\" | \"normal\" | (string & {});\n\n  type StepTimingFunction = \"step-end\" | \"step-start\" | (string & {});\n\n  type TimelineRangeName = \"contain\" | \"cover\" | \"entry\" | \"entry-crossing\" | \"exit\" | \"exit-crossing\";\n\n  type TrackBreadth<TLength> = TLength | \"auto\" | \"max-content\" | \"min-content\" | (string & {});\n\n  type ViewportLength<TLength> = TLength | \"auto\" | (string & {});\n\n  type VisualBox = \"border-box\" | \"content-box\" | \"padding-box\";\n}\n",
      "solid-js@1.8.16/types/index.d.ts": "export {\n  $DEVCOMP,\n  $PROXY,\n  $TRACK,\n  batch,\n  catchError,\n  children,\n  createComputed,\n  createContext,\n  createDeferred,\n  createEffect,\n  createMemo,\n  createReaction,\n  createRenderEffect,\n  createResource,\n  createRoot,\n  createSelector,\n  createSignal,\n  enableExternalSource,\n  enableScheduling,\n  equalFn,\n  getListener,\n  getOwner,\n  on,\n  onCleanup,\n  onError,\n  onMount,\n  runWithOwner,\n  startTransition,\n  untrack,\n  useContext,\n  useTransition\n} from \"./reactive/signal.d.ts\";\nexport type {\n  Accessor,\n  AccessorArray,\n  ChildrenReturn,\n  Context,\n  ContextProviderComponent,\n  EffectFunction,\n  EffectOptions,\n  InitializedResource,\n  InitializedResourceOptions,\n  InitializedResourceReturn,\n  MemoOptions,\n  NoInfer,\n  OnEffectFunction,\n  OnOptions,\n  Owner,\n  ResolvedChildren,\n  ResolvedJSXElement,\n  Resource,\n  ResourceActions,\n  ResourceFetcher,\n  ResourceFetcherInfo,\n  ResourceOptions,\n  ResourceReturn,\n  ResourceSource,\n  ReturnTypes,\n  Setter,\n  Signal,\n  SignalOptions\n} from \"./reactive/signal.d.ts\";\nexport * from \"./reactive/observable.d.ts\";\nexport * from \"./reactive/scheduler.d.ts\";\nexport * from \"./reactive/array.d.ts\";\nexport * from \"./render/index.d.ts\";\nimport type { JSX } from \"./jsx.d.ts\";\ntype JSXElement = JSX.Element;\nexport type { JSXElement, JSX };\nimport { registerGraph, writeSignal } from \"./reactive/signal.d.ts\";\nexport declare const DEV:\n  | {\n      readonly hooks: {\n        afterUpdate: (() => void) | null;\n        afterCreateOwner: ((owner: import(\"./reactive/signal.d.ts\").Owner) => void) | null;\n        afterCreateSignal:\n          | ((signal: import(\"./reactive/signal.d.ts\").SignalState<any>) => void)\n          | null;\n      };\n      readonly writeSignal: typeof writeSignal;\n      readonly registerGraph: typeof registerGraph;\n    }\n  | undefined;\ndeclare global {\n  var Solid$$: boolean;\n}\n",
      "solid-js@1.8.16/web/types/index.d.ts": "import { hydrate as hydrateCore } from \"./client.d.ts\";\nimport { JSX, ComponentProps, ValidComponent } from \"solid-js@1.8.16/types/index.d.ts\";\nexport * from \"./client.d.ts\";\nimport { For, Show, Suspense, SuspenseList, Switch, Match, Index, ErrorBoundary, mergeProps } from \"solid-js@1.8.16/types/index.d.ts\";\nexport * from \"./server-mock.d.ts\";\nexport declare const isServer: boolean;\nexport declare const isDev: boolean;\nexport declare const hydrate: typeof hydrateCore;\n/**\n * Renders components somewhere else in the DOM\n *\n * Useful for inserting modals and tooltips outside of an cropping layout. If no mount point is given, the portal is inserted in document.body; it is wrapped in a `<div>` unless the target is document.head or `isSVG` is true. setting `useShadow` to true places the element in a shadow root to isolate styles.\n *\n * @description https://www.solidjs.com/docs/latest/api#portal\n */\nexport declare function Portal<T extends boolean = false, S extends boolean = false>(props: {\n    mount?: Node;\n    useShadow?: T;\n    isSVG?: S;\n    ref?: (S extends true ? SVGGElement : HTMLDivElement) | ((el: (T extends true ? {\n        readonly shadowRoot: ShadowRoot;\n    } : {}) & (S extends true ? SVGGElement : HTMLDivElement)) => void);\n    children: JSX.Element;\n}): Text;\nexport type DynamicProps<T extends ValidComponent, P = ComponentProps<T>> = {\n    [K in keyof P]: P[K];\n} & {\n    component: T | undefined;\n};\n/**\n * Renders an arbitrary custom or native component and passes the other props\n * ```typescript\n * <Dynamic component={multiline() ? 'textarea' : 'input'} value={value()} />\n * ```\n * @description https://www.solidjs.com/docs/latest/api#dynamic\n */\nexport declare function Dynamic<T extends ValidComponent>(props: DynamicProps<T>): JSX.Element;\n",
      "solid-js@1.8.16/types/reactive/signal.d.ts": "/**\nThe MIT License (MIT)\n\nCopyright (c) 2017 Adam Haile\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nimport { requestCallback } from \"./scheduler.d.ts\";\nimport type { JSX } from \"../jsx.d.ts\";\nimport type { FlowComponent } from \"../render/index.d.ts\";\nexport declare const equalFn: <T>(a: T, b: T) => boolean;\nexport declare const $PROXY: unique symbol;\nexport declare const $TRACK: unique symbol;\nexport declare const $DEVCOMP: unique symbol;\nexport declare var Owner: Owner | null;\nexport declare let Transition: TransitionState | null;\n/** Object storing callbacks for debugging during development */\nexport declare const DevHooks: {\n  afterUpdate: (() => void) | null;\n  afterCreateOwner: ((owner: Owner) => void) | null;\n  afterCreateSignal: ((signal: SignalState<any>) => void) | null;\n};\nexport type ComputationState = 0 | 1 | 2;\nexport interface SourceMapValue {\n  value: unknown;\n  name?: string;\n  graph?: Owner;\n}\nexport interface SignalState<T> extends SourceMapValue {\n  value: T;\n  observers: Computation<any>[] | null;\n  observerSlots: number[] | null;\n  tValue?: T;\n  comparator?: (prev: T, next: T) => boolean;\n}\nexport interface Owner {\n  owned: Computation<any>[] | null;\n  cleanups: (() => void)[] | null;\n  owner: Owner | null;\n  context: any | null;\n  sourceMap?: SourceMapValue[];\n  name?: string;\n}\nexport interface Computation<Init, Next extends Init = Init> extends Owner {\n  fn: EffectFunction<Init, Next>;\n  state: ComputationState;\n  tState?: ComputationState;\n  sources: SignalState<Next>[] | null;\n  sourceSlots: number[] | null;\n  value?: Init;\n  updatedAt: number | null;\n  pure: boolean;\n  user?: boolean;\n  suspense?: SuspenseContextType;\n}\nexport interface TransitionState {\n  sources: Set<SignalState<any>>;\n  effects: Computation<any>[];\n  promises: Set<Promise<any>>;\n  disposed: Set<Computation<any>>;\n  queue: Set<Computation<any>>;\n  scheduler?: (fn: () => void) => unknown;\n  running: boolean;\n  done?: Promise<void>;\n  resolve?: () => void;\n}\ntype ExternalSourceFactory = <Prev, Next extends Prev = Prev>(\n  fn: EffectFunction<Prev, Next>,\n  trigger: () => void\n) => ExternalSource;\nexport interface ExternalSource {\n  track: EffectFunction<any, any>;\n  dispose: () => void;\n}\nexport type RootFunction<T> = (dispose: () => void) => T;\n/**\n * Creates a new non-tracked reactive context that doesn't auto-dispose\n *\n * @param fn a function in which the reactive state is scoped\n * @param detachedOwner optional reactive context to bind the root to\n * @returns the output of `fn`.\n *\n * @description https://www.solidjs.com/docs/latest/api#createroot\n */\nexport declare function createRoot<T>(fn: RootFunction<T>, detachedOwner?: typeof Owner): T;\nexport type Accessor<T> = () => T;\nexport type Setter<in out T> = {\n  <U extends T>(...args: undefined extends T ? [] : [value: (prev: T) => U]): undefined extends T\n    ? undefined\n    : U;\n  <U extends T>(value: (prev: T) => U): U;\n  <U extends T>(value: Exclude<U, Function>): U;\n  <U extends T>(value: Exclude<U, Function> | ((prev: T) => U)): U;\n};\nexport type Signal<T> = [get: Accessor<T>, set: Setter<T>];\nexport interface SignalOptions<T> extends MemoOptions<T> {\n  internal?: boolean;\n}\n/**\n * Creates a simple reactive state with a getter and setter\n * ```typescript\n * const [state: Accessor<T>, setState: Setter<T>] = createSignal<T>(\n *  value: T,\n *  options?: { name?: string, equals?: false | ((prev: T, next: T) => boolean) }\n * )\n * ```\n * @param value initial value of the state; if empty, the state's type will automatically extended with undefined; otherwise you need to extend the type manually if you want setting to undefined not be an error\n * @param options optional object with a name for debugging purposes and equals, a comparator function for the previous and next value to allow fine-grained control over the reactivity\n *\n * @returns ```typescript\n * [state: Accessor<T>, setState: Setter<T>]\n * ```\n * * the Accessor is merely a function that returns the current value and registers each call to the reactive root\n * * the Setter is a function that allows directly setting or mutating the value:\n * ```typescript\n * const [count, setCount] = createSignal(0);\n * setCount(count => count + 1);\n * ```\n *\n * @description https://www.solidjs.com/docs/latest/api#createsignal\n */\nexport declare function createSignal<T>(): Signal<T | undefined>;\nexport declare function createSignal<T>(value: T, options?: SignalOptions<T>): Signal<T>;\nexport interface BaseOptions {\n  name?: string;\n}\nexport type NoInfer<T extends any> = [T][T extends any ? 0 : never];\nexport interface EffectOptions extends BaseOptions {}\nexport type EffectFunction<Prev, Next extends Prev = Prev> = (v: Prev) => Next;\n/**\n * Creates a reactive computation that runs immediately before render, mainly used to write to other reactive primitives\n * ```typescript\n * export function createComputed<Next, Init = Next>(\n *   fn: (v: Init | Next) => Next,\n *   value?: Init,\n *   options?: { name?: string }\n * ): void;\n * ```\n * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation\n * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument\n * @param options allows to set a name in dev mode for debugging purposes\n *\n * @description https://www.solidjs.com/docs/latest/api#createcomputed\n */\nexport declare function createComputed<Next>(\n  fn: EffectFunction<undefined | NoInfer<Next>, Next>\n): void;\nexport declare function createComputed<Next, Init = Next>(\n  fn: EffectFunction<Init | Next, Next>,\n  value: Init,\n  options?: EffectOptions\n): void;\n/**\n * Creates a reactive computation that runs during the render phase as DOM elements are created and updated but not necessarily connected\n * ```typescript\n * export function createRenderEffect<T>(\n *   fn: (v: T) => T,\n *   value?: T,\n *   options?: { name?: string }\n * ): void;\n * ```\n * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation\n * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument\n * @param options allows to set a name in dev mode for debugging purposes\n *\n * @description https://www.solidjs.com/docs/latest/api#createrendereffect\n */\nexport declare function createRenderEffect<Next>(\n  fn: EffectFunction<undefined | NoInfer<Next>, Next>\n): void;\nexport declare function createRenderEffect<Next, Init = Next>(\n  fn: EffectFunction<Init | Next, Next>,\n  value: Init,\n  options?: EffectOptions\n): void;\n/**\n * Creates a reactive computation that runs after the render phase\n * ```typescript\n * export function createEffect<T>(\n *   fn: (v: T) => T,\n *   value?: T,\n *   options?: { name?: string }\n * ): void;\n * ```\n * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation\n * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument\n * @param options allows to set a name in dev mode for debugging purposes\n *\n * @description https://www.solidjs.com/docs/latest/api#createeffect\n */\nexport declare function createEffect<Next>(\n  fn: EffectFunction<undefined | NoInfer<Next>, Next>\n): void;\nexport declare function createEffect<Next, Init = Next>(\n  fn: EffectFunction<Init | Next, Next>,\n  value: Init,\n  options?: EffectOptions & {\n    render?: boolean;\n  }\n): void;\n/**\n * Creates a reactive computation that runs after the render phase with flexible tracking\n * ```typescript\n * export function createReaction(\n *   onInvalidate: () => void,\n *   options?: { name?: string }\n * ): (fn: () => void) => void;\n * ```\n * @param invalidated a function that is called when tracked function is invalidated.\n * @param options allows to set a name in dev mode for debugging purposes\n *\n * @description https://www.solidjs.com/docs/latest/api#createreaction\n */\nexport declare function createReaction(\n  onInvalidate: () => void,\n  options?: EffectOptions\n): (tracking: () => void) => void;\nexport interface Memo<Prev, Next = Prev> extends SignalState<Next>, Computation<Next> {\n  value: Next;\n  tOwned?: Computation<Prev | Next, Next>[];\n}\nexport interface MemoOptions<T> extends EffectOptions {\n  equals?: false | ((prev: T, next: T) => boolean);\n}\n/**\n * Creates a readonly derived reactive memoized signal\n * ```typescript\n * export function createMemo<T>(\n *   fn: (v: T) => T,\n *   value?: T,\n *   options?: { name?: string, equals?: false | ((prev: T, next: T) => boolean) }\n * ): () => T;\n * ```\n * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation\n * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument\n * @param options allows to set a name in dev mode for debugging purposes and use a custom comparison function in equals\n *\n * @description https://www.solidjs.com/docs/latest/api#creatememo\n */\nexport declare function createMemo<Next extends Prev, Prev = Next>(\n  fn: EffectFunction<undefined | NoInfer<Prev>, Next>\n): Accessor<Next>;\nexport declare function createMemo<Next extends Prev, Init = Next, Prev = Next>(\n  fn: EffectFunction<Init | Prev, Next>,\n  value: Init,\n  options?: MemoOptions<Next>\n): Accessor<Next>;\ninterface Unresolved {\n  state: \"unresolved\";\n  loading: false;\n  error: undefined;\n  latest: undefined;\n  (): undefined;\n}\ninterface Pending {\n  state: \"pending\";\n  loading: true;\n  error: undefined;\n  latest: undefined;\n  (): undefined;\n}\ninterface Ready<T> {\n  state: \"ready\";\n  loading: false;\n  error: undefined;\n  latest: T;\n  (): T;\n}\ninterface Refreshing<T> {\n  state: \"refreshing\";\n  loading: true;\n  error: undefined;\n  latest: T;\n  (): T;\n}\ninterface Errored {\n  state: \"errored\";\n  loading: false;\n  error: any;\n  latest: never;\n  (): never;\n}\nexport type Resource<T> = Unresolved | Pending | Ready<T> | Refreshing<T> | Errored;\nexport type InitializedResource<T> = Ready<T> | Refreshing<T> | Errored;\nexport type ResourceActions<T, R = unknown> = {\n  mutate: Setter<T>;\n  refetch: (info?: R) => T | Promise<T> | undefined | null;\n};\nexport type ResourceSource<S> = S | false | null | undefined | (() => S | false | null | undefined);\nexport type ResourceFetcher<S, T, R = unknown> = (\n  k: S,\n  info: ResourceFetcherInfo<T, R>\n) => T | Promise<T>;\nexport type ResourceFetcherInfo<T, R = unknown> = {\n  value: T | undefined;\n  refetching: R | boolean;\n};\nexport type ResourceOptions<T, S = unknown> = {\n  initialValue?: T;\n  name?: string;\n  deferStream?: boolean;\n  ssrLoadFrom?: \"initial\" | \"server\";\n  storage?: (init: T | undefined) => [Accessor<T | undefined>, Setter<T | undefined>];\n  onHydrated?: (\n    k: S | undefined,\n    info: {\n      value: T | undefined;\n    }\n  ) => void;\n};\nexport type InitializedResourceOptions<T, S = unknown> = ResourceOptions<T, S> & {\n  initialValue: T;\n};\nexport type ResourceReturn<T, R = unknown> = [Resource<T>, ResourceActions<T | undefined, R>];\nexport type InitializedResourceReturn<T, R = unknown> = [\n  InitializedResource<T>,\n  ResourceActions<T, R>\n];\n/**\n * Creates a resource that wraps a repeated promise in a reactive pattern:\n * ```typescript\n * // Without source\n * const [resource, { mutate, refetch }] = createResource(fetcher, options);\n * // With source\n * const [resource, { mutate, refetch }] = createResource(source, fetcher, options);\n * ```\n * @param source - reactive data function which has its non-nullish and non-false values passed to the fetcher, optional\n * @param fetcher - function that receives the source (true if source not provided), the last or initial value, and whether the resource is being refetched, and returns a value or a Promise:\n * ```typescript\n * const fetcher: ResourceFetcher<S, T, R> = (\n *   sourceOutput: S,\n *   info: { value: T | undefined, refetching: R | boolean }\n * ) => T | Promise<T>;\n * ```\n * @param options - an optional object with the initialValue and the name (for debugging purposes); see {@link ResourceOptions}\n *\n * @returns ```typescript\n * [Resource<T>, { mutate: Setter<T>, refetch: () => void }]\n * ```\n *\n * * Setting an `initialValue` in the options will mean that both the prev() accessor and the resource should never return undefined (if that is wanted, you need to extend the type with undefined)\n * * `mutate` allows to manually overwrite the resource without calling the fetcher\n * * `refetch` will re-run the fetcher without changing the source, and if called with a value, that value will be passed to the fetcher via the `refetching` property on the fetcher's second parameter\n *\n * @description https://www.solidjs.com/docs/latest/api#createresource\n */\nexport declare function createResource<T, R = unknown>(\n  fetcher: ResourceFetcher<true, T, R>,\n  options: InitializedResourceOptions<NoInfer<T>, true>\n): InitializedResourceReturn<T, R>;\nexport declare function createResource<T, R = unknown>(\n  fetcher: ResourceFetcher<true, T, R>,\n  options?: ResourceOptions<NoInfer<T>, true>\n): ResourceReturn<T, R>;\nexport declare function createResource<T, S, R = unknown>(\n  source: ResourceSource<S>,\n  fetcher: ResourceFetcher<S, T, R>,\n  options: InitializedResourceOptions<NoInfer<T>, S>\n): InitializedResourceReturn<T, R>;\nexport declare function createResource<T, S, R = unknown>(\n  source: ResourceSource<S>,\n  fetcher: ResourceFetcher<S, T, R>,\n  options?: ResourceOptions<NoInfer<T>, S>\n): ResourceReturn<T, R>;\nexport interface DeferredOptions<T> {\n  equals?: false | ((prev: T, next: T) => boolean);\n  name?: string;\n  timeoutMs?: number;\n}\n/**\n * Creates a reactive computation that only runs and notifies the reactive context when the browser is idle\n * ```typescript\n * export function createDeferred<T>(\n *   fn: (v: T) => T,\n *   options?: { timeoutMs?: number, name?: string, equals?: false | ((prev: T, next: T) => boolean) }\n * ): () => T);\n * ```\n * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation\n * @param options allows to set the timeout in milliseconds, use a custom comparison function and set a name in dev mode for debugging purposes\n *\n * @description https://www.solidjs.com/docs/latest/api#createdeferred\n */\nexport declare function createDeferred<T>(\n  source: Accessor<T>,\n  options?: DeferredOptions<T>\n): Accessor<T>;\nexport type EqualityCheckerFunction<T, U> = (a: U, b: T) => boolean;\n/**\n * Creates a conditional signal that only notifies subscribers when entering or exiting their key matching the value\n * ```typescript\n * export function createSelector<T, U>(\n *   source: () => T\n *   fn: (a: U, b: T) => boolean,\n *   options?: { name?: string }\n * ): (k: U) => boolean;\n * ```\n * @param source\n * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation\n * @param options allows to set a name in dev mode for debugging purposes, optional\n *\n * ```typescript\n * const isSelected = createSelector(selectedId);\n * <For each={list()}>\n *   {(item) => <li classList={{ active: isSelected(item.id) }}>{item.name}</li>}\n * </For>\n * ```\n *\n * This makes the operation O(2) instead of O(n).\n *\n * @description https://www.solidjs.com/docs/latest/api#createselector\n */\nexport declare function createSelector<T, U = T>(\n  source: Accessor<T>,\n  fn?: EqualityCheckerFunction<T, U>,\n  options?: BaseOptions\n): (key: U) => boolean;\n/**\n * Holds changes inside the block before the reactive context is updated\n * @param fn wraps the reactive updates that should be batched\n * @returns the return value from `fn`\n *\n * @description https://www.solidjs.com/docs/latest/api#batch\n */\nexport declare function batch<T>(fn: Accessor<T>): T;\n/**\n * Ignores tracking context inside its scope\n * @param fn the scope that is out of the tracking context\n * @returns the return value of `fn`\n *\n * @description https://www.solidjs.com/docs/latest/api#untrack\n */\nexport declare function untrack<T>(fn: Accessor<T>): T;\n/** @deprecated */\nexport type ReturnTypes<T> = T extends readonly Accessor<unknown>[]\n  ? {\n      [K in keyof T]: T[K] extends Accessor<infer I> ? I : never;\n    }\n  : T extends Accessor<infer I>\n  ? I\n  : never;\nexport type AccessorArray<T> = [\n  ...Extract<\n    {\n      [K in keyof T]: Accessor<T[K]>;\n    },\n    readonly unknown[]\n  >\n];\nexport type OnEffectFunction<S, Prev, Next extends Prev = Prev> = (\n  input: S,\n  prevInput: S | undefined,\n  prev: Prev\n) => Next;\nexport interface OnOptions {\n  defer?: boolean;\n}\n/**\n * Makes dependencies of a computation explicit\n * ```typescript\n * export function on<S, U>(\n *   deps: Accessor<S> | AccessorArray<S>,\n *   fn: (input: S, prevInput: S | undefined, prevValue: U | undefined) => U,\n *   options?: { defer?: boolean } = {}\n * ): (prevValue: U | undefined) => U;\n * ```\n * @param deps list of reactive dependencies or a single reactive dependency\n * @param fn computation on input; the current previous content(s) of input and the previous value are given as arguments and it returns a new value\n * @param options optional, allows deferred computation until at the end of the next change\n * @returns an effect function that is passed into createEffect. For example:\n *\n * ```typescript\n * createEffect(on(a, (v) => console.log(v, b())));\n *\n * // is equivalent to:\n * createEffect(() => {\n *   const v = a();\n *   untrack(() => console.log(v, b()));\n * });\n * ```\n *\n * @description https://www.solidjs.com/docs/latest/api#on\n */\nexport declare function on<S, Next extends Prev, Prev = Next>(\n  deps: AccessorArray<S> | Accessor<S>,\n  fn: OnEffectFunction<S, undefined | NoInfer<Prev>, Next>,\n  options?: OnOptions & {\n    defer?: false;\n  }\n): EffectFunction<undefined | NoInfer<Next>, NoInfer<Next>>;\nexport declare function on<S, Next extends Prev, Prev = Next>(\n  deps: AccessorArray<S> | Accessor<S>,\n  fn: OnEffectFunction<S, undefined | NoInfer<Prev>, Next>,\n  options:\n    | OnOptions\n    | {\n        defer: true;\n      }\n): EffectFunction<undefined | NoInfer<Next>>;\n/**\n * Runs an effect only after initial render on mount\n * @param fn an effect that should run only once on mount\n *\n * @description https://www.solidjs.com/docs/latest/api#onmount\n */\nexport declare function onMount(fn: () => void): void;\n/**\n * Runs an effect once before the reactive scope is disposed\n * @param fn an effect that should run only once on cleanup\n *\n * @returns the same {@link fn} function that was passed in\n *\n * @description https://www.solidjs.com/docs/latest/api#oncleanup\n */\nexport declare function onCleanup<T extends () => any>(fn: T): T;\n/**\n * Runs an effect whenever an error is thrown within the context of the child scopes\n * @param fn boundary for the error\n * @param handler an error handler that receives the error\n *\n * * If the error is thrown again inside the error handler, it will trigger the next available parent handler\n *\n * @description https://www.solidjs.com/docs/latest/api#catcherror\n */\nexport declare function catchError<T>(fn: () => T, handler: (err: Error) => void): T | undefined;\nexport declare function getListener(): Computation<any, any> | null;\nexport declare function getOwner(): Owner | null;\nexport declare function runWithOwner<T>(o: typeof Owner, fn: () => T): T | undefined;\nexport declare function enableScheduling(scheduler?: typeof requestCallback): void;\n/**\n * ```typescript\n * export function startTransition(fn: () => void) => Promise<void>\n * ```\n *\n * @description https://www.solidjs.com/docs/latest/api#usetransition\n */\nexport declare function startTransition(fn: () => unknown): Promise<void>;\nexport type Transition = [Accessor<boolean>, (fn: () => void) => Promise<void>];\n/**\n * ```typescript\n * export function useTransition(): [\n *   () => boolean,\n *   (fn: () => void, cb?: () => void) => void\n * ];\n * @returns a tuple; first value is an accessor if the transition is pending and a callback to start the transition\n *\n * @description https://www.solidjs.com/docs/latest/api#usetransition\n */\nexport declare function useTransition(): Transition;\nexport declare function resumeEffects(e: Computation<any>[]): void;\nexport interface DevComponent<T> extends Memo<unknown> {\n  props: T;\n  name: string;\n  component: (props: T) => unknown;\n}\nexport declare function devComponent<P, V>(Comp: (props: P) => V, props: P): V;\nexport declare function registerGraph(value: SourceMapValue): void;\nexport type ContextProviderComponent<T> = FlowComponent<{\n  value: T;\n}>;\nexport interface Context<T> {\n  id: symbol;\n  Provider: ContextProviderComponent<T>;\n  defaultValue: T;\n}\n/**\n * Creates a Context to handle a state scoped for the children of a component\n * ```typescript\n * interface Context<T> {\n *   id: symbol;\n *   Provider: FlowComponent<{ value: T }>;\n *   defaultValue: T;\n * }\n * export function createContext<T>(\n *   defaultValue?: T,\n *   options?: { name?: string }\n * ): Context<T | undefined>;\n * ```\n * @param defaultValue optional default to inject into context\n * @param options allows to set a name in dev mode for debugging purposes\n * @returns The context that contains the Provider Component and that can be used with `useContext`\n *\n * @description https://www.solidjs.com/docs/latest/api#createcontext\n */\nexport declare function createContext<T>(\n  defaultValue?: undefined,\n  options?: EffectOptions\n): Context<T | undefined>;\nexport declare function createContext<T>(defaultValue: T, options?: EffectOptions): Context<T>;\n/**\n * Uses a context to receive a scoped state from a parent's Context.Provider\n *\n * @param context Context object made by `createContext`\n * @returns the current or `defaultValue`, if present\n *\n * @description https://www.solidjs.com/docs/latest/api#usecontext\n */\nexport declare function useContext<T>(context: Context<T>): T;\nexport type ResolvedJSXElement = Exclude<JSX.Element, JSX.ArrayElement>;\nexport type ResolvedChildren = ResolvedJSXElement | ResolvedJSXElement[];\nexport type ChildrenReturn = Accessor<ResolvedChildren> & {\n  toArray: () => ResolvedJSXElement[];\n};\n/**\n * Resolves child elements to help interact with children\n *\n * @param fn an accessor for the children\n * @returns a accessor of the same children, but resolved\n *\n * @description https://www.solidjs.com/docs/latest/api#children\n */\nexport declare function children(fn: Accessor<JSX.Element>): ChildrenReturn;\nexport type SuspenseContextType = {\n  increment?: () => void;\n  decrement?: () => void;\n  inFallback?: () => boolean;\n  effects?: Computation<any>[];\n  resolved?: boolean;\n};\ntype SuspenseContext = Context<SuspenseContextType | undefined> & {\n  active?(): boolean;\n  increment?(): void;\n  decrement?(): void;\n};\ndeclare let SuspenseContext: SuspenseContext;\nexport declare function getSuspenseContext(): SuspenseContext;\nexport declare function enableExternalSource(\n  factory: ExternalSourceFactory,\n  untrack?: <V>(fn: () => V) => V\n): void;\nexport declare function readSignal(this: SignalState<any> | Memo<any>): any;\nexport declare function writeSignal(\n  node: SignalState<any> | Memo<any>,\n  value: any,\n  isComp?: boolean\n): any;\n/**\n * @deprecated since version 1.7.0 and will be removed in next major - use catchError instead\n * onError - run an effect whenever an error is thrown within the context of the child scopes\n * @param fn an error handler that receives the error\n *\n * * If the error is thrown again inside the error handler, it will trigger the next available parent handler\n *\n * @description https://www.solidjs.com/docs/latest/api#onerror\n */\nexport declare function onError(fn: (err: Error) => void): void;\nexport {};\n",
      "solid-js@1.8.16/types/reactive/observable.d.ts": "import { Accessor, Setter } from \"./signal.d.ts\";\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\ninterface Observable<T> {\n  subscribe(observer: ObservableObserver<T>): {\n    unsubscribe(): void;\n  };\n  [Symbol.observable](): Observable<T>;\n}\nexport type ObservableObserver<T> =\n  | ((v: T) => void)\n  | {\n      next?: (v: T) => void;\n      error?: (v: any) => void;\n      complete?: (v: boolean) => void;\n    };\n/**\n * Creates a simple observable from a signal's accessor to be used with the `from` operator of observable libraries like e.g. rxjs\n * ```typescript\n * import { from } from \"rxjs\";\n * const [s, set] = createSignal(0);\n * const obsv$ = from(observable(s));\n * obsv$.subscribe((v) => console.log(v));\n * ```\n * description https://www.solidjs.com/docs/latest/api#observable\n */\nexport declare function observable<T>(input: Accessor<T>): Observable<T>;\nexport declare function from<T>(\n  producer:\n    | ((setter: Setter<T | undefined>) => () => void)\n    | {\n        subscribe: (fn: (v: T) => void) =>\n          | (() => void)\n          | {\n              unsubscribe: () => void;\n            };\n      }\n): Accessor<T | undefined>;\nexport {};\n",
      "solid-js@1.8.16/types/reactive/scheduler.d.ts": "export interface Task {\n  id: number;\n  fn: ((didTimeout: boolean) => void) | null;\n  startTime: number;\n  expirationTime: number;\n}\nexport declare function requestCallback(\n  fn: () => void,\n  options?: {\n    timeout: number;\n  }\n): Task;\nexport declare function cancelCallback(task: Task): void;\n",
      "solid-js@1.8.16/types/reactive/array.d.ts": "import { Accessor } from \"./signal.d.ts\";\n/**\nThe MIT License (MIT)\n\nCopyright (c) 2017 Adam Haile\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n/**\n * Reactively transforms an array with a callback function - underlying helper for the `<For>` control flow\n *\n * similar to `Array.prototype.map`, but gets the index as accessor, transforms only values that changed and returns an accessor and reactively tracks changes to the list.\n *\n * @description https://www.solidjs.com/docs/latest/api#maparray\n */\nexport declare function mapArray<T, U>(\n  list: Accessor<readonly T[] | undefined | null | false>,\n  mapFn: (v: T, i: Accessor<number>) => U,\n  options?: {\n    fallback?: Accessor<any>;\n  }\n): () => U[];\n/**\n * Reactively maps arrays by index instead of value - underlying helper for the `<Index>` control flow\n *\n * similar to `Array.prototype.map`, but gets the value as an accessor, transforms only changed items of the original arrays anew and returns an accessor.\n *\n * @description https://www.solidjs.com/docs/latest/api#indexarray\n */\nexport declare function indexArray<T, U>(\n  list: Accessor<readonly T[] | undefined | null | false>,\n  mapFn: (v: Accessor<T>, i: number) => U,\n  options?: {\n    fallback?: Accessor<any>;\n  }\n): () => U[];\n",
      "solid-js@1.8.16/types/render/index.d.ts": "export * from \"./component.d.ts\";\nexport * from \"./flow.d.ts\";\nexport * from \"./Suspense.d.ts\";\nexport { sharedConfig } from \"./hydration.d.ts\";\n",
      "solid-js@1.8.16/web/types/client.d.ts": "import { JSX } from \"./jsx.d.ts\";\nexport const Aliases: Record<string, string>;\nexport const Properties: Set<string>;\nexport const ChildProperties: Set<string>;\nexport const DelegatedEvents: Set<string>;\nexport const DOMElements: Set<string>;\nexport const SVGElements: Set<string>;\nexport const SVGNamespace: Record<string, string>;\nexport function getPropAlias(prop: string, tagName: string): string | undefined;\n\ntype MountableElement = Element | Document | ShadowRoot | DocumentFragment | Node;\nexport function render(code: () => JSX.Element, element: MountableElement): () => void;\nexport function template(html: string, isCE?: boolean, isSVG?: boolean): () => Element;\nexport function effect<T>(fn: (prev?: T) => T, init?: T): void;\nexport function memo<T>(fn: () => T, equal: boolean): () => T;\nexport function untrack<T>(fn: () => T): T;\nexport function insert<T>(\n  parent: MountableElement,\n  accessor: (() => T) | T,\n  marker?: Node | null,\n  init?: JSX.Element\n): JSX.Element;\nexport function createComponent<T>(Comp: (props: T) => JSX.Element, props: T): JSX.Element;\nexport function delegateEvents(eventNames: string[], d?: Document): void;\nexport function clearDelegatedEvents(d?: Document): void;\nexport function spread<T>(\n  node: Element,\n  accessor: (() => T) | T,\n  isSVG?: Boolean,\n  skipChildren?: Boolean\n): void;\nexport function assign(node: Element, props: any, isSVG?: Boolean, skipChildren?: Boolean): void;\nexport function setAttribute(node: Element, name: string, value: string): void;\nexport function setAttributeNS(node: Element, namespace: string, name: string, value: string): void;\nexport function className(node: Element, value: string): void;\nexport function setProperty(node: Element, name: string, value: any): void;\nexport function addEventListener(\n  node: Element,\n  name: string,\n  handler: () => void,\n  delegate: boolean\n): void;\nexport function classList(\n  node: Element,\n  value: { [k: string]: boolean },\n  prev?: { [k: string]: boolean }\n): { [k: string]: boolean };\nexport function style(\n  node: Element,\n  value: { [k: string]: string },\n  prev?: { [k: string]: string }\n): void;\nexport function getOwner(): unknown;\nexport function mergeProps(...sources: unknown[]): unknown;\nexport function dynamicProperty(props: unknown, key: string): unknown;\n\nexport function hydrate(\n  fn: () => JSX.Element,\n  node: MountableElement,\n  options?: { renderId?: string; owner?: unknown }\n): () => void;\nexport function getHydrationKey(): string;\nexport function getNextElement(template?: HTMLTemplateElement): Element;\nexport function getNextMatch(start: Node, elementName: string): Element;\nexport function getNextMarker(start: Node): [Node, Array<Node>];\nexport function useAssets(fn: () => JSX.Element): void;\nexport function getAssets(): string;\nexport function HydrationScript(): JSX.Element;\nexport function generateHydrationScript(): string;\nexport function Assets(props: { children?: JSX.Element }): JSX.Element;\nexport function Hydration(props: { children?: JSX.Element }): JSX.Element;\nexport function NoHydration(props: { children?: JSX.Element }): JSX.Element;\nexport interface RequestEvent {\n  request: Request;\n}\nexport declare const RequestContext: unique symbol;\nexport function getRequestEvent(): RequestEvent | undefined;\n",
      "solid-js@1.8.16/web/types/server-mock.d.ts": "export declare function renderToString<T>(\n  fn: () => T,\n  options?: {\n    nonce?: string;\n    renderId?: string;\n  }\n): string;\nexport declare function renderToStringAsync<T>(\n  fn: () => T,\n  options?: {\n    timeoutMs?: number;\n    nonce?: string;\n    renderId?: string;\n  }\n): Promise<string>;\nexport declare function renderToStream<T>(\n  fn: () => T,\n  options?: {\n    nonce?: string;\n    renderId?: string;\n    onCompleteShell?: (info: { write: (v: string) => void }) => void;\n    onCompleteAll?: (info: { write: (v: string) => void }) => void;\n  }\n): {\n  pipe: (writable: { write: (v: string) => void }) => void;\n  pipeTo: (writable: WritableStream) => void;\n};\nexport declare function ssr(\n  template: string[] | string,\n  ...nodes: any[]\n): {\n  t: string;\n};\nexport declare function ssrElement(\n  name: string,\n  props: any,\n  children: any,\n  needsId: boolean\n): {\n  t: string;\n};\nexport declare function ssrClassList(value: { [k: string]: boolean }): string;\nexport declare function ssrStyle(value: { [k: string]: string }): string;\nexport declare function ssrAttribute(key: string, value: boolean): string;\nexport declare function ssrHydrationKey(): string;\nexport declare function resolveSSRNode(node: any): string;\nexport declare function escape(html: string): string;\n/**\n * @deprecated Replaced by ssrElement\n */\nexport declare function ssrSpread(props: any, isSVG: boolean, skipChildren: boolean): void;\nexport type LegacyResults = {\n  startWriting: () => void;\n};\n/**\n * @deprecated Replaced by renderToStream\n */\nexport declare function pipeToWritable<T>(\n  fn: () => T,\n  writable: WritableStream,\n  options?: {\n    nonce?: string;\n    onReady?: (res: LegacyResults) => void;\n    onCompleteAll?: () => void;\n  }\n): void;\n/**\n * @deprecated Replaced by renderToStream\n */\nexport declare function pipeToNodeWritable<T>(\n  fn: () => T,\n  writable: {\n    write: (v: string) => void;\n  },\n  options?: {\n    nonce?: string;\n    onReady?: (res: LegacyResults) => void;\n    onCompleteAll?: () => void;\n  }\n): void;\n",
      "solid-js@1.8.16/types/render/component.d.ts": "import type { JSX } from \"../jsx.d.ts\";\nexport declare function enableHydration(): void;\n/**\n * A general `Component` has no implicit `children` prop.  If desired, you can\n * specify one as in `Component<{name: String, children: JSX.Element}>`.\n */\nexport type Component<P = {}> = (props: P) => JSX.Element;\n/**\n * Extend props to forbid the `children` prop.\n * Use this to prevent accidentally passing `children` to components that\n * would silently throw them away.\n */\nexport type VoidProps<P = {}> = P & {\n  children?: never;\n};\n/**\n * `VoidComponent` forbids the `children` prop.\n * Use this to prevent accidentally passing `children` to components that\n * would silently throw them away.\n */\nexport type VoidComponent<P = {}> = Component<VoidProps<P>>;\n/**\n * Extend props to allow an optional `children` prop with the usual\n * type in JSX, `JSX.Element` (which allows elements, arrays, functions, etc.).\n * Use this for components that you want to accept children.\n */\nexport type ParentProps<P = {}> = P & {\n  children?: JSX.Element;\n};\n/**\n * `ParentComponent` allows an optional `children` prop with the usual\n * type in JSX, `JSX.Element` (which allows elements, arrays, functions, etc.).\n * Use this for components that you want to accept children.\n */\nexport type ParentComponent<P = {}> = Component<ParentProps<P>>;\n/**\n * Extend props to require a `children` prop with the specified type.\n * Use this for components where you need a specific child type,\n * typically a function that receives specific argument types.\n * Note that all JSX <Elements> are of the type `JSX.Element`.\n */\nexport type FlowProps<P = {}, C = JSX.Element> = P & {\n  children: C;\n};\n/**\n * `FlowComponent` requires a `children` prop with the specified type.\n * Use this for components where you need a specific child type,\n * typically a function that receives specific argument types.\n * Note that all JSX <Elements> are of the type `JSX.Element`.\n */\nexport type FlowComponent<P = {}, C = JSX.Element> = Component<FlowProps<P, C>>;\n/** @deprecated: use `ParentProps` instead */\nexport type PropsWithChildren<P = {}> = ParentProps<P>;\nexport type ValidComponent = keyof JSX.IntrinsicElements | Component<any> | (string & {});\n/**\n * Takes the props of the passed component and returns its type\n *\n * @example\n * ComponentProps<typeof Portal> // { mount?: Node; useShadow?: boolean; children: JSX.Element }\n * ComponentProps<'div'> // JSX.HTMLAttributes<HTMLDivElement>\n */\nexport type ComponentProps<T extends ValidComponent> = T extends Component<infer P>\n  ? P\n  : T extends keyof JSX.IntrinsicElements\n  ? JSX.IntrinsicElements[T]\n  : Record<string, unknown>;\n/**\n * Type of `props.ref`, for use in `Component` or `props` typing.\n *\n * @example Component<{ref: Ref<Element>}>\n */\nexport type Ref<T> = T | ((val: T) => void);\nexport declare function createComponent<T>(Comp: Component<T>, props: T): JSX.Element;\ntype DistributeOverride<T, F> = T extends undefined ? F : T;\ntype Override<T, U> = T extends any\n  ? U extends any\n    ? {\n        [K in keyof T]: K extends keyof U ? DistributeOverride<U[K], T[K]> : T[K];\n      } & {\n        [K in keyof U]: K extends keyof T ? DistributeOverride<U[K], T[K]> : U[K];\n      }\n    : T & U\n  : T & U;\ntype OverrideSpread<T, U> = T extends any\n  ? {\n      [K in keyof ({\n        [K in keyof T]: any;\n      } & {\n        [K in keyof U]?: any;\n      } & {\n        [K in U extends any ? keyof U : keyof U]?: any;\n      })]: K extends keyof T\n        ? Exclude<U extends any ? U[K & keyof U] : never, undefined> | T[K]\n        : U extends any\n        ? U[K & keyof U]\n        : never;\n    }\n  : T & U;\ntype Simplify<T> = T extends any\n  ? {\n      [K in keyof T]: T[K];\n    }\n  : T;\ntype _MergeProps<T extends unknown[], Curr = {}> = T extends [\n  infer Next | (() => infer Next),\n  ...infer Rest\n]\n  ? _MergeProps<Rest, Override<Curr, Next>>\n  : T extends [...infer Rest, infer Next | (() => infer Next)]\n  ? Override<_MergeProps<Rest, Curr>, Next>\n  : T extends []\n  ? Curr\n  : T extends (infer I | (() => infer I))[]\n  ? OverrideSpread<Curr, I>\n  : Curr;\nexport type MergeProps<T extends unknown[]> = Simplify<_MergeProps<T>>;\nexport declare function mergeProps<T extends unknown[]>(...sources: T): MergeProps<T>;\nexport type SplitProps<T, K extends (readonly (keyof T)[])[]> = [\n  ...{\n    [P in keyof K]: P extends `${number}`\n      ? Pick<T, Extract<K[P], readonly (keyof T)[]>[number]>\n      : never;\n  },\n  {\n    [P in keyof T as Exclude<P, K[number][number]>]: T[P];\n  }\n];\nexport declare function splitProps<\n  T extends Record<any, any>,\n  K extends [readonly (keyof T)[], ...(readonly (keyof T)[])[]]\n>(props: T, ...keys: K): SplitProps<T, K>;\nexport declare function lazy<T extends Component<any>>(\n  fn: () => Promise<{\n    default: T;\n  }>\n): T & {\n  preload: () => Promise<{\n    default: T;\n  }>;\n};\nexport declare function createUniqueId(): string;\nexport {};\n",
      "solid-js@1.8.16/types/render/flow.d.ts": "import { Accessor } from \"../reactive/signal.d.ts\";\nimport type { JSX } from \"../jsx.d.ts\";\n/**\n * Creates a list elements from a list\n *\n * it receives a map function as its child that receives a list element and an accessor with the index and returns a JSX-Element; if the list is empty, an optional fallback is returned:\n * ```typescript\n * <For each={items} fallback={<div>No items</div>}>\n *   {(item, index) => <div data-index={index()}>{item}</div>}\n * </For>\n * ```\n * If you have a list with fixed indices and changing values, consider using `<Index>` instead.\n *\n * @description https://www.solidjs.com/docs/latest/api#for\n */\nexport declare function For<T extends readonly any[], U extends JSX.Element>(props: {\n  each: T | undefined | null | false;\n  fallback?: JSX.Element;\n  children: (item: T[number], index: Accessor<number>) => U;\n}): JSX.Element;\n/**\n * Non-keyed iteration over a list creating elements from its items\n *\n * To be used if you have a list with fixed indices, but changing values.\n * ```typescript\n * <Index each={items} fallback={<div>No items</div>}>\n *   {(item, index) => <div data-index={index}>{item()}</div>}\n * </Index>\n * ```\n * If you have a list with changing indices, better use `<For>`.\n *\n * @description https://www.solidjs.com/docs/latest/api#index\n */\nexport declare function Index<T extends readonly any[], U extends JSX.Element>(props: {\n  each: T | undefined | null | false;\n  fallback?: JSX.Element;\n  children: (item: Accessor<T[number]>, index: number) => U;\n}): JSX.Element;\ntype RequiredParameter<T> = T extends () => unknown ? never : T;\n/**\n * Conditionally render its children or an optional fallback component\n * @description https://www.solidjs.com/docs/latest/api#show\n */\nexport declare function Show<\n  T,\n  TRenderFunction extends (item: Accessor<NonNullable<T>>) => JSX.Element\n>(props: {\n  when: T | undefined | null | false;\n  keyed?: false;\n  fallback?: JSX.Element;\n  children: JSX.Element | RequiredParameter<TRenderFunction>;\n}): JSX.Element;\nexport declare function Show<\n  T,\n  TRenderFunction extends (item: NonNullable<T>) => JSX.Element\n>(props: {\n  when: T | undefined | null | false;\n  keyed: true;\n  fallback?: JSX.Element;\n  children: JSX.Element | RequiredParameter<TRenderFunction>;\n}): JSX.Element;\n/**\n * Switches between content based on mutually exclusive conditions\n * ```typescript\n * <Switch fallback={<FourOhFour />}>\n *   <Match when={state.route === 'home'}>\n *     <Home />\n *   </Match>\n *   <Match when={state.route === 'settings'}>\n *     <Settings />\n *   </Match>\n * </Switch>\n * ```\n * @description https://www.solidjs.com/docs/latest/api#switchmatch\n */\nexport declare function Switch(props: {\n  fallback?: JSX.Element;\n  children: JSX.Element;\n}): JSX.Element;\nexport type MatchProps<T> = {\n  when: T | undefined | null | false;\n  keyed?: boolean;\n  children: JSX.Element | ((item: NonNullable<T> | Accessor<NonNullable<T>>) => JSX.Element);\n};\n/**\n * Selects a content based on condition when inside a `<Switch>` control flow\n * ```typescript\n * <Match when={condition()}>\n *   <Content/>\n * </Match>\n * ```\n * @description https://www.solidjs.com/docs/latest/api#switchmatch\n */\nexport declare function Match<\n  T,\n  TRenderFunction extends (item: Accessor<NonNullable<T>>) => JSX.Element\n>(props: {\n  when: T | undefined | null | false;\n  keyed?: false;\n  children: JSX.Element | RequiredParameter<TRenderFunction>;\n}): JSX.Element;\nexport declare function Match<\n  T,\n  TRenderFunction extends (item: NonNullable<T>) => JSX.Element\n>(props: {\n  when: T | undefined | null | false;\n  keyed: true;\n  children: JSX.Element | RequiredParameter<TRenderFunction>;\n}): JSX.Element;\nexport declare function resetErrorBoundaries(): void;\n/**\n * Catches uncaught errors inside components and renders a fallback content\n *\n * Also supports a callback form that passes the error and a reset function:\n * ```typescript\n * <ErrorBoundary fallback={\n *   (err, reset) => <div onClick={reset}>Error: {err.toString()}</div>\n * }>\n *   <MyComp />\n * </ErrorBoundary>\n * ```\n * Errors thrown from the fallback can be caught by a parent ErrorBoundary\n *\n * @description https://www.solidjs.com/docs/latest/api#errorboundary\n */\nexport declare function ErrorBoundary(props: {\n  fallback: JSX.Element | ((err: any, reset: () => void) => JSX.Element);\n  children: JSX.Element;\n}): JSX.Element;\nexport {};\n",
      "solid-js@1.8.16/types/render/Suspense.d.ts": "import type { JSX } from \"../jsx.d.ts\";\n/**\n * **[experimental]** Controls the order in which suspended content is rendered\n *\n * @description https://www.solidjs.com/docs/latest/api#suspenselist-experimental\n */\nexport declare function SuspenseList(props: {\n  children: JSX.Element;\n  revealOrder: \"forwards\" | \"backwards\" | \"together\";\n  tail?: \"collapsed\" | \"hidden\";\n}): JSX.Element;\n/**\n * Tracks all resources inside a component and renders a fallback until they are all resolved\n * ```typescript\n * const AsyncComponent = lazy(() => import('./component'));\n *\n * <Suspense fallback={<LoadingIndicator />}>\n *   <AsyncComponent />\n * </Suspense>\n * ```\n * @description https://www.solidjs.com/docs/latest/api#suspense\n */\nexport declare function Suspense(props: {\n  fallback?: JSX.Element;\n  children: JSX.Element;\n}): JSX.Element;\n",
      "solid-js@1.8.16/types/render/hydration.d.ts": "import { Computation } from \"../reactive/signal.d.ts\";\nexport type HydrationContext = {\n  id: string;\n  count: number;\n};\ntype SharedConfig = {\n  context?: HydrationContext;\n  resources?: {\n    [key: string]: any;\n  };\n  load?: (id: string) => Promise<any> | any;\n  has?: (id: string) => boolean;\n  gather?: (key: string) => void;\n  registry?: Map<string, Element>;\n  done?: boolean;\n  count?: number;\n  effects?: Computation<any, any>[];\n};\nexport declare const sharedConfig: SharedConfig;\nexport declare function setHydrateContext(context?: HydrationContext): void;\nexport declare function nextHydrateContext(): HydrationContext | undefined;\nexport {};\n",
      "solid-js@1.8.16/web/types/jsx.d.ts": "export type { JSX } from \"../../types/jsx.d.ts\";\n",
      "@types/canvas-confetti@~1/index.d.ts": "/**\n * `confetti` takes a single optional object. When `window.Promise` is available, it will return a Promise to let you know when it is done.\n * When promises are not available (like in IE), it will return `null`. You can polyfill promises using any of the popular polyfills. You\n * can also provide a custom promise implementation to `confetti` through:\n *\n * ```\n *  const MyPromise = require('some-promise-lib');\n *  const confetti = require('canvas-confetti');\n *  confetti.Promise = MyPromise;\n * ```\n *\n * If you call `confetti` multiple times before it is done, it\n * will return the same promise every time. Internally, the same canvas element will be reused, continuing the existing animation with the\n * new confetti added. The promise returned by each call to `confetti` will resolve once all animations are done.\n */\ndeclare function confetti(options?: confetti.Options): Promise<undefined> | null;\n\ndeclare namespace confetti {\n    /**\n     * You can polyfill promises using any of the popular polyfills. You can also provide a promise implementation to `confetti` through\n     * this property.\n     */\n    let Promise: PromiseLike<undefined> | null | undefined;\n\n    interface PathShape {\n        type: \"path\";\n        path: string;\n        matrix: DOMMatrix;\n    }\n\n    interface BitmapShape {\n        type: \"bitmap\";\n        bitmap: ImageBitmap;\n        matrix: DOMMatrix;\n    }\n\n    type Shape = PathShape | BitmapShape | \"square\" | \"circle\" | \"star\";\n\n    interface Options {\n        /**\n         * The angle in which to launch the confetti, in degrees. 90 is straight up.\n         * @default 90\n         */\n        angle?: number | undefined;\n        /**\n         * An array of color strings, in the HEX format... you know, like #bada55.\n         */\n        colors?: string[] | undefined;\n        /**\n         * How quickly the confetti will lose speed. Keep this number between 0 and 1, otherwise the confetti will gain speed. Better yet,\n         * just never change it.\n         * @default 0.9\n         */\n        decay?: number | undefined;\n        /**\n         * Disables confetti entirely for users that prefer reduced motion. The confetti() promise will resolve immediately in this case.\n         * @default false\n         */\n        disableForReducedMotion?: boolean | undefined;\n        /**\n         * How much to the side the confetti will drift. The default is 0, meaning that they will fall straight down.\n         * Use a negative number for left and positive number for right\n         * @default 0\n         */\n        drift?: number | undefined;\n        /**\n         * How quickly the particles are pulled down. 1 is full gravity, 0.5 is half gravity, etc., but there are no limits.\n         * @default 1\n         */\n        gravity?: number | undefined;\n        /**\n         * Where to start firing confetti from. Feel free to launch off-screen if you'd like.\n         */\n        origin?: Origin | undefined;\n        /**\n         * The number of confetti to launch. More is always fun... but be cool, there's a lot of math involved.\n         * @default 50\n         */\n        particleCount?: number | undefined;\n        /**\n         * Scale factor for each confetti particle. Use decimals to make the confetti smaller.\n         * @default 1\n         */\n        scalar?: number | undefined;\n        /**\n         * The possible values are square, circle, and star. The default is to use both squares and circles in an even mix.\n         * @default ['square','circle']\n         */\n        shapes?: Shape[] | undefined;\n        /**\n         * How far off center the confetti can go, in degrees. 45 means the confetti will launch at the defined angle plus or minus 22.5\n         * degrees.\n         * @default 45\n         */\n        spread?: number | undefined;\n        /**\n         * How fast the confetti will start going, in pixels.\n         * @default 45\n         */\n        startVelocity?: number | undefined;\n        /**\n         * How many times the confetti will move. This is abstract... but play with it if the confetti disappear too quickly for you.\n         * @default 200\n         */\n        ticks?: number | undefined;\n        /**\n         * The confetti should be on top, after all. But if you have a crazy high page, you can set it even higher.\n         * @default 100\n         */\n        zIndex?: number | undefined;\n    }\n\n    interface Origin {\n        /**\n         * The x position on the page, with 0 being the left edge and 1 being the right edge.\n         * @default 0.5\n         */\n        x?: number | undefined;\n        /**\n         * The y position on the page, with 0 being the left edge and 1 being the right edge.\n         * @default 0.5\n         */\n        y?: number | undefined;\n    }\n\n    interface GlobalOptions {\n        /**\n         * Disables confetti entirely for users that prefer reduced motion. When set to true, use of this\n         * confetti instance will always respect a user's request for reduced motion and disable confetti for them.\n         */\n        disableForReducedMotion?: boolean | undefined;\n        /**\n         * Whether to allow setting the canvas image size, as well as keep it correctly sized if the window changes size\n         * @default false\n         */\n        resize?: boolean | undefined;\n        /**\n         * Whether to use an asynchronous web worker to render the confetti animation, whenever possible\n         * @default false\n         */\n        useWorker?: boolean | undefined;\n    }\n\n    /**\n     * This helper method lets you create a custom confetti shape using an SVG Path string.\n     */\n    function shapeFromPath({ path, matrix }: { path: string; matrix?: DOMMatrix }): Shape;\n\n    /**\n     * This is the highly anticipated feature to render emoji confetti! Use any standard unicode emoji. Or other text.\n     */\n    function shapeFromText({\n        text,\n        scalar,\n        color,\n        fontFamily,\n    }: {\n        text: string;\n        scalar?: number;\n        color?: string;\n        fontFamily?: string;\n    }): Shape;\n\n    /**\n     * Stops the animation and clears all confetti, as well as immediately resolves any outstanding promises.\n     */\n    type Reset = () => void;\n    function reset(): Reset;\n\n    /**\n     * This method creates an instance of the confetti function that uses a custom canvas.\n     */\n    interface CreateTypes {\n        (options?: Options): Promise<null> | null;\n        reset: Reset;\n    }\n    function create(canvas?: HTMLCanvasElement, options?: GlobalOptions): CreateTypes;\n}\n\nexport as namespace confetti;\nexport = confetti;\n",
      "solid-three/dist/core/index.d.ts": "import type { Accessor, Resource } from 'solid-js'\nimport 'solid-js/jsx-runtime'\nimport * as three from 'three'\nimport type { a as ThreeComponentProxy, T as ThreeContext } from '../canvas-e5ca155d.d.ts'\nexport type { ComponentProps } from 'solid-js'\nexport {\n  $ as $S3C,\n  g as Augmentation,\n  A as AugmentedElement,\n  c as CameraType,\n  C as Canvas,\n  b as Constructor,\n  E as EventHandlers,\n  e as EventType,\n  I as InstanceFromConstructor,\n  K as KeyOfOptionals,\n  S as Size,\n  h as ThreeComponent,\n  f as ThreeElement,\n  d as ThreeEvent,\n  i as ThreeProps,\n} from '../canvas-e5ca155d.d.ts'\n\n/**\n * Custom hook to access all necessary Three.js objects needed to manage a 3D scene.\n * This hook must be used within a component that is a descendant of the `<Canvas/>` component.\n *\n * @template T The expected return type after applying the callback to the context.\n * @param {Function} [callback] - Optional callback function that processes and returns a part of the context.\n * @returns {ThreeContext | Accessor<T>} Returns the ThreeContext directly, or an accessor if a callback is provided.\n * @throws {Error} Throws an error if used outside of the Canvas component context.\n */\ndeclare function useThree(): ThreeContext\ndeclare function useThree<T>(callback: (value: ThreeContext) => T): Accessor<T>\n/**\n * Hook to register a callback that will be executed on each animation frame within the `<Canvas/>` component.\n * This hook must be used within a component that is a descendant of the `<Canvas/>` component.\n *\n * @param callback - The callback function to be executed on each frame.\n * @throws {Error} Throws an error if used outside of the Canvas component context.\n */\ndeclare const useFrame: (\n  callback: (context: ThreeContext, delta: number, frame?: XRFrame) => void,\n) => void\n/**\n * Hook to create and manage a resource using a Three.js loader. It ensures that the loader is\n * reused if it has been instantiated before, and manages the resource lifecycle automatically.\n *\n * @template TResult The type of the resolved data when the loader completes loading.\n * @template TArg The argument type expected by the loader function.\n * @param Constructor - The loader class constructor.\n * @param args - The arguments to be passed to the loader function, wrapped in an accessor to enable reactivity.\n * @returns An accessor containing the loaded resource, re-evaluating when inputs change.\n */\ndeclare const useLoader: <TArg extends string | readonly string[], TLoader extends Loader<any>>(\n  Constructor: new () => TLoader,\n  args: Accessor<TArg>,\n  setup?: ((loader: TLoader) => void) | undefined,\n) => Resource<UseLoaderOverload<string, TLoader extends Loader<infer U> ? U : never, TArg>>\ntype Loader<TLoaderResult = any> = {\n  load: (\n    value: string,\n    onLoad: (value: TLoaderResult) => void,\n    onProgress: (() => void) | undefined,\n    onReject: ((error: ErrorEvent) => void) | undefined,\n  ) => void | null\n}\ntype UseLoaderOverload<TLoaderArg, TLoaderResult, TArg> = TArg extends readonly TLoaderArg[]\n  ? {\n      [K in keyof TArg]: TLoaderResult\n    }\n  : TLoaderResult\n\n/**\n * Extends the global CATALOGUE with additional objects.\n *\n * @param {Record<string, Constructor>} objects - The objects to add to the catalogue.\n */\ndeclare const extend: (objects: Partial<typeof three | {}>) => void\n/**\n * A proxy that provides on-demand creation and caching of `solid-three` components.\n * It represents a dynamic layer over the predefined components and any added through extend function.\n */\ndeclare const T: ThreeComponentProxy<typeof three & SolidThree.ThreeElements> &\n  SolidThree.Components\n\ninterface ObjectMap {\n  nodes: {\n    [name: string]: THREE.Object3D\n  }\n  materials: {\n    [name: string]: THREE.Material\n  }\n}\ndeclare function buildGraph(object: THREE.Object3D): ObjectMap\n\nexport { T, ThreeComponentProxy, ThreeContext, buildGraph, extend, useFrame, useLoader, useThree }\n",
      "solid-three/dist/canvas-e5ca155d.d.ts": "import type { Component, ComponentProps, JSX, JSXElement, ParentProps, Setter } from 'solid-js'\nimport * as three from 'three'\nimport {\n  Object3D,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Raycaster,\n  Scene,\n  WebGLRenderer,\n} from 'three'\n\n/**\n * A component for placing its children outside the regular `solid-three` scene graph managed by Solid's reactive system.\n * This is useful for bypassing the normal rendering flow and manually managing children, similar to Solid's Portal but specific to `solid-three`.\n *\n * @function Portal\n * @param {PortalProps} props - The component props containing `children` to be rendered and an optional Object3D `element` to be rendered into.\n * @returns {JSX.Fragment} An empty JSX element.\n */\ndeclare const Portal: (props: PortalProps) => JSX.Element\ntype PortalProps = ParentProps<{\n  element?: ThreeElement<Object3D> | AugmentedElement<Object3D>\n}>\n/**\n * Wraps a `ThreeElement` and allows it to be used as a JSX-component within a `solid-three` scene.\n *\n * @function Primitive\n * @template T - Extends ThreeElement which includes types from Three.js (like Mesh, Light, etc.).\n * @param {PrimitiveProps<T>} props - The properties for the Three.js object including the object instance's methods,\n *                                    optional children, and a ref that provides access to the object instance.\n * @returns {JSX.Element} The Three.js object wrapped as a JSX element, allowing it to be used within Solid's component system.\n */\ndeclare function Primitive<T extends ThreeElement>(props: PrimitiveProps<T>): JSX.Element\ntype PrimitiveProps<T> = Omit<ThreeProps<T>, 'object' | 'children' | 'ref' | 'args'> & {\n  object: T\n  children?: JSXElement\n  ref?: T | ((value: T) => void)\n}\n\ndeclare global {\n  namespace SolidThree {\n    interface Components {\n      Primitive: typeof Primitive\n      Portal: typeof Portal\n    }\n    interface ThreeElements {}\n  }\n}\n/**********************************************************************************/\n/**********************************************************************************/\ntype ThreeContext = {\n  camera: AugmentedElement<PerspectiveCamera | OrthographicCamera>\n  canvas: HTMLCanvasElement\n  gl: AugmentedElement<three.WebGLRenderer>\n  pointer: three.Vector2\n  setPointer: Setter<three.Vector2>\n  raycaster: AugmentedElement<three.Raycaster>\n  render: (delta: number) => void\n  requestRender: () => void\n  scene: AugmentedElement<three.Object3D>\n  xr: {\n    connect: () => void\n    disconnect: () => void\n  }\n}\ntype Size = {\n  left: number\n  top: number\n  height: number\n  width: number\n}\ntype Constructor<T = any> = new (...args: any[]) => T\ntype ExtractConstructors<T> = T extends Constructor ? T : never\ntype CameraType = PerspectiveCamera | OrthographicCamera\ntype KeyOfOptionals<T> = keyof {\n  [K in keyof T as T extends Record<K, T[K]> ? never : K]: T[K]\n}\n/**********************************************************************************/\n/**********************************************************************************/\ntype ThreeEvent<TEvent extends WheelEvent | MouseEvent = WheelEvent | MouseEvent> = {\n  nativeEvent: TEvent\n  stopped: boolean\n  stopPropagation: () => void\n}\ntype EventHandlers = {\n  onClick: (event: ThreeEvent<MouseEvent>) => void\n  onDoubleClick: (event: ThreeEvent<MouseEvent>) => void\n  onContextMenu: (event: ThreeEvent<MouseEvent>) => void\n  onMouseDown: (event: ThreeEvent<MouseEvent>) => void\n  onMouseEnter: (event: ThreeEvent<MouseEvent>) => void\n  onMouseLeave: (event: ThreeEvent<MouseEvent>) => void\n  onMouseMove: (event: ThreeEvent<MouseEvent>) => void\n  onMouseUp: (event: ThreeEvent<MouseEvent>) => void\n  onPointerUp: (event: ThreeEvent<MouseEvent>) => void\n  onPointerDown: (event: ThreeEvent<MouseEvent>) => void\n  onPointerMove: (event: ThreeEvent<MouseEvent>) => void\n  onPointerEnter: (event: ThreeEvent<MouseEvent>) => void\n  onPointerLeave: (event: ThreeEvent<MouseEvent>) => void\n  onPointerMissed: (event: ThreeEvent<MouseEvent>) => void\n  onWheel: (event: ThreeEvent<WheelEvent>) => void\n}\ntype EventType = keyof EventHandlers\n/**********************************************************************************/\n/**********************************************************************************/\ntype ThreeConstructor = ExtractConstructors<(typeof three)[keyof typeof three]>\ntype ThreeElement<TConstructor = ThreeConstructor> = InstanceFromConstructor<TConstructor>\ntype AugmentedElement<TConstructor = ThreeConstructor> = ThreeElement<TConstructor> & {\n  [$S3C]: Augmentation\n}\ntype Augmentation = {\n  props: ThreeProps<ThreeElement>\n  children: Set<AugmentedElement>\n}\ntype ThreeComponentProxy<Source> = {\n  [K in keyof Source]: ThreeComponent<Source[K]>\n}\ntype ThreeComponent<Source> = Component<ThreeProps<Source>>\ntype ThreeProps<Source> = Partial<\n  ParentProps<\n    Omit<InstanceProps<Source>, 'children' | 'attach'> &\n      EventHandlers & {\n        args: Args<Source>\n        onUpdate: (self: AugmentedElement<InstanceFromConstructor<Source>>) => void\n        attach:\n          | string\n          | ((\n              parent: AugmentedElement<three.Object3D>,\n              self: AugmentedElement<InstanceFromConstructor<Source>>,\n            ) => () => void)\n      }\n  >\n>\ntype InstanceProps<Source> = WithMapProps<InstanceFromConstructor<Source>>\ntype Args<T> = T extends new (...args: any[]) => any ? AllConstructorParameters<T> : any[]\ntype InstanceFromConstructor<TConstructor> = TConstructor extends new (\n  ...args: any[]\n) => infer TObject\n  ? TObject\n  : TConstructor\ntype WithMapProps<T> = {\n  [TKey in keyof T]: T[TKey] extends MathRepresentation | three.Euler ? MathType<T[TKey]> : T[TKey]\n}\ntype MathType<T extends MathRepresentation | three.Euler> = T extends three.Color\n  ? ConstructorParameters<typeof three.Color> | three.ColorRepresentation\n  : T extends VectorRepresentation | three.Layers | three.Euler\n  ? T | Parameters<T['set']> | number\n  : T | Parameters<T['set']>\ninterface MathRepresentation {\n  set(...args: number[]): any\n}\ninterface VectorRepresentation extends MathRepresentation {\n  setScalar(s: number): any\n}\ntype ExcludeUnknown<T> = T extends Array<infer I> ? ({} extends I & {} ? never : T) : T\ntype AllConstructorParameters<T> = ExcludeUnknown<\n  T extends {\n    new (...o: infer U): void\n    new (...o: infer U2): void\n    new (...o: infer U3): void\n    new (...o: infer U4): void\n    new (...o: infer U5): void\n    new (...o: infer U6): void\n    new (...o: infer U7): void\n  }\n    ? U | U2 | U3 | U4 | U5 | U6 | U7\n    : T extends {\n        new (...o: infer U): void\n        new (...o: infer U2): void\n        new (...o: infer U3): void\n        new (...o: infer U4): void\n        new (...o: infer U5): void\n        new (...o: infer U6): void\n      }\n    ? U | U2 | U3 | U4 | U5 | U6\n    : T extends {\n        new (...o: infer U): void\n        new (...o: infer U2): void\n        new (...o: infer U3): void\n        new (...o: infer U4): void\n        new (...o: infer U5): void\n      }\n    ? U | U2 | U3 | U4 | U5\n    : T extends {\n        new (...o: infer U): void\n        new (...o: infer U2): void\n        new (...o: infer U3): void\n        new (...o: infer U4): void\n      }\n    ? U | U2 | U3 | U4\n    : T extends {\n        new (...o: infer U): void\n        new (...o: infer U2): void\n        new (...o: infer U3): void\n      }\n    ? U | U2 | U3\n    : T extends {\n        new (...o: infer U): void\n        new (...o: infer U2): void\n      }\n    ? U | U2\n    : T extends {\n        new (...o: infer U): void\n      }\n    ? U\n    : never\n>\n\ndeclare const $S3C: unique symbol\n\n/**\n * Props for the Canvas component, which initializes the Three.js rendering context and acts as the root for your 3D scene.\n */\ninterface CanvasProps extends ComponentProps<'div'> {\n  /**\n   * Configuration for the camera used in the scene.\n   */\n  camera?: Partial<ThreeProps<PerspectiveCamera> | ThreeProps<OrthographicCamera>> | THREE.Camera\n  /**\n   * Element to render while the main content is loading asynchronously.\n   */\n  fallback?: JSX.Element\n  /**\n   * Options for the WebGLRenderer or a function returning a customized renderer.\n   */\n  gl?:\n    | Partial<ThreeProps<WebGLRenderer>>\n    | ((canvas: HTMLCanvasElement) => WebGLRenderer)\n    | THREE.WebGLRenderer\n  /**\n   * Toggles between Orthographic and Perspective camera.\n   */\n  orthographic?: boolean\n  /**\n   * Configuration for the Raycaster used for mouse and pointer events.\n   */\n  raycaster?: Partial<ThreeProps<Raycaster>> | THREE.Raycaster\n  /**\n   * Configuration for the Scene instance.\n   */\n  scene?: Partial<ThreeProps<Scene>> | THREE.Scene\n  /**\n   * Custom CSS styles for the canvas container.\n   */\n  style?: JSX.CSSProperties\n  /**\n   * Enables and configures shadows in the scene.\n   */\n  shadows?: boolean | 'basic' | 'percentage' | 'soft' | 'variance' | WebGLRenderer['shadowMap']\n  /**\n   * Toggles linear interpolation for texture filtering.\n   */\n  linear?: boolean\n  /**\n   * Toggles flat interpolation for texture filtering.\n   */\n  flat?: boolean\n  /**\n   * Controls the rendering loop's operation mode.\n   */\n  frameloop?: 'never' | 'demand' | 'always'\n}\n/**\n * Serves as the root component for all 3D scenes created with `solid-three`. It initializes\n * the Three.js rendering context, including a WebGL renderer, a scene, and a camera.\n * All `<T/>`-components must be children of this Canvas. Hooks such as `useThree` and\n * `useFrame` should only be used within this component to ensure proper context.\n *\n * @function Canvas\n * @param {CanvasProps} props - Configuration options include camera settings, style, and children elements.\n * @returns {JSX.Element} A div element containing the WebGL canvas configured to occupy the full available space.\n */\ndeclare function Canvas(_props: CanvasProps): JSX.Element\n\nexport {\n  $S3C as $,\n  AugmentedElement as A,\n  Canvas as C,\n  EventHandlers as E,\n  InstanceFromConstructor as I,\n  KeyOfOptionals as K,\n  Size as S,\n  ThreeContext as T,\n  ThreeComponentProxy as a,\n  Constructor as b,\n  CameraType as c,\n  ThreeEvent as d,\n  EventType as e,\n  ThreeElement as f,\n  Augmentation as g,\n  ThreeComponent as h,\n  ThreeProps as i,\n  CanvasProps as j,\n}\n",
      "@types/three@~0/index.d.ts": "// To update three.js type definition, please make changes to the repository at:\n// https://github.com/three-types/three-ts-types.\n// Periodically, the updates from the repository are pushed to DefinitelyTyped\n// and released in the @types/three npm package.\n\nexport * from \"./src/Three.d.ts\";\n",
      "@types/three@~0/src/Three.d.ts": "/**\n * SRC\n */\nexport * from \"./constants.d.ts\";\nexport * from \"./Three.Legacy.d.ts\";\n/**\n * Animation\n */\nexport * from \"./animation/KeyframeTrack.d.ts\";\nexport * from \"./animation/PropertyBinding.d.ts\";\nexport * from \"./animation/PropertyMixer.d.ts\";\nexport * from \"./animation/tracks/BooleanKeyframeTrack.d.ts\";\nexport * from \"./animation/tracks/ColorKeyframeTrack.d.ts\";\nexport * from \"./animation/tracks/NumberKeyframeTrack.d.ts\";\nexport * from \"./animation/tracks/QuaternionKeyframeTrack.d.ts\";\nexport * from \"./animation/tracks/StringKeyframeTrack.d.ts\";\nexport * from \"./animation/tracks/VectorKeyframeTrack.d.ts\";\nimport * as AnimationUtils from \"./animation/AnimationUtils.d.ts\";\nexport { AnimationUtils };\nexport * from \"./animation/AnimationAction.d.ts\";\nexport * from \"./animation/AnimationClip.d.ts\";\nexport * from \"./animation/AnimationMixer.d.ts\";\nexport * from \"./animation/AnimationObjectGroup.d.ts\";\n/**\n * Audio\n */\nexport * from \"./audio/Audio.d.ts\";\nexport * from \"./audio/AudioAnalyser.d.ts\";\nexport * from \"./audio/AudioContext.d.ts\";\nexport * from \"./audio/AudioListener.d.ts\";\nexport * from \"./audio/PositionalAudio.d.ts\";\n/**\n * Cameras\n */\nexport * from \"./cameras/ArrayCamera.d.ts\";\nexport * from \"./cameras/Camera.d.ts\";\nexport * from \"./cameras/CubeCamera.d.ts\";\nexport * from \"./cameras/OrthographicCamera.d.ts\";\nexport * from \"./cameras/PerspectiveCamera.d.ts\";\nexport * from \"./cameras/StereoCamera.d.ts\";\n/**\n * Core\n */\nexport * from \"./core/BufferAttribute.d.ts\";\nexport * from \"./core/BufferGeometry.d.ts\";\nexport * from \"./core/Clock.d.ts\";\nexport * from \"./core/EventDispatcher.d.ts\";\nexport * from \"./core/GLBufferAttribute.d.ts\";\nexport * from \"./core/InstancedBufferAttribute.d.ts\";\nexport * from \"./core/InstancedBufferGeometry.d.ts\";\nexport * from \"./core/InstancedInterleavedBuffer.d.ts\";\nexport * from \"./core/InterleavedBuffer.d.ts\";\nexport * from \"./core/InterleavedBufferAttribute.d.ts\";\nexport * from \"./core/Layers.d.ts\";\nexport * from \"./core/Object3D.d.ts\";\nexport * from \"./core/Raycaster.d.ts\";\nexport * from \"./core/RenderTarget.d.ts\";\nexport * from \"./core/Uniform.d.ts\";\nexport * from \"./core/UniformsGroup.d.ts\";\n/**\n * Extras\n */\nexport * from \"./extras/core/Curve.d.ts\";\nexport * from \"./extras/core/CurvePath.d.ts\";\nexport * from \"./extras/core/Interpolations.d.ts\";\nexport * from \"./extras/core/Path.d.ts\";\nexport * from \"./extras/core/Shape.d.ts\";\nexport * from \"./extras/core/ShapePath.d.ts\";\nexport * from \"./extras/curves/Curves.d.ts\";\nexport * as DataUtils from \"./extras/DataUtils.d.ts\";\nexport * from \"./extras/ImageUtils.d.ts\";\nexport * from \"./extras/PMREMGenerator.d.ts\";\nexport * from \"./extras/ShapeUtils.d.ts\";\n/**\n * Geometries\n */\nexport * from \"./geometries/Geometries.d.ts\";\n/**\n * Helpers\n */\nexport * from \"./helpers/ArrowHelper.d.ts\";\nexport * from \"./helpers/AxesHelper.d.ts\";\nexport * from \"./helpers/Box3Helper.d.ts\";\nexport * from \"./helpers/BoxHelper.d.ts\";\nexport * from \"./helpers/CameraHelper.d.ts\";\nexport * from \"./helpers/DirectionalLightHelper.d.ts\";\nexport * from \"./helpers/GridHelper.d.ts\";\nexport * from \"./helpers/HemisphereLightHelper.d.ts\";\nexport * from \"./helpers/PlaneHelper.d.ts\";\nexport * from \"./helpers/PointLightHelper.d.ts\";\nexport * from \"./helpers/PolarGridHelper.d.ts\";\nexport * from \"./helpers/SkeletonHelper.d.ts\";\nexport * from \"./helpers/SpotLightHelper.d.ts\";\n/**\n * Lights\n */\nexport * from \"./lights/AmbientLight.d.ts\";\nexport * from \"./lights/DirectionalLight.d.ts\";\nexport * from \"./lights/DirectionalLightShadow.d.ts\";\nexport * from \"./lights/HemisphereLight.d.ts\";\nexport * from \"./lights/Light.d.ts\";\nexport * from \"./lights/LightProbe.d.ts\";\nexport * from \"./lights/LightShadow.d.ts\";\nexport * from \"./lights/PointLight.d.ts\";\nexport * from \"./lights/PointLightShadow.d.ts\";\nexport * from \"./lights/RectAreaLight.d.ts\";\nexport * from \"./lights/SpotLight.d.ts\";\nexport * from \"./lights/SpotLightShadow.d.ts\";\n/**\n * Loaders\n */\nexport * from \"./loaders/AnimationLoader.d.ts\";\nexport * from \"./loaders/AudioLoader.d.ts\";\nexport * from \"./loaders/BufferGeometryLoader.d.ts\";\nexport * from \"./loaders/Cache.d.ts\";\nexport * from \"./loaders/CompressedTextureLoader.d.ts\";\nexport * from \"./loaders/CubeTextureLoader.d.ts\";\nexport * from \"./loaders/DataTextureLoader.d.ts\";\nexport * from \"./loaders/FileLoader.d.ts\";\nexport * from \"./loaders/ImageBitmapLoader.d.ts\";\nexport * from \"./loaders/ImageLoader.d.ts\";\nexport * from \"./loaders/Loader.d.ts\";\nexport * from \"./loaders/LoaderUtils.d.ts\";\nexport * from \"./loaders/LoadingManager.d.ts\";\nexport * from \"./loaders/MaterialLoader.d.ts\";\nexport * from \"./loaders/ObjectLoader.d.ts\";\nexport * from \"./loaders/TextureLoader.d.ts\";\n/**\n * Materials\n */\nexport * from \"./materials/Materials.d.ts\";\n/**\n * Math\n */\nexport * from \"./math/Box2.d.ts\";\nexport * from \"./math/Box3.d.ts\";\nexport * from \"./math/Color.d.ts\";\nexport { ColorManagement, DefinedColorSpace, WorkingColorSpace } from \"./math/ColorManagement.d.ts\";\nexport * from \"./math/Cylindrical.d.ts\";\nexport * from \"./math/Euler.d.ts\";\nexport * from \"./math/Frustum.d.ts\";\nexport * from \"./math/Interpolant.d.ts\";\nexport * from \"./math/interpolants/CubicInterpolant.d.ts\";\nexport * from \"./math/interpolants/DiscreteInterpolant.d.ts\";\nexport * from \"./math/interpolants/LinearInterpolant.d.ts\";\nexport * from \"./math/interpolants/QuaternionLinearInterpolant.d.ts\";\nexport * from \"./math/Line3.d.ts\";\nexport * from \"./math/Matrix3.d.ts\";\nexport * from \"./math/Matrix4.d.ts\";\nexport * from \"./math/Plane.d.ts\";\nexport * from \"./math/Quaternion.d.ts\";\nexport * from \"./math/Ray.d.ts\";\nexport * from \"./math/Sphere.d.ts\";\nexport * from \"./math/Spherical.d.ts\";\nexport * from \"./math/SphericalHarmonics3.d.ts\";\nexport * from \"./math/Triangle.d.ts\";\nexport * from \"./math/Vector2.d.ts\";\nexport * from \"./math/Vector3.d.ts\";\nexport * from \"./math/Vector4.d.ts\";\nimport * as MathUtils from \"./math/MathUtils.d.ts\";\nexport { MathUtils };\n/**\n * Objects\n */\nexport * from \"./objects/BatchedMesh.d.ts\";\nexport * from \"./objects/Bone.d.ts\";\nexport * from \"./objects/Group.d.ts\";\nexport * from \"./objects/InstancedMesh.d.ts\";\nexport * from \"./objects/Line.d.ts\";\nexport * from \"./objects/LineLoop.d.ts\";\nexport * from \"./objects/LineSegments.d.ts\";\nexport * from \"./objects/LOD.d.ts\";\nexport * from \"./objects/Mesh.d.ts\";\nexport * from \"./objects/Points.d.ts\";\nexport * from \"./objects/Skeleton.d.ts\";\nexport * from \"./objects/SkinnedMesh.d.ts\";\nexport * from \"./objects/Sprite.d.ts\";\n/**\n * Renderers\n */\nexport * from \"./renderers/shaders/ShaderChunk.d.ts\";\nexport * from \"./renderers/shaders/ShaderLib.d.ts\";\nexport * from \"./renderers/shaders/UniformsLib.d.ts\";\nexport * from \"./renderers/shaders/UniformsUtils.d.ts\";\nexport * from \"./renderers/webgl/WebGLBufferRenderer.d.ts\";\nexport * from \"./renderers/webgl/WebGLCapabilities.d.ts\";\nexport * from \"./renderers/webgl/WebGLClipping.d.ts\";\nexport * from \"./renderers/webgl/WebGLCubeUVMaps.d.ts\";\nexport * from \"./renderers/webgl/WebGLExtensions.d.ts\";\nexport * from \"./renderers/webgl/WebGLGeometries.d.ts\";\nexport * from \"./renderers/webgl/WebGLIndexedBufferRenderer.d.ts\";\nexport * from \"./renderers/webgl/WebGLInfo.d.ts\";\nexport * from \"./renderers/webgl/WebGLLights.d.ts\";\nexport * from \"./renderers/webgl/WebGLObjects.d.ts\";\nexport * from \"./renderers/webgl/WebGLProgram.d.ts\";\nexport * from \"./renderers/webgl/WebGLPrograms.d.ts\";\nexport * from \"./renderers/webgl/WebGLProperties.d.ts\";\nexport * from \"./renderers/webgl/WebGLRenderLists.d.ts\";\nexport * from \"./renderers/webgl/WebGLShader.d.ts\";\nexport * from \"./renderers/webgl/WebGLShadowMap.d.ts\";\nexport * from \"./renderers/webgl/WebGLState.d.ts\";\nexport * from \"./renderers/webgl/WebGLTextures.d.ts\";\nexport * from \"./renderers/webgl/WebGLUniforms.d.ts\";\nexport * from \"./renderers/webgl/WebGLUniformsGroups.d.ts\";\nexport { WebGLUtils } from \"./renderers/webgl/WebGLUtils.d.ts\";\nexport * from \"./renderers/WebGL3DRenderTarget.d.ts\";\nexport * from \"./renderers/WebGLArrayRenderTarget.d.ts\";\nexport * from \"./renderers/WebGLCubeRenderTarget.d.ts\";\nexport * from \"./renderers/WebGLRenderer.d.ts\";\nexport * from \"./renderers/WebGLRenderTarget.d.ts\";\nexport * from \"./renderers/webxr/WebXRController.d.ts\";\nexport * from \"./renderers/webxr/WebXRManager.d.ts\";\n/**\n * Scenes\n */\nexport * from \"./scenes/Fog.d.ts\";\nexport * from \"./scenes/FogExp2.d.ts\";\nexport * from \"./scenes/Scene.d.ts\";\n/**\n * Textures\n */\nexport * from \"./textures/CanvasTexture.d.ts\";\nexport * from \"./textures/CompressedArrayTexture.d.ts\";\nexport * from \"./textures/CompressedCubeTexture.d.ts\";\nexport * from \"./textures/CompressedTexture.d.ts\";\nexport * from \"./textures/CubeTexture.d.ts\";\nexport * from \"./textures/Data3DTexture.d.ts\";\nexport * from \"./textures/DataArrayTexture.d.ts\";\nexport * from \"./textures/DataTexture.d.ts\";\nexport * from \"./textures/DepthTexture.d.ts\";\nexport * from \"./textures/FramebufferTexture.d.ts\";\nexport * from \"./textures/Source.d.ts\";\nexport * from \"./textures/Texture.d.ts\";\nexport * from \"./textures/VideoTexture.d.ts\";\n/**\n * Utils\n */\nexport { createCanvasElement } from \"./utils.d.ts\";\n",
      "@types/three@~0/src/constants.d.ts": "export const REVISION: string;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\nexport enum MOUSE {\n    LEFT = 0,\n    MIDDLE = 1,\n    RIGHT = 2,\n    ROTATE = 0,\n    DOLLY = 1,\n    PAN = 2,\n}\n\nexport enum TOUCH {\n    ROTATE = 0,\n    PAN = 1,\n    DOLLY_PAN = 2,\n    DOLLY_ROTATE = 3,\n}\n\n// GL STATE CONSTANTS\nexport const CullFaceNone: 0;\nexport const CullFaceBack: 1;\nexport const CullFaceFront: 2;\nexport const CullFaceFrontBack: 3;\nexport type CullFace = typeof CullFaceNone | typeof CullFaceBack | typeof CullFaceFront | typeof CullFaceFrontBack;\n\n// Shadowing Type\nexport const BasicShadowMap: 0;\nexport const PCFShadowMap: 1;\nexport const PCFSoftShadowMap: 2;\nexport const VSMShadowMap: 3;\nexport type ShadowMapType = typeof BasicShadowMap | typeof PCFShadowMap | typeof PCFSoftShadowMap | typeof VSMShadowMap;\n\n// MATERIAL CONSTANTS\n\n// side\nexport const FrontSide: 0;\nexport const BackSide: 1;\nexport const DoubleSide: 2;\n/**\n * Defines which side of faces will be rendered - front, back or both.\n * Default is {@link FrontSide}.\n */\nexport type Side = typeof FrontSide | typeof BackSide | typeof DoubleSide;\n\n// blending modes\nexport const NoBlending: 0;\nexport const NormalBlending: 1;\nexport const AdditiveBlending: 2;\nexport const SubtractiveBlending: 3;\nexport const MultiplyBlending: 4;\nexport const CustomBlending: 5;\nexport type Blending =\n    | typeof NoBlending\n    | typeof NormalBlending\n    | typeof AdditiveBlending\n    | typeof SubtractiveBlending\n    | typeof MultiplyBlending\n    | typeof CustomBlending;\n\n// custom blending equations\n// (numbers start from 100 not to clash with other\n// mappings to OpenGL constants defined in Texture.js)\nexport const AddEquation: 100;\nexport const SubtractEquation: 101;\nexport const ReverseSubtractEquation: 102;\nexport const MinEquation: 103;\nexport const MaxEquation: 104;\nexport type BlendingEquation =\n    | typeof AddEquation\n    | typeof SubtractEquation\n    | typeof ReverseSubtractEquation\n    | typeof MinEquation\n    | typeof MaxEquation;\n\n// custom blending factors\nexport const ZeroFactor: 200;\nexport const OneFactor: 201;\nexport const SrcColorFactor: 202;\nexport const OneMinusSrcColorFactor: 203;\nexport const SrcAlphaFactor: 204;\nexport const OneMinusSrcAlphaFactor: 205;\nexport const DstAlphaFactor: 206;\nexport const OneMinusDstAlphaFactor: 207;\nexport const DstColorFactor: 208;\nexport const OneMinusDstColorFactor: 209;\nexport const SrcAlphaSaturateFactor: 210;\nexport const ConstantColorFactor: 211;\nexport const OneMinusConstantColorFactor: 212;\nexport const ConstantAlphaFactor: 213;\nexport const OneMinusConstantAlphaFactor: 214;\nexport type BlendingDstFactor =\n    | typeof ZeroFactor\n    | typeof OneFactor\n    | typeof SrcColorFactor\n    | typeof OneMinusSrcColorFactor\n    | typeof SrcAlphaFactor\n    | typeof OneMinusSrcAlphaFactor\n    | typeof DstAlphaFactor\n    | typeof OneMinusDstAlphaFactor\n    | typeof DstColorFactor\n    | typeof OneMinusDstColorFactor\n    | typeof ConstantColorFactor\n    | typeof OneMinusConstantColorFactor\n    | typeof ConstantAlphaFactor\n    | typeof OneMinusConstantAlphaFactor;\nexport type BlendingSrcFactor = BlendingDstFactor | typeof SrcAlphaSaturateFactor;\n\n// depth modes\nexport const NeverDepth: 0;\nexport const AlwaysDepth: 1;\nexport const LessDepth: 2;\nexport const LessEqualDepth: 3;\nexport const EqualDepth: 4;\nexport const GreaterEqualDepth: 5;\nexport const GreaterDepth: 6;\nexport const NotEqualDepth: 7;\nexport type DepthModes =\n    | typeof NeverDepth\n    | typeof AlwaysDepth\n    | typeof LessDepth\n    | typeof LessEqualDepth\n    | typeof EqualDepth\n    | typeof GreaterEqualDepth\n    | typeof GreaterDepth\n    | typeof NotEqualDepth;\n\n// TEXTURE CONSTANTS\n// Operations\nexport const MultiplyOperation: 0;\nexport const MixOperation: 1;\nexport const AddOperation: 2;\nexport type Combine = typeof MultiplyOperation | typeof MixOperation | typeof AddOperation;\n\n// Tone Mapping modes\nexport const NoToneMapping: 0;\nexport const LinearToneMapping: 1;\nexport const ReinhardToneMapping: 2;\nexport const CineonToneMapping: 3;\nexport const ACESFilmicToneMapping: 4;\nexport const CustomToneMapping: 5;\nexport const AgXToneMapping: 6;\nexport const NeutralToneMapping: 7;\nexport type ToneMapping =\n    | typeof NoToneMapping\n    | typeof LinearToneMapping\n    | typeof ReinhardToneMapping\n    | typeof CineonToneMapping\n    | typeof ACESFilmicToneMapping\n    | typeof CustomToneMapping\n    | typeof AgXToneMapping\n    | typeof NeutralToneMapping;\n\n// Bind modes\nexport const AttachedBindMode: \"attached\";\nexport const DetachedBindMode: \"detached\";\nexport type BindMode = typeof AttachedBindMode | typeof DetachedBindMode;\n\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n// Mapping modes\n\n/**\n * Maps the texture using the mesh's UV coordinates.\n * @remarks This is the _default_ value and behaver for Texture Mapping.\n */\nexport const UVMapping: 300;\n\n/**\n * @remarks This is the _default_ value and behaver for Cube Texture Mapping.\n */\nexport const CubeReflectionMapping: 301;\nexport const CubeRefractionMapping: 302;\nexport const CubeUVReflectionMapping: 306;\n\nexport const EquirectangularReflectionMapping: 303;\nexport const EquirectangularRefractionMapping: 304;\n\n/**\n * Texture Mapping Modes for non-cube Textures\n * @remarks {@link UVMapping} is the _default_ value and behaver for Texture Mapping.\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type Mapping =\n    | typeof UVMapping\n    | typeof EquirectangularReflectionMapping\n    | typeof EquirectangularRefractionMapping;\n\n/**\n * Texture Mapping Modes for cube Textures\n * @remarks {@link CubeReflectionMapping} is the _default_ value and behaver for Cube Texture Mapping.\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type CubeTextureMapping =\n    | typeof CubeReflectionMapping\n    | typeof CubeRefractionMapping\n    | typeof CubeUVReflectionMapping;\n\n/**\n * Texture Mapping Modes for any type of Textures\n * @see {@link Mapping} and {@link CubeTextureMapping}\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type AnyMapping = Mapping | CubeTextureMapping;\n\n///////////////////////////////////////////////////////////////////////////////\n// Wrapping modes\n\n/** With {@link RepeatWrapping} the texture will simply repeat to infinity. */\nexport const RepeatWrapping: 1000;\n/**\n * With {@link ClampToEdgeWrapping} the last pixel of the texture stretches to the edge of the mesh.\n * @remarks This is the _default_ value and behaver for Wrapping Mapping.\n */\nexport const ClampToEdgeWrapping: 1001;\n/** With {@link MirroredRepeatWrapping} the texture will repeats to infinity, mirroring on each repeat. */\nexport const MirroredRepeatWrapping: 1002;\n\n/**\n * Texture Wrapping Modes\n * @remarks {@link ClampToEdgeWrapping} is the _default_ value and behaver for Wrapping Mapping.\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type Wrapping = typeof RepeatWrapping | typeof ClampToEdgeWrapping | typeof MirroredRepeatWrapping;\n\n///////////////////////////////////////////////////////////////////////////////\n// Filters\n\n/** {@link NearestFilter} returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates. */\nexport const NearestFilter: 1003;\n\n/**\n * {@link NearestMipmapNearestFilter} chooses the mipmap that most closely matches the size of the pixel being textured\n * and uses the {@link NearestFilter} criterion (the texel nearest to the center of the pixel) to produce a texture value.\n */\nexport const NearestMipmapNearestFilter: 1004;\n/**\n * {@link NearestMipmapNearestFilter} chooses the mipmap that most closely matches the size of the pixel being textured\n * and uses the {@link NearestFilter} criterion (the texel nearest to the center of the pixel) to produce a texture value.\n */\nexport const NearestMipMapNearestFilter: 1004;\n\n/**\n * {@link NearestMipmapLinearFilter} chooses the two mipmaps that most closely match the size of the pixel being textured\n * and uses the {@link NearestFilter} criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n */\nexport const NearestMipmapLinearFilter: 1005;\n/**\n * {@link NearestMipMapLinearFilter} chooses the two mipmaps that most closely match the size of the pixel being textured\n * and uses the {@link NearestFilter} criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n */\nexport const NearestMipMapLinearFilter: 1005;\n\n/**\n * {@link LinearFilter} returns the weighted average of the four texture elements that are closest to the specified texture coordinates,\n * and can include items wrapped or repeated from other parts of a texture,\n * depending on the values of {@link THREE.Texture.wrapS | wrapS} and {@link THREE.Texture.wrapT | wrapT}, and on the exact mapping.\n */\nexport const LinearFilter: 1006;\n\n/**\n * {@link LinearMipmapNearestFilter} chooses the mipmap that most closely matches the size of the pixel being textured and\n * uses the {@link LinearFilter} criterion (a weighted average of the four texels that are closest to the center of the pixel) to produce a texture value.\n */\nexport const LinearMipmapNearestFilter: 1007;\n/**\n * {@link LinearMipMapNearestFilter} chooses the mipmap that most closely matches the size of the pixel being textured and\n * uses the {@link LinearFilter} criterion (a weighted average of the four texels that are closest to the center of the pixel) to produce a texture value.\n */\nexport const LinearMipMapNearestFilter: 1007;\n\n/**\n * {@link LinearMipmapLinearFilter} is the default and chooses the two mipmaps that most closely match the size of the pixel being textured and\n * uses the {@link LinearFilter} criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n */\nexport const LinearMipmapLinearFilter: 1008;\n\n/**\n * {@link LinearMipMapLinearFilter} is the default and chooses the two mipmaps that most closely match the size of the pixel being textured and\n * uses the {@link LinearFilter} criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n */\nexport const LinearMipMapLinearFilter: 1008;\n\n/**\n * Texture Magnification Filter Modes.\n * For use with a texture's {@link THREE.Texture.magFilter | magFilter} property,\n * these define the texture magnification function to be used when the pixel being textured maps to an area less than or equal to one texture element (texel).\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n * @see {@link https://sbcode.net/threejs/mipmaps/ | Texture Mipmaps (non-official)}\n */\nexport type MagnificationTextureFilter = typeof NearestFilter | typeof LinearFilter;\n\n/**\n * Texture Minification Filter Modes.\n * For use with a texture's {@link THREE.Texture.minFilter | minFilter} property,\n * these define the texture minifying function that is used whenever the pixel being textured maps to an area greater than one texture element (texel).\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n * @see {@link https://sbcode.net/threejs/mipmaps/ | Texture Mipmaps (non-official)}\n */\nexport type MinificationTextureFilter =\n    | typeof NearestFilter\n    | typeof NearestMipmapNearestFilter\n    | typeof NearestMipMapNearestFilter\n    | typeof NearestMipmapLinearFilter\n    | typeof NearestMipMapLinearFilter\n    | typeof LinearFilter\n    | typeof LinearMipmapNearestFilter\n    | typeof LinearMipMapNearestFilter\n    | typeof LinearMipmapLinearFilter\n    | typeof LinearMipMapLinearFilter;\n\n/**\n * Texture all Magnification and Minification Filter Modes.\n * @see {@link MagnificationTextureFilter} and {@link MinificationTextureFilter}\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n * @see {@link https://sbcode.net/threejs/mipmaps/ | Texture Mipmaps (non-official)}\n */\nexport type TextureFilter = MagnificationTextureFilter | MinificationTextureFilter;\n\n///////////////////////////////////////////////////////////////////////////////\n// Data types\n\nexport const UnsignedByteType: 1009;\nexport const ByteType: 1010;\nexport const ShortType: 1011;\nexport const UnsignedShortType: 1012;\nexport const IntType: 1013;\nexport const UnsignedIntType: 1014;\nexport const FloatType: 1015;\nexport const HalfFloatType: 1016;\nexport const UnsignedShort4444Type: 1017;\nexport const UnsignedShort5551Type: 1018;\nexport const UnsignedInt248Type: 1020;\nexport const UnsignedInt5999Type: 35902;\n\nexport type AttributeGPUType = typeof FloatType | typeof IntType;\n\n/**\n * Texture Types.\n * @remarks Must correspond to the correct {@link PixelFormat | format}.\n * @see {@link THREE.Texture.type}\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type TextureDataType =\n    | typeof UnsignedByteType\n    | typeof ByteType\n    | typeof ShortType\n    | typeof UnsignedShortType\n    | typeof IntType\n    | typeof UnsignedIntType\n    | typeof FloatType\n    | typeof HalfFloatType\n    | typeof UnsignedShort4444Type\n    | typeof UnsignedShort5551Type\n    | typeof UnsignedInt248Type\n    | typeof UnsignedInt5999Type;\n\n///////////////////////////////////////////////////////////////////////////////\n// Pixel formats\n\n/** {@link AlphaFormat} discards the red, green and blue components and reads just the alpha component. */\nexport const AlphaFormat: 1021;\n\nexport const RGBFormat: 1022;\n\n/** {@link RGBAFormat} is the default and reads the red, green, blue and alpha components. */\nexport const RGBAFormat: 1023;\n\n/**\n * {@link LuminanceFormat} reads each element as a single luminance component.\n * This is then converted to a floating point, clamped to the range `[0,1]`, and then assembled into an RGBA element by\n * placing the luminance value in the red, green and blue channels, and attaching `1.0` to the alpha channel.\n */\nexport const LuminanceFormat: 1024;\n\n/**\n * {@link LuminanceAlphaFormat} reads each element as a luminance/alpha double.\n * The same process occurs as for the {@link LuminanceFormat}, except that the alpha channel may have values other than `1.0`.\n */\nexport const LuminanceAlphaFormat: 1025;\n\n/**\n * {@link DepthFormat} reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\n * @remarks This is the default for {@link THREE.DepthTexture}.\n */\nexport const DepthFormat: 1026;\n\n/**\n * {@link DepthStencilFormat} reads each element is a pair of depth and stencil values.\n * The depth component of the pair is interpreted as in {@link DepthFormat}.\n * The stencil component is interpreted based on the depth + stencil internal format.\n */\nexport const DepthStencilFormat: 1027;\n\n/**\n * {@link RedFormat} discards the green and blue components and reads just the red component.\n */\nexport const RedFormat: 1028;\n\n/**\n * {@link RedIntegerFormat} discards the green and blue components and reads just the red component.\n * The texels are read as integers instead of floating point.\n */\nexport const RedIntegerFormat: 1029;\n\n/**\n * {@link RGFormat} discards the alpha, and blue components and reads the red, and green components.\n */\nexport const RGFormat: 1030;\n\n/**\n * {@link RGIntegerFormat} discards the alpha, and blue components and reads the red, and green components.\n * The texels are read as integers instead of floating point.\n */\nexport const RGIntegerFormat: 1031;\n\n/**\n * {@link RGBAIntegerFormat} reads the red, green, blue and alpha component\n * @remarks This is the default for {@link THREE.Texture}.\n */\nexport const RGBAIntegerFormat: 1033;\n\n/**\n * All Texture Pixel Formats Modes.\n * @remarks Note that the texture must have the correct {@link THREE.Texture.type} set, as described in  {@link TextureDataType}.\n * @see {@link WebGLRenderingContext.texImage2D} for details.\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type PixelFormat =\n    | typeof AlphaFormat\n    | typeof RGBFormat\n    | typeof RGBAFormat\n    | typeof LuminanceFormat\n    | typeof LuminanceAlphaFormat\n    | typeof DepthFormat\n    | typeof DepthStencilFormat\n    | typeof RedFormat\n    | typeof RedIntegerFormat\n    | typeof RGFormat\n    | typeof RGIntegerFormat\n    | typeof RGBAIntegerFormat;\n\n/**\n * All Texture Pixel Formats Modes for {@link THREE.DepthTexture}.\n * @see {@link WebGLRenderingContext.texImage2D} for details.\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type DepthTexturePixelFormat = typeof DepthFormat | typeof DepthStencilFormat;\n\n///////////////////////////////////////////////////////////////////////////////\n// Compressed texture formats\n// DDS / ST3C Compressed texture formats\n\n/**\n * A DXT1-compressed image in an RGB image format.\n * @remarks Require support for the _WEBGL_compressed_texture_s3tc_ WebGL extension.\n */\nexport const RGB_S3TC_DXT1_Format: 33776;\n/**\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\n * @remarks Require support for the _WEBGL_compressed_texture_s3tc_ WebGL extension.\n */\nexport const RGBA_S3TC_DXT1_Format: 33777;\n/**\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\n * @remarks Require support for the _WEBGL_compressed_texture_s3tc_ WebGL extension.\n */\nexport const RGBA_S3TC_DXT3_Format: 33778;\n/**\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.\n * @remarks Require support for the _WEBGL_compressed_texture_s3tc_ WebGL extension.\n */\nexport const RGBA_S3TC_DXT5_Format: 33779;\n\n// PVRTC compressed './texture formats\n\n/**\n * RGB compression in 4-bit mode. One block for each 4×4 pixels.\n * @remarks Require support for the _WEBGL_compressed_texture_pvrtc_ WebGL extension.\n */\nexport const RGB_PVRTC_4BPPV1_Format: 35840;\n/**\n * RGB compression in 2-bit mode. One block for each 8×4 pixels.\n * @remarks Require support for the _WEBGL_compressed_texture_pvrtc_ WebGL extension.\n */\nexport const RGB_PVRTC_2BPPV1_Format: 35841;\n/**\n * RGBA compression in 4-bit mode. One block for each 4×4 pixels.\n * @remarks Require support for the _WEBGL_compressed_texture_pvrtc_ WebGL extension.\n */\nexport const RGBA_PVRTC_4BPPV1_Format: 35842;\n/**\n * RGBA compression in 2-bit mode. One block for each 8×4 pixels.\n * @remarks Require support for the _WEBGL_compressed_texture_pvrtc_ WebGL extension.\n */\nexport const RGBA_PVRTC_2BPPV1_Format: 35843;\n\n// ETC compressed texture formats\n\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_etc1_ (ETC1) or _WEBGL_compressed_texture_etc_ (ETC2) WebGL extension.\n */\nexport const RGB_ETC1_Format: 36196;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_etc1_ (ETC1) or _WEBGL_compressed_texture_etc_ (ETC2) WebGL extension.\n */\nexport const RGB_ETC2_Format: 37492;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_etc1_ (ETC1) or _WEBGL_compressed_texture_etc_ (ETC2) WebGL extension.\n */\nexport const RGBA_ETC2_EAC_Format: 37496;\n\n// ASTC compressed texture formats\n\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_4x4_Format: 37808;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_5x4_Format: 37809;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_5x5_Format: 37810;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_6x5_Format: 37811;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_6x6_Format: 37812;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_8x5_Format: 37813;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_8x6_Format: 37814;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_8x8_Format: 37815;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_10x5_Format: 37816;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_10x6_Format: 37817;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_10x8_Format: 37818;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_10x10_Format: 37819;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_12x10_Format: 37820;\n/**\n * @remarks Require support for the _WEBGL_compressed_texture_astc_ WebGL extension.\n */\nexport const RGBA_ASTC_12x12_Format: 37821;\n\n// BPTC compressed texture formats\n\n/**\n * @remarks Require support for the _EXT_texture_compression_bptc_ WebGL extension.\n */\nexport const RGBA_BPTC_Format: 36492;\nexport const RGB_BPTC_SIGNED_Format = 36494;\nexport const RGB_BPTC_UNSIGNED_Format = 36495;\n\n// RGTC compressed texture formats\nexport const RED_RGTC1_Format: 36283;\nexport const SIGNED_RED_RGTC1_Format: 36284;\nexport const RED_GREEN_RGTC2_Format: 36285;\nexport const SIGNED_RED_GREEN_RGTC2_Format: 36286;\n\n/**\n * For use with a {@link THREE.CompressedTexture}'s {@link THREE.CompressedTexture.format | .format} property.\n * @remarks Compressed Require support for correct WebGL extension.\n */\nexport type CompressedPixelFormat =\n    | typeof RGB_S3TC_DXT1_Format\n    | typeof RGBA_S3TC_DXT1_Format\n    | typeof RGBA_S3TC_DXT3_Format\n    | typeof RGBA_S3TC_DXT5_Format\n    | typeof RGB_PVRTC_4BPPV1_Format\n    | typeof RGB_PVRTC_2BPPV1_Format\n    | typeof RGBA_PVRTC_4BPPV1_Format\n    | typeof RGBA_PVRTC_2BPPV1_Format\n    | typeof RGB_ETC1_Format\n    | typeof RGB_ETC2_Format\n    | typeof RGBA_ETC2_EAC_Format\n    | typeof RGBA_ASTC_4x4_Format\n    | typeof RGBA_ASTC_5x4_Format\n    | typeof RGBA_ASTC_5x5_Format\n    | typeof RGBA_ASTC_6x5_Format\n    | typeof RGBA_ASTC_6x6_Format\n    | typeof RGBA_ASTC_8x5_Format\n    | typeof RGBA_ASTC_8x6_Format\n    | typeof RGBA_ASTC_8x8_Format\n    | typeof RGBA_ASTC_10x5_Format\n    | typeof RGBA_ASTC_10x6_Format\n    | typeof RGBA_ASTC_10x8_Format\n    | typeof RGBA_ASTC_10x10_Format\n    | typeof RGBA_ASTC_12x10_Format\n    | typeof RGBA_ASTC_12x12_Format\n    | typeof RGBA_BPTC_Format\n    | typeof RGB_BPTC_SIGNED_Format\n    | typeof RGB_BPTC_UNSIGNED_Format\n    | typeof RED_RGTC1_Format\n    | typeof SIGNED_RED_RGTC1_Format\n    | typeof RED_GREEN_RGTC2_Format\n    | typeof SIGNED_RED_GREEN_RGTC2_Format;\n\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * All Possible Texture Pixel Formats Modes. For any Type or SubType of Textures.\n * @remarks Note that the texture must have the correct {@link THREE.Texture.type} set, as described in {@link TextureDataType}.\n * @see {@link WebGLRenderingContext.texImage2D} for details.\n * @see {@link PixelFormat} and {@link DepthTexturePixelFormat} and {@link CompressedPixelFormat}\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n */\nexport type AnyPixelFormat = PixelFormat | DepthTexturePixelFormat | CompressedPixelFormat;\n\n///////////////////////////////////////////////////////////////////////////////\n// Loop styles for AnimationAction\nexport const LoopOnce: 2200;\nexport const LoopRepeat: 2201;\nexport const LoopPingPong: 2202;\nexport type AnimationActionLoopStyles = typeof LoopOnce | typeof LoopRepeat | typeof LoopPingPong;\n\n// Interpolation\nexport const InterpolateDiscrete: 2300;\nexport const InterpolateLinear: 2301;\nexport const InterpolateSmooth: 2302;\nexport type InterpolationModes = typeof InterpolateDiscrete | typeof InterpolateLinear | typeof InterpolateSmooth;\n\n// Interpolant ending modes\nexport const ZeroCurvatureEnding: 2400;\nexport const ZeroSlopeEnding: 2401;\nexport const WrapAroundEnding: 2402;\nexport type InterpolationEndingModes = typeof ZeroCurvatureEnding | typeof ZeroSlopeEnding | typeof WrapAroundEnding;\n\n// Animation blending modes\nexport const NormalAnimationBlendMode: 2500;\nexport const AdditiveAnimationBlendMode: 2501;\nexport type AnimationBlendMode = typeof NormalAnimationBlendMode | typeof AdditiveAnimationBlendMode;\n\n// Triangle Draw modes\nexport const TrianglesDrawMode: 0;\nexport const TriangleStripDrawMode: 1;\nexport const TriangleFanDrawMode: 2;\nexport type TrianglesDrawModes = typeof TrianglesDrawMode | typeof TriangleStripDrawMode | typeof TriangleFanDrawMode;\n\n///////////////////////////////////////////////////////////////////////////////\n// Depth packing strategies\n\nexport const BasicDepthPacking: 3200;\nexport const RGBADepthPacking: 3201;\nexport type DepthPackingStrategies = typeof BasicDepthPacking | typeof RGBADepthPacking;\n\n///////////////////////////////////////////////////////////////////////////////\n// Normal Map types\n\nexport const TangentSpaceNormalMap: 0;\nexport const ObjectSpaceNormalMap: 1;\nexport type NormalMapTypes = typeof TangentSpaceNormalMap | typeof ObjectSpaceNormalMap;\n\nexport const NoColorSpace: \"\";\nexport const SRGBColorSpace: \"srgb\";\nexport const LinearSRGBColorSpace: \"srgb-linear\";\nexport const DisplayP3ColorSpace: \"display-p3\";\nexport const LinearDisplayP3ColorSpace = \"display-p3-linear\";\nexport type ColorSpace =\n    | typeof NoColorSpace\n    | typeof SRGBColorSpace\n    | typeof LinearSRGBColorSpace\n    | typeof DisplayP3ColorSpace\n    | typeof LinearDisplayP3ColorSpace;\n\nexport const LinearTransfer: \"linear\";\nexport const SRGBTransfer: \"srgb\";\nexport type ColorSpaceTransfer = typeof LinearTransfer | typeof SRGBTransfer;\n\nexport const Rec709Primaries: \"rec709\";\nexport const P3Primaries: \"p3\";\nexport type ColorSpacePrimaries = typeof Rec709Primaries | typeof P3Primaries;\n\n// Stencil Op types\nexport const ZeroStencilOp: 0;\nexport const KeepStencilOp: 7680;\nexport const ReplaceStencilOp: 7681;\nexport const IncrementStencilOp: 7682;\nexport const DecrementStencilOp: 7283;\nexport const IncrementWrapStencilOp: 34055;\nexport const DecrementWrapStencilOp: 34056;\nexport const InvertStencilOp: 5386;\nexport type StencilOp =\n    | typeof ZeroStencilOp\n    | typeof KeepStencilOp\n    | typeof ReplaceStencilOp\n    | typeof IncrementStencilOp\n    | typeof DecrementStencilOp\n    | typeof IncrementWrapStencilOp\n    | typeof DecrementWrapStencilOp\n    | typeof InvertStencilOp;\n\n// Stencil Func types\nexport const NeverStencilFunc: 512;\nexport const LessStencilFunc: 513;\nexport const EqualStencilFunc: 514;\nexport const LessEqualStencilFunc: 515;\nexport const GreaterStencilFunc: 516;\nexport const NotEqualStencilFunc: 517;\nexport const GreaterEqualStencilFunc: 518;\nexport const AlwaysStencilFunc: 519;\nexport type StencilFunc =\n    | typeof NeverStencilFunc\n    | typeof LessStencilFunc\n    | typeof EqualStencilFunc\n    | typeof LessEqualStencilFunc\n    | typeof GreaterStencilFunc\n    | typeof NotEqualStencilFunc\n    | typeof GreaterEqualStencilFunc\n    | typeof AlwaysStencilFunc;\n\nexport const NeverCompare: 512;\nexport const LessCompare: 513;\nexport const EqualCompare: 514;\nexport const LessEqualCompare: 515;\nexport const GreaterCompare: 516;\nexport const NotEqualCompare: 517;\nexport const GreaterEqualCompare: 518;\nexport const AlwaysCompare: 519;\nexport type TextureComparisonFunction =\n    | typeof NeverCompare\n    | typeof LessCompare\n    | typeof EqualCompare\n    | typeof LessEqualCompare\n    | typeof GreaterCompare\n    | typeof NotEqualCompare\n    | typeof GreaterEqualCompare\n    | typeof AlwaysCompare;\n\n// usage types\nexport const StaticDrawUsage: 35044;\nexport const DynamicDrawUsage: 35048;\nexport const StreamDrawUsage: 35040;\nexport const StaticReadUsage: 35045;\nexport const DynamicReadUsage: 35049;\nexport const StreamReadUsage: 35041;\nexport const StaticCopyUsage: 35046;\nexport const DynamicCopyUsage: 35050;\nexport const StreamCopyUsage: 35042;\nexport type Usage =\n    | typeof StaticDrawUsage\n    | typeof DynamicDrawUsage\n    | typeof StreamDrawUsage\n    | typeof StaticReadUsage\n    | typeof DynamicReadUsage\n    | typeof StreamReadUsage\n    | typeof StaticCopyUsage\n    | typeof DynamicCopyUsage\n    | typeof StreamCopyUsage;\n\nexport const GLSL1: \"100\";\nexport const GLSL3: \"300 es\";\nexport type GLSLVersion = typeof GLSL1 | typeof GLSL3;\n\nexport const WebGLCoordinateSystem: 2000;\nexport const WebGPUCoordinateSystem: 2001;\nexport type CoordinateSystem = typeof WebGLCoordinateSystem | typeof WebGPUCoordinateSystem;\n\n///////////////////////////////////////////////////////////////////////////////\n// Texture - Internal Pixel Formats\n\n/**\n * For use with a texture's {@link THREE.Texture.internalFormat} property, these define how elements of a {@link THREE.Texture}, or texels, are stored on the GPU.\n * - `R8` stores the red component on 8 bits.\n * - `R8_SNORM` stores the red component on 8 bits. The component is stored as normalized.\n * - `R8I` stores the red component on 8 bits. The component is stored as an integer.\n * - `R8UI` stores the red component on 8 bits. The component is stored as an unsigned integer.\n * - `R16I` stores the red component on 16 bits. The component is stored as an integer.\n * - `R16UI` stores the red component on 16 bits. The component is stored as an unsigned integer.\n * - `R16F` stores the red component on 16 bits. The component is stored as floating point.\n * - `R32I` stores the red component on 32 bits. The component is stored as an integer.\n * - `R32UI` stores the red component on 32 bits. The component is stored as an unsigned integer.\n * - `R32F` stores the red component on 32 bits. The component is stored as floating point.\n * - `RG8` stores the red and green components on 8 bits each.\n * - `RG8_SNORM` stores the red and green components on 8 bits each. Every component is stored as normalized.\n * - `RG8I` stores the red and green components on 8 bits each. Every component is stored as an integer.\n * - `RG8UI` stores the red and green components on 8 bits each. Every component is stored as an unsigned integer.\n * - `RG16I` stores the red and green components on 16 bits each. Every component is stored as an integer.\n * - `RG16UI` stores the red and green components on 16 bits each. Every component is stored as an unsigned integer.\n * - `RG16F` stores the red and green components on 16 bits each. Every component is stored as floating point.\n * - `RG32I` stores the red and green components on 32 bits each. Every component is stored as an integer.\n * - `RG32UI` stores the red and green components on 32 bits. Every component is stored as an unsigned integer.\n * - `RG32F` stores the red and green components on 32 bits. Every component is stored as floating point.\n * - `RGB8` stores the red, green, and blue components on 8 bits each. RGB8_SNORM` stores the red, green, and blue components on 8 bits each. Every component is stored as normalized.\n * - `RGB8I` stores the red, green, and blue components on 8 bits each. Every component is stored as an integer.\n * - `RGB8UI` stores the red, green, and blue components on 8 bits each. Every component is stored as an unsigned integer.\n * - `RGB16I` stores the red, green, and blue components on 16 bits each. Every component is stored as an integer.\n * - `RGB16UI` stores the red, green, and blue components on 16 bits each. Every component is stored as an unsigned integer.\n * - `RGB16F` stores the red, green, and blue components on 16 bits each. Every component is stored as floating point\n * - `RGB32I` stores the red, green, and blue components on 32 bits each. Every component is stored as an integer.\n * - `RGB32UI` stores the red, green, and blue components on 32 bits each. Every component is stored as an unsigned integer.\n * - `RGB32F` stores the red, green, and blue components on 32 bits each. Every component is stored as floating point\n * - `R11F_G11F_B10F` stores the red, green, and blue components respectively on 11 bits, 11 bits, and 10bits. Every component is stored as floating point.\n * - `RGB565` stores the red, green, and blue components respectively on 5 bits, 6 bits, and 5 bits.\n * - `RGB9_E5` stores the red, green, and blue components on 9 bits each.\n * - `RGBA8` stores the red, green, blue, and alpha components on 8 bits each.\n * - `RGBA8_SNORM` stores the red, green, blue, and alpha components on 8 bits. Every component is stored as normalized.\n * - `RGBA8I` stores the red, green, blue, and alpha components on 8 bits each. Every component is stored as an integer.\n * - `RGBA8UI` stores the red, green, blue, and alpha components on 8 bits. Every component is stored as an unsigned integer.\n * - `RGBA16I` stores the red, green, blue, and alpha components on 16 bits. Every component is stored as an integer.\n * - `RGBA16UI` stores the red, green, blue, and alpha components on 16 bits. Every component is stored as an unsigned integer.\n * - `RGBA16F` stores the red, green, blue, and alpha components on 16 bits. Every component is stored as floating point.\n * - `RGBA32I` stores the red, green, blue, and alpha components on 32 bits. Every component is stored as an integer.\n * - `RGBA32UI` stores the red, green, blue, and alpha components on 32 bits. Every component is stored as an unsigned integer.\n * - `RGBA32F` stores the red, green, blue, and alpha components on 32 bits. Every component is stored as floating point.\n * - `RGB5_A1` stores the red, green, blue, and alpha components respectively on 5 bits, 5 bits, 5 bits, and 1 bit.\n * - `RGB10_A2` stores the red, green, blue, and alpha components respectively on 10 bits, 10 bits, 10 bits and 2 bits.\n * - `RGB10_A2UI` stores the red, green, blue, and alpha components respectively on 10 bits, 10 bits, 10 bits and 2 bits. Every component is stored as an unsigned integer.\n * - `SRGB8` stores the red, green, and blue components on 8 bits each.\n * - `SRGB8_ALPHA8` stores the red, green, blue, and alpha components on 8 bits each.\n * - `DEPTH_COMPONENT16` stores the depth component on 16bits.\n * - `DEPTH_COMPONENT24` stores the depth component on 24bits.\n * - `DEPTH_COMPONENT32F` stores the depth component on 32bits. The component is stored as floating point.\n * - `DEPTH24_STENCIL8` stores the depth, and stencil components respectively on 24 bits and 8 bits. The stencil component is stored as an unsigned integer.\n * - `DEPTH32F_STENCIL8` stores the depth, and stencil components respectively on 32 bits and 8 bits. The depth component is stored as floating point, and the stencil component as an unsigned integer.\n * @remark Note that the texture must have the correct {@link THREE.Texture.type} set, as well as the correct {@link THREE.Texture.format}.\n * @see {@link WebGLRenderingContext.texImage2D} and {@link WebGLRenderingContext.texImage3D} for more details regarding the possible combination\n * of {@link THREE.Texture.format}, {@link THREE.Texture.internalFormat}, and {@link THREE.Texture.type}.\n * @see {@link https://registry.khronos.org/webgl/specs/latest/2.0/ | WebGL2 Specification} and\n * {@link https://registry.khronos.org/OpenGL/specs/es/3.0/es_spec_3.0.pdf | OpenGL ES 3.0 Specification} For more in-depth information regarding internal formats.\n */\nexport type PixelFormatGPU =\n    | \"ALPHA\"\n    | \"RGB\"\n    | \"RGBA\"\n    | \"LUMINANCE\"\n    | \"LUMINANCE_ALPHA\"\n    | \"RED_INTEGER\"\n    | \"R8\"\n    | \"R8_SNORM\"\n    | \"R8I\"\n    | \"R8UI\"\n    | \"R16I\"\n    | \"R16UI\"\n    | \"R16F\"\n    | \"R32I\"\n    | \"R32UI\"\n    | \"R32F\"\n    | \"RG8\"\n    | \"RG8_SNORM\"\n    | \"RG8I\"\n    | \"RG8UI\"\n    | \"RG16I\"\n    | \"RG16UI\"\n    | \"RG16F\"\n    | \"RG32I\"\n    | \"RG32UI\"\n    | \"RG32F\"\n    | \"RGB565\"\n    | \"RGB8\"\n    | \"RGB8_SNORM\"\n    | \"RGB8I\"\n    | \"RGB8UI\"\n    | \"RGB16I\"\n    | \"RGB16UI\"\n    | \"RGB16F\"\n    | \"RGB32I\"\n    | \"RGB32UI\"\n    | \"RGB32F\"\n    | \"RGB9_E5\"\n    | \"SRGB8\"\n    | \"R11F_G11F_B10F\"\n    | \"RGBA4\"\n    | \"RGBA8\"\n    | \"RGBA8_SNORM\"\n    | \"RGBA8I\"\n    | \"RGBA8UI\"\n    | \"RGBA16I\"\n    | \"RGBA16UI\"\n    | \"RGBA16F\"\n    | \"RGBA32I\"\n    | \"RGBA32UI\"\n    | \"RGBA32F\"\n    | \"RGB5_A1\"\n    | \"RGB10_A2\"\n    | \"RGB10_A2UI\"\n    | \"SRGB8_ALPHA8\"\n    | \"SRGB8\"\n    | \"DEPTH_COMPONENT16\"\n    | \"DEPTH_COMPONENT24\"\n    | \"DEPTH_COMPONENT32F\"\n    | \"DEPTH24_STENCIL8\"\n    | \"DEPTH32F_STENCIL8\";\n",
      "@types/three@~0/src/Three.Legacy.d.ts": "import { RenderTargetOptions } from \"./core/RenderTarget.d.ts\";\nimport { WebGLRenderTarget } from \"./renderers/WebGLRenderTarget.d.ts\";\nimport { Texture } from \"./textures/Texture.d.ts\";\n\n/**\n * @deprecated THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the \"count\" parameter to enable MRT.\n */\nexport class WebGLMultipleRenderTargets extends WebGLRenderTarget<Texture[]> {\n    readonly isWebGLMultipleRenderTargets: true;\n\n    /**\n     * @deprecated THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the \"count\" parameter to enable MRT.\n     * @param width The width of the render target.\n     * @param height The height of the render target.\n     * @param count The number of render targets.\n     * @param options object that holds texture parameters for an auto-generated target texture and depthBuffer/stencilBuffer booleans.\n     * For an explanation of the texture parameters see {@link Texture}.\n     */\n    constructor(width?: number, height?: number, count?: number, options?: RenderTargetOptions);\n}\n",
      "@types/three@~0/src/animation/KeyframeTrack.d.ts": "import { InterpolationModes } from \"../constants.d.ts\";\nimport { Interpolant } from \"../math/Interpolant.d.ts\";\nimport { CubicInterpolant } from \"../math/interpolants/CubicInterpolant.d.ts\";\nimport { DiscreteInterpolant } from \"../math/interpolants/DiscreteInterpolant.d.ts\";\nimport { LinearInterpolant } from \"../math/interpolants/LinearInterpolant.d.ts\";\n\nexport class KeyframeTrack {\n    /**\n     * @param name\n     * @param times\n     * @param values\n     * @param [interpolation=THREE.InterpolateLinear]\n     */\n    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<any>, interpolation?: InterpolationModes);\n\n    name: string;\n    times: Float32Array;\n    values: Float32Array;\n\n    ValueTypeName: string;\n    TimeBufferType: Float32Array;\n    ValueBufferType: Float32Array;\n\n    /**\n     * @default THREE.InterpolateLinear\n     */\n    DefaultInterpolation: InterpolationModes;\n\n    InterpolantFactoryMethodDiscrete(result: any): DiscreteInterpolant;\n    InterpolantFactoryMethodLinear(result: any): LinearInterpolant;\n    InterpolantFactoryMethodSmooth(result: any): CubicInterpolant;\n\n    setInterpolation(interpolation: InterpolationModes): KeyframeTrack;\n    getInterpolation(): InterpolationModes;\n    createInterpolant(): Interpolant;\n\n    getValueSize(): number;\n\n    shift(timeOffset: number): KeyframeTrack;\n    scale(timeScale: number): KeyframeTrack;\n    trim(startTime: number, endTime: number): KeyframeTrack;\n    validate(): boolean;\n    optimize(): KeyframeTrack;\n    clone(): this;\n\n    static toJSON(track: KeyframeTrack): any;\n}\n",
      "@types/three@~0/src/animation/PropertyBinding.d.ts": "export interface ParseTrackNameResults {\n    nodeName: string;\n    objectName: string;\n    objectIndex: string;\n    propertyName: string;\n    propertyIndex: string;\n}\n\nexport class PropertyBinding {\n    constructor(rootNode: any, path: string, parsedPath?: any);\n\n    path: string;\n    parsedPath: any;\n    node: any;\n    rootNode: any;\n\n    getValue(targetArray: any, offset: number): any;\n    setValue(sourceArray: any, offset: number): void;\n    bind(): void;\n    unbind(): void;\n\n    BindingType: { [bindingType: string]: number };\n    Versioning: { [versioning: string]: number };\n\n    GetterByBindingType: Array<() => void>;\n    SetterByBindingTypeAndVersioning: Array<Array<() => void>>;\n\n    static create(root: any, path: any, parsedPath?: any): PropertyBinding | PropertyBinding.Composite;\n    static sanitizeNodeName(name: string): string;\n    static parseTrackName(trackName: string): ParseTrackNameResults;\n    static findNode(root: any, nodeName: string): any;\n}\n\nexport namespace PropertyBinding {\n    class Composite {\n        constructor(targetGroup: any, path: any, parsedPath?: any);\n\n        getValue(array: any, offset: number): any;\n        setValue(array: any, offset: number): void;\n        bind(): void;\n        unbind(): void;\n    }\n}\n",
      "@types/three@~0/src/animation/PropertyMixer.d.ts": "export class PropertyMixer {\n    constructor(binding: any, typeName: string, valueSize: number);\n\n    binding: any;\n    valueSize: number;\n    buffer: any;\n    cumulativeWeight: number;\n    cumulativeWeightAdditive: number;\n    useCount: number;\n    referenceCount: number;\n\n    accumulate(accuIndex: number, weight: number): void;\n    accumulateAdditive(weight: number): void;\n    apply(accuIndex: number): void;\n    saveOriginalState(): void;\n    restoreOriginalState(): void;\n}\n",
      "@types/three@~0/src/animation/tracks/BooleanKeyframeTrack.d.ts": "import { KeyframeTrack } from \"../KeyframeTrack.d.ts\";\n\nexport class BooleanKeyframeTrack extends KeyframeTrack {\n    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<any>);\n\n    /**\n     * @default 'bool'\n     */\n    ValueTypeName: string;\n}\n",
      "@types/three@~0/src/animation/tracks/ColorKeyframeTrack.d.ts": "import { InterpolationModes } from \"../../constants.d.ts\";\nimport { KeyframeTrack } from \"../KeyframeTrack.d.ts\";\n\nexport class ColorKeyframeTrack extends KeyframeTrack {\n    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);\n\n    /**\n     * @default 'color'\n     */\n    ValueTypeName: string;\n}\n",
      "@types/three@~0/src/animation/tracks/NumberKeyframeTrack.d.ts": "import { InterpolationModes } from \"../../constants.d.ts\";\nimport { KeyframeTrack } from \"../KeyframeTrack.d.ts\";\n\nexport class NumberKeyframeTrack extends KeyframeTrack {\n    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);\n\n    /**\n     * @default 'number'\n     */\n    ValueTypeName: string;\n}\n",
      "@types/three@~0/src/animation/tracks/QuaternionKeyframeTrack.d.ts": "import { InterpolationModes } from \"../../constants.d.ts\";\nimport { KeyframeTrack } from \"../KeyframeTrack.d.ts\";\n\nexport class QuaternionKeyframeTrack extends KeyframeTrack {\n    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);\n\n    /**\n     * @default 'quaternion'\n     */\n    ValueTypeName: string;\n}\n",
      "@types/three@~0/src/animation/tracks/StringKeyframeTrack.d.ts": "import { InterpolationModes } from \"../../constants.d.ts\";\nimport { KeyframeTrack } from \"../KeyframeTrack.d.ts\";\n\nexport class StringKeyframeTrack extends KeyframeTrack {\n    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<any>, interpolation?: InterpolationModes);\n\n    /**\n     * @default 'string'\n     */\n    ValueTypeName: string;\n}\n",
      "@types/three@~0/src/animation/tracks/VectorKeyframeTrack.d.ts": "import { InterpolationModes } from \"../../constants.d.ts\";\nimport { KeyframeTrack } from \"../KeyframeTrack.d.ts\";\n\nexport class VectorKeyframeTrack extends KeyframeTrack {\n    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);\n\n    /**\n     * @default 'vector'\n     */\n    ValueTypeName: string;\n}\n",
      "@types/three@~0/src/animation/AnimationUtils.d.ts": "import { AnimationClip } from \"./AnimationClip.d.ts\";\n\nexport function convertArray(array: any, type: any, forceClone: boolean): any;\nexport function isTypedArray(object: any): boolean;\nexport function getKeyframeOrder(times: number[]): number[];\nexport function sortedArray(values: any[], stride: number, order: number[]): any[];\nexport function flattenJSON(jsonKeys: string[], times: any[], values: any[], valuePropertyName: string): void;\n\n/**\n * @param sourceClip\n * @param name\n * @param startFrame\n * @param endFrame\n * @param [fps=30]\n */\nexport function subclip(\n    sourceClip: AnimationClip,\n    name: string,\n    startFrame: number,\n    endFrame: number,\n    fps?: number,\n): AnimationClip;\n\n/**\n * @param targetClip\n * @param [referenceFrame=0]\n * @param [referenceClip=targetClip]\n * @param [fps=30]\n */\nexport function makeClipAdditive(\n    targetClip: AnimationClip,\n    referenceFrame?: number,\n    referenceClip?: AnimationClip,\n    fps?: number,\n): AnimationClip;\n",
      "@types/three@~0/src/animation/AnimationAction.d.ts": "import { AnimationActionLoopStyles, AnimationBlendMode } from \"../constants.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { AnimationClip } from \"./AnimationClip.d.ts\";\nimport { AnimationMixer } from \"./AnimationMixer.d.ts\";\n// Animation ////////////////////////////////////////////////////////////////////////////////////////\n\nexport class AnimationAction {\n    constructor(mixer: AnimationMixer, clip: AnimationClip, localRoot?: Object3D, blendMode?: AnimationBlendMode);\n\n    blendMode: AnimationBlendMode;\n\n    /**\n     * @default THREE.LoopRepeat\n     */\n    loop: AnimationActionLoopStyles;\n\n    /**\n     * @default 0\n     */\n    time: number;\n\n    /**\n     * @default 1\n     */\n    timeScale: number;\n\n    /**\n     * @default 1\n     */\n    weight: number;\n\n    /**\n     * @default Infinity\n     */\n    repetitions: number;\n\n    /**\n     * @default false\n     */\n    paused: boolean;\n\n    /**\n     * @default true\n     */\n    enabled: boolean;\n\n    /**\n     * @default false\n     */\n    clampWhenFinished: boolean;\n\n    /**\n     * @default true\n     */\n    zeroSlopeAtStart: boolean;\n\n    /**\n     * @default true\n     */\n    zeroSlopeAtEnd: boolean;\n\n    play(): AnimationAction;\n    stop(): AnimationAction;\n    reset(): AnimationAction;\n    isRunning(): boolean;\n    isScheduled(): boolean;\n    startAt(time: number): AnimationAction;\n    setLoop(mode: AnimationActionLoopStyles, repetitions: number): AnimationAction;\n    setEffectiveWeight(weight: number): AnimationAction;\n    getEffectiveWeight(): number;\n    fadeIn(duration: number): AnimationAction;\n    fadeOut(duration: number): AnimationAction;\n    crossFadeFrom(fadeOutAction: AnimationAction, duration: number, warp: boolean): AnimationAction;\n    crossFadeTo(fadeInAction: AnimationAction, duration: number, warp: boolean): AnimationAction;\n    stopFading(): AnimationAction;\n    setEffectiveTimeScale(timeScale: number): AnimationAction;\n    getEffectiveTimeScale(): number;\n    setDuration(duration: number): AnimationAction;\n    syncWith(action: AnimationAction): AnimationAction;\n    halt(duration: number): AnimationAction;\n    warp(statTimeScale: number, endTimeScale: number, duration: number): AnimationAction;\n    stopWarping(): AnimationAction;\n    getMixer(): AnimationMixer;\n    getClip(): AnimationClip;\n    getRoot(): Object3D;\n}\n",
      "@types/three@~0/src/animation/AnimationClip.d.ts": "import { AnimationBlendMode } from \"../constants.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Bone } from \"../objects/Bone.d.ts\";\nimport { KeyframeTrack } from \"./KeyframeTrack.d.ts\";\n\nexport interface MorphTarget {\n    name: string;\n    vertices: Vector3[];\n}\n\nexport class AnimationClip {\n    constructor(name?: string, duration?: number, tracks?: KeyframeTrack[], blendMode?: AnimationBlendMode);\n\n    name: string;\n    tracks: KeyframeTrack[];\n\n    /**\n     * @default THREE.NormalAnimationBlendMode\n     */\n    blendMode: AnimationBlendMode;\n\n    /**\n     * @default -1\n     */\n    duration: number;\n    uuid: string;\n    results: any[];\n\n    resetDuration(): AnimationClip;\n    trim(): AnimationClip;\n    validate(): boolean;\n    optimize(): AnimationClip;\n    clone(): this;\n    toJSON(clip: AnimationClip): any;\n\n    static CreateFromMorphTargetSequence(\n        name: string,\n        morphTargetSequence: MorphTarget[],\n        fps: number,\n        noLoop: boolean,\n    ): AnimationClip;\n    static findByName(clipArray: AnimationClip[], name: string): AnimationClip;\n    static CreateClipsFromMorphTargetSequences(\n        morphTargets: MorphTarget[],\n        fps: number,\n        noLoop: boolean,\n    ): AnimationClip[];\n    static parse(json: any): AnimationClip;\n    static parseAnimation(animation: any, bones: Bone[]): AnimationClip;\n    static toJSON(clip: AnimationClip): any;\n}\n",
      "@types/three@~0/src/animation/AnimationMixer.d.ts": "import { AnimationBlendMode } from \"../constants.d.ts\";\nimport { EventDispatcher } from \"../core/EventDispatcher.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { AnimationAction } from \"./AnimationAction.d.ts\";\nimport { AnimationClip } from \"./AnimationClip.d.ts\";\nimport { AnimationObjectGroup } from \"./AnimationObjectGroup.d.ts\";\n\nexport interface AnimationMixerEventMap {\n    loop: { action: AnimationAction; loopDelta: number };\n    finished: { action: AnimationAction; direction: number };\n}\n\nexport class AnimationMixer extends EventDispatcher<AnimationMixerEventMap> {\n    constructor(root: Object3D | AnimationObjectGroup);\n\n    /**\n     * @default 0\n     */\n    time: number;\n\n    /**\n     * @default 1.0\n     */\n    timeScale: number;\n\n    clipAction(\n        clip: AnimationClip,\n        root?: Object3D | AnimationObjectGroup,\n        blendMode?: AnimationBlendMode,\n    ): AnimationAction;\n    existingAction(clip: AnimationClip, root?: Object3D | AnimationObjectGroup): AnimationAction | null;\n    stopAllAction(): AnimationMixer;\n    update(deltaTime: number): AnimationMixer;\n    setTime(timeInSeconds: number): AnimationMixer;\n    getRoot(): Object3D | AnimationObjectGroup;\n    uncacheClip(clip: AnimationClip): void;\n    uncacheRoot(root: Object3D | AnimationObjectGroup): void;\n    uncacheAction(clip: AnimationClip, root?: Object3D | AnimationObjectGroup): void;\n}\n",
      "@types/three@~0/src/animation/AnimationObjectGroup.d.ts": "export class AnimationObjectGroup {\n    constructor(...args: any[]);\n\n    uuid: string;\n    stats: {\n        bindingsPerObject: number;\n        objects: {\n            total: number;\n            inUse: number;\n        };\n    };\n    readonly isAnimationObjectGroup: true;\n\n    add(...args: any[]): void;\n    remove(...args: any[]): void;\n    uncache(...args: any[]): void;\n}\n",
      "@types/three@~0/src/audio/Audio.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { AudioContext } from \"./AudioContext.d.ts\";\nimport { AudioListener } from \"./AudioListener.d.ts\";\n\n// Extras / Audio /////////////////////////////////////////////////////////////////////\n\n/**\n * Create a non-positional ( global ) {@link Audio} object.\n * This uses the {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API | Web {@link Audio} API}.\n * @example\n * ```typescript\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add(listener);\n * // create a global {@link Audio} source\n * const sound = new THREE.Audio(listener);\n * // load a sound and set it as the {@link Audio} object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load('sounds/ambient.ogg', function (buffer) {\n *     sound.setBuffer(buffer);\n *     sound.setLoop(true);\n *     sound.setVolume(0.5);\n *     sound.play();\n * });\n * ```\n * @see Example: {@link https://threejs.org/examples/#webaudio_sandbox | webaudio / sandbox }\n * @see Example: {@link https://threejs.org/examples/#webaudio_visualizer | webaudio / visualizer }\n * @see {@link https://threejs.org/docs/index.html#api/en/audio/Audio | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/audio/Audio.js | Source}\n */\nexport class Audio<NodeType extends AudioNode = GainNode> extends Object3D {\n    /**\n     * Create a new instance of {@link Audio}\n     * @param listener (required) {@link AudioListener | AudioListener} instance.\n     */\n    constructor(listener: AudioListener);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `Audio`\n     */\n    readonly type: string | \"Audio\";\n\n    /**\n     * A reference to the listener object of this audio.\n     */\n    listener: AudioListener;\n\n    /**\n     * The {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext | AudioContext} of the {@link AudioListener | listener} given in the constructor.\n     */\n    context: AudioContext;\n\n    /**\n     * A {@link https://developer.mozilla.org/en-US/docs/Web/API/GainNode | GainNode} created using\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain | AudioContext.createGain}().\n     */\n    gain: GainNode;\n\n    /**\n     * Whether to start playback automatically.\n     * @defaultValue `false`\n     */\n    autoplay: boolean;\n\n    buffer: AudioBuffer | null;\n\n    /**\n     * Modify pitch, measured in cents. +/- 100 is a semitone. +/- 1200 is an octave.\n     * @defaultValue `0`\n     */\n    detune: number;\n\n    /**\n     * @default false\n     */\n    loop: boolean;\n\n    /**\n     * @default 0\n     */\n    loopStart: number;\n\n    /**\n     * @default 0\n     */\n    loopEnd: number;\n\n    /**\n     * An offset to the time within the {@link Audio} buffer that playback should begin.\n     * Same as the {@link Audio.offset | offset} parameter of {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start | AudioBufferSourceNode.start()}.\n     * @defaultValue `0`\n     */\n    offset: number;\n\n    /**\n     * Overrides the duration of the audio. Same as the {@link Audio.duration | duration} parameter of\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start | AudioBufferSourceNode.start()}.\n     * @defaultValue `undefined` _to play the whole buffer_.\n     */\n    duration: number | undefined;\n\n    /**\n     * Speed of playback.\n     * @defaultValue `1`\n     */\n    playbackRate: number;\n\n    /**\n     * Whether the {@link Audio} is currently playing.\n     * @defaultValue `false`\n     */\n    isPlaying: boolean;\n\n    /**\n     * Whether playback can be controlled using the {@link Audio.play | play}(), {@link Audio.pause | pause}() etc. methods.\n     * @defaultValue `true`\n     */\n    hasPlaybackControl: boolean;\n\n    /**\n     * Type of the {@link Audio} source.\n     * @defaultValue 'empty'.\n     */\n    sourceType: string;\n\n    /**\n     * An {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode | AudioBufferSourceNode} created using\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource | AudioContext.createBufferSource()}.\n     */\n    source: AudioScheduledSourceNode | null;\n\n    /**\n     * Represents an array of {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioNode | AudioNodes}.\n     * Can be used to apply a variety of low-order filters to create more complex sound effects.\n     * In most cases, the array contains instances of {@link https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode | BiquadFilterNodes}.\n     * Filters are set via {@link THREE.Audio.setFilter | Audio.setFilter} or {@link THREE.Audio.setFilters | Audio.setFilters}.\n     * @defaultValue `[]`\n     */\n    filters: AudioNode[];\n\n    /**\n     * Return the {@link Audio.gain | gainNode}.\n     */\n    getOutput(): NodeType;\n\n    /**\n     * Setup the {@link Audio.source | source} to the audioBuffer, and sets {@link Audio.sourceType | sourceType} to 'audioNode'.\n     * @remarks Also sets {@link Audio.hasPlaybackControl | hasPlaybackControl} to false.\n     */\n    setNodeSource(audioNode: AudioScheduledSourceNode): this;\n\n    /**\n     * Applies the given object of type {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement | HTMLMediaElement} as the source of this audio.\n     * @remarks Also sets {@link Audio.hasPlaybackControl | hasPlaybackControl} to false.\n     */\n    setMediaElementSource(mediaElement: HTMLMediaElement): this;\n\n    /**\n     * Applies the given object of type {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaStream | MediaStream} as the source of this audio.\n     * @remarks Also sets {@link Audio.hasPlaybackControl | hasPlaybackControl} to false.\n     */\n    setMediaStreamSource(mediaStream: MediaStream): this;\n\n    /**\n     * Setup the {@link Audio.source | source} to the audioBuffer, and sets {@link Audio.sourceType | sourceType} to 'buffer'.\n     * @remarks If {@link Audio.autoplay | autoplay}, also starts playback.\n     */\n    setBuffer(audioBuffer: AudioBuffer): this;\n\n    /**\n     * If {@link Audio.hasPlaybackControl | hasPlaybackControl} is true, starts playback.\n     */\n    play(delay?: number): this;\n    /**\n     * If {@link Audio.hasPlaybackControl | hasPlaybackControl} is true, pauses playback.\n     */\n    pause(): this;\n    /**\n     * If {@link Audio.hasPlaybackControl | hasPlaybackControl} is enabled, stops playback.\n     */\n    stop(): this;\n\n    /**\n     * Called automatically when playback finished.\n     */\n    onEnded(): void;\n\n    /**\n     * Connect to the {@link THREE.Audio.source | Audio.source}\n     * @remarks This is used internally on initialisation and when setting / removing filters.\n     */\n    connect(): this;\n    /**\n     * Disconnect from the {@link THREE.Audio.source | Audio.source}\n     * @remarks This is used internally when setting / removing filters.\n     */\n    disconnect(): this;\n\n    /**\n     * Returns the detuning of oscillation in cents.\n     */\n    getDetune(): number;\n    /**\n     * Defines the detuning of oscillation in cents.\n     * @param value Expects a `Float`\n     */\n    setDetune(value: number): this;\n\n    /**\n     * Returns the first element of the {@link Audio.filters | filters} array.\n     */\n    getFilter(): AudioNode;\n    /**\n     * Applies a single filter node to the audio.\n     */\n    setFilter(filter: AudioNode): this;\n\n    /**\n     * Returns the {@link Audio.filters | filters} array.\n     */\n    getFilters(): AudioNode[];\n    /**\n     * Applies an array of filter nodes to the audio.\n     * @param value Arrays of filters.\n     */\n    setFilters(value: AudioNode[]): this;\n\n    /**\n     * Return the value of {@link Audio.playbackRate | playbackRate}.\n     */\n    getPlaybackRate(): number;\n    /**\n     * If {@link Audio.hasPlaybackControl | hasPlaybackControl} is enabled, set the {@link Audio.playbackRate | playbackRate} to `value`.\n     * @param value Expects a `Float`\n     */\n    setPlaybackRate(value: number): this;\n\n    /**\n     * Return the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop | source.loop} (whether playback should loop).\n     */\n    getLoop(): boolean;\n    /**\n     * Set {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop | source.loop} to `value` (whether playback should loop).\n     * @param value\n     */\n    setLoop(value: boolean): this;\n\n    /**\n     * Set {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart | source.loopStart} to `value`.\n     * @param value Expects a `Float`\n     */\n    setLoopStart(value: number): this;\n    /**\n     * Set {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd | source.loopEnd} to `value`.\n     * @param value Expects a `Float`\n     */\n    setLoopEnd(value: number): this;\n\n    /**\n     * Return the current volume.\n     */\n    getVolume(): number;\n    /**\n     * Set the volume.\n     * @param value Expects a `Float`\n     */\n    setVolume(value: number): this;\n}\n",
      "@types/three@~0/src/audio/AudioAnalyser.d.ts": "import { Audio } from \"./Audio.d.ts\";\n\n/**\n * Create a {@link AudioAnalyser} object, which uses an {@link https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode | AnalyserNode} to analyse audio data.\n * This uses the {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API | Web Audio API}.\n * @example\n * ```typescript\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add(listener);\n * // create an Audio source\n * const sound = new THREE.Audio(listener);\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load('sounds/ambient.ogg', function (buffer) {\n *     sound.setBuffer(buffer);\n *     sound.setLoop(true);\n *     sound.setVolume(0.5);\n *     sound.play();\n * });\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser(sound, 32);\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n * @see Example: {@link https://threejs.org/examples/#webaudio_sandbox | webaudio / sandbox }\n * @see Example: {@link https://threejs.org/examples/#webaudio_visualizer | webaudio / visualizer }\n * @see {@link https://threejs.org/docs/index.html#api/en/audio/AudioAnalyser | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/audio/AudioAnalyser.js | Source}\n */\nexport class AudioAnalyser {\n    /**\n     * Create a new {@link {@link AudioAnalyser} | AudioAnalyser}.\n     * @param audio\n     * @param fftSize See {@link https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize | AnalyserNode.fftSize }. Expects a `unsigned integer`. Default `2048`.\n     */\n    constructor(audio: Audio<AudioNode>, fftSize?: number);\n\n    /**\n     * An {@link https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode | AnalyserNode} used to analyze audio.\n     */\n    analyser: AnalyserNode;\n\n    /**\n     * A Uint8Array with size determined by {@link https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount | analyser.frequencyBinCount} used to hold analysis data.\n     */\n    data: Uint8Array;\n\n    /**\n     * Uses the Web Audio's {@link https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData | getByteFrequencyData} method\n     */\n    getFrequencyData(): Uint8Array;\n\n    /**\n     * Get the average of the frequencies returned by the {@link AudioAnalyser.getFrequencyData | getFrequencyData} method.\n     */\n    getAverageFrequency(): number;\n}\n",
      "@types/three@~0/src/audio/AudioContext.d.ts": "/**\n * This contains methods for setting up an {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext | AudioContext}.\n * Used internally by the {@link AudioListener | AudioListener} and {@link AudioLoader | AudioLoader} classes.\n * This uses the {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API | Web Audio API}.\n * @see {@link https://threejs.org/docs/index.html#api/en/audio/AudioContext | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/audio/AudioContext.js | Source}\n */\nexport namespace AudioContext {\n    /**\n     * Return the value of the variable `context` in the outer scope, if defined, otherwise set it to a new {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext | AudioContext}.\n     */\n    function getContext(): AudioContext;\n\n    /**\n     * Set the variable `context` in the outer scope to `value`.\n     * @param value\n     */\n    function setContext(context: AudioContext): void;\n}\n",
      "@types/three@~0/src/audio/AudioListener.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { AudioContext } from \"./AudioContext.d.ts\";\n\n/**\n * The {@link AudioListener} represents a virtual {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioListener | listener} of the all positional and non-positional audio effects in the scene.\n * A three.js application usually creates a single instance of {@link AudioListener}  * @remarks\n * It is a mandatory construtor parameter for audios entities like {@link Audio | Audio} and {@link PositionalAudio | PositionalAudio}.\n * In most cases, the listener object is a child of the camera\n * So the 3D transformation of the camera represents the 3D transformation of the listener.\n * @example\n * ```typescript\n * // create an {@link AudioListener} and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add(listener);\n * // create a global audio source\n * const sound = new THREE.Audio(listener);\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load('sounds/ambient.ogg', function (buffer) {\n *     sound.setBuffer(buffer);\n *     sound.setLoop(true);\n *     sound.setVolume(0.5);\n *     sound.play();\n * });\n * ```\n * @see Example: {@link https://threejs.org/examples/#webaudio_sandbox | webaudio / sandbox }\n * @see Example: {@link https://threejs.org/examples/#webaudio_timing | webaudio / timing }\n * @see Example: {@link https://threejs.org/examples/#webaudio_visualizer | webaudio / visualizer }\n * @see {@link https://threejs.org/docs/index.html#api/en/audio/AudioListener | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/audio/AudioListener.js | Source}\n */\nexport class AudioListener extends Object3D {\n    /**\n     * Create a new AudioListener.\n     */\n    constructor();\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `AudioListener`\n     */\n    readonly type: string | \"AudioListener\";\n\n    /**\n     * The {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext | AudioContext} of the {@link {@link AudioListener} | listener} given in the constructor.\n     */\n    context: AudioContext;\n\n    /**\n     * A {@link https://developer.mozilla.org/en-US/docs/Web/API/GainNode | GainNode} created using\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain | AudioContext.createGain()}.\n     */\n    gain: GainNode;\n\n    /**\n     * @defaultValue `null`\n     */\n    filter: AudioNode;\n\n    /**\n     * Time delta value for audio entities. Use in context of {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime | AudioParam.linearRampToValueAtTimeDefault()}.\n     * @defaultValue `0`\n     */\n    timeDelta: number;\n\n    /**\n     * Return the {@link AudioListener.gain | gainNode}.\n     */\n    getInput(): GainNode;\n    /**\n     * Set the {@link AudioListener.filter | filter} property to `null`.\n     */\n    removeFilter(): this;\n\n    /**\n     * Returns the value of the {@link AudioListener.filter | filter} property.\n     */\n    getFilter(): AudioNode;\n    /**\n     * Set the {@link AudioListener.filter | filter} property to `value`.\n     * @param value\n     */\n    setFilter(value: AudioNode): this;\n\n    /**\n     * Return the volume.\n     */\n    getMasterVolume(): number;\n\n    /**\n     * Set the volume.\n     * @param value\n     */\n    setMasterVolume(value: number): this;\n}\n",
      "@types/three@~0/src/audio/PositionalAudio.d.ts": "import { Audio } from \"./Audio.d.ts\";\nimport { AudioListener } from \"./AudioListener.d.ts\";\n\n/**\n * Create a positional audio object.\n * This uses the {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API | Web Audio API}.\n * @example\n * ```typescript\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add(listener);\n * // create the {@link PositionalAudio} object (passing in the listener)\n * const sound = new THREE.PositionalAudio(listener);\n * // load a sound and set it as the {@link PositionalAudio} object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load('sounds/song.ogg', function (buffer) {\n *     sound.setBuffer(buffer);\n *     sound.setRefDistance(20);\n *     sound.play();\n * });\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry(20, 32, 16);\n * const material = new THREE.MeshPhongMaterial({\n *     color: 0xff2200\n * });\n * const mesh = new THREE.Mesh(sphere, material);\n * scene.add(mesh);\n * // finally add the sound to the mesh\n * mesh.add(sound);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webaudio_orientation | webaudio / orientation }\n * @see Example: {@link https://threejs.org/examples/#webaudio_sandbox | webaudio / sandbox }\n * @see Example: {@link https://threejs.org/examples/#webaudio_timing | webaudio / timing }\n * @see {@link https://threejs.org/docs/index.html#api/en/audio/PositionalAudio | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/audio/PositionalAudio.js | Source}\n */\nexport class PositionalAudio extends Audio<PannerNode> {\n    /**\n     * Create a new instance of {@link PositionalAudio}\n     * @param listener (required) {@link AudioListener | AudioListener} instance.\n     */\n    constructor(listener: AudioListener);\n\n    /**\n     * The PositionalAudio's {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode | PannerNode}.\n     */\n    panner: PannerNode;\n\n    /**\n     * Returns the {@link PositionalAudio.panner | panner}.\n     */\n    getOutput(): PannerNode;\n\n    /**\n     * Returns the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance | panner.refDistance}.\n     */\n    getRefDistance(): number;\n    /**\n     * Sets the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance | panner.refDistance}.\n     * @param value Expects a `Float`\n     */\n    setRefDistance(value: number): this;\n\n    /**\n     * Returns the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor | panner.rolloffFactor}.\n     */\n    getRolloffFactor(): number;\n    /**\n     * Sets the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor | panner.rolloffFactor}.\n     * @param value Expects a `Float`\n     */\n    setRolloffFactor(value: number): this;\n\n    /**\n     * Returns the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel | panner.distanceModel}.\n     */\n    getDistanceModel(): string;\n    /**\n     * Sets the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel | panner.distanceModel}.\n     * @param value\n     */\n    setDistanceModel(value: string): this;\n\n    /**\n     * Returns the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance | panner.maxDistance}.\n     */\n    getMaxDistance(): number;\n    /**\n     * Sets the value of {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance | panner.maxDistance}.\n     * @param value Expects a `Float`\n     */\n    setMaxDistance(value: number): this;\n\n    /**\n     * This method can be used in order to transform an omnidirectional sound into a {@link https://developer.mozilla.org/en-US/docs/Web/API/PannerNode | directional sound}.\n     * @param coneInnerAngle Expects a `Float`\n     * @param coneOuterAngle Expects a `Float`\n     * @param coneOuterGain Expects a `Float`\n     */\n    setDirectionalCone(coneInnerAngle: number, coneOuterAngle: number, coneOuterGain: number): this;\n}\n",
      "@types/three@~0/src/cameras/ArrayCamera.d.ts": "import { PerspectiveCamera } from \"./PerspectiveCamera.d.ts\";\n\n/**\n * {@link ArrayCamera} can be used in order to efficiently render a scene with a predefined set of cameras\n * @remarks\n * This is an important performance aspect for rendering VR scenes.\n * An instance of {@link ArrayCamera} always has an array of sub cameras\n * It's mandatory to define for each sub camera the `viewport` property which determines the part of the viewport that is rendered with this camera.\n * @see Example: {@link https://threejs.org/examples/#webgl_camera_array | camera / array }\n * @see {@link https://threejs.org/docs/index.html#api/en/cameras/ArrayCamera | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/cameras/ArrayCamera.js | Source}\n */\nexport class ArrayCamera extends PerspectiveCamera {\n    /**\n     * An array of cameras.\n     * @param array. Default `[]`.\n     */\n    constructor(cameras?: PerspectiveCamera[]);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link ArrayCamera}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isArrayCamera: true;\n\n    /**\n     * An array of cameras.\n     * @defaultValue `[]`\n     */\n    cameras: PerspectiveCamera[];\n}\n",
      "@types/three@~0/src/cameras/Camera.d.ts": "import { CoordinateSystem } from \"../constants.d.ts\";\nimport { Layers } from \"../core/Layers.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Vector4 } from \"../math/Vector4.d.ts\";\n\n/**\n * Abstract base class for cameras\n * @remarks\n * This class should always be inherited when you build a new camera.\n * @see {@link https://threejs.org/docs/index.html#api/en/cameras/Camera | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/cameras/Camera.js | Source}\n */\nexport class Camera extends Object3D {\n    /**\n     * @remarks\n     * Note that this class is not intended to be called directly; you probably want a\n     * {@link THREE.PerspectiveCamera | PerspectiveCamera} or\n     * {@link THREE.OrthographicCamera | OrthographicCamera} instead.\n     */\n    constructor();\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Camera}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCamera: true;\n\n    /**\n     * @override\n     * @defaultValue `Camera`\n     */\n    override readonly type: string | \"Camera\";\n\n    /**\n     * @override\n     * The {@link THREE.Layers | layers} that the {@link Camera} is a member of.\n     * @remarks Objects must share at least one layer with the {@link Camera} to be n when the camera's viewpoint is rendered.\n     * @defaultValue `new THREE.Layers()`\n     */\n    override layers: Layers;\n\n    /**\n     * This is the inverse of matrixWorld.\n     * @remarks MatrixWorld contains the Matrix which has the world transform of the {@link Camera} .\n     * @defaultValue {@link THREE.Matrix4 | `new THREE.Matrix4()`}\n     */\n    matrixWorldInverse: Matrix4;\n\n    /**\n     * This is the matrix which contains the projection.\n     * @defaultValue {@link THREE.Matrix4 | `new THREE.Matrix4()`}\n     */\n    projectionMatrix: Matrix4;\n\n    /**\n     * This is the inverse of projectionMatrix.\n     * @defaultValue {@link THREE.Matrix4 | `new THREE.Matrix4()`}\n     */\n    projectionMatrixInverse: Matrix4;\n\n    coordinateSystem: CoordinateSystem;\n\n    viewport?: Vector4;\n\n    /**\n     * Returns a {@link THREE.Vector3 | Vector3} representing the world space direction in which the {@link Camera} is looking.\n     * @remarks Note: A {@link Camera} looks down its local, negative z-axis.\n     * @param target The result will be copied into this Vector3.\n     */\n    getWorldDirection(target: Vector3): Vector3;\n}\n",
      "@types/three@~0/src/cameras/CubeCamera.d.ts": "import { CoordinateSystem } from \"../constants.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { WebGLCubeRenderTarget } from \"../renderers/WebGLCubeRenderTarget.d.ts\";\nimport { WebGLRenderer } from \"../renderers/WebGLRenderer.d.ts\";\n\n/**\n * Creates **6** {@link THREE.PerspectiveCamera | cameras} that render to a {@link THREE.WebGLCubeRenderTarget | WebGLCubeRenderTarget}.\n * @remarks The cameras are added to the {@link children} array.\n * @example\n * ```typescript\n * // Create cube render target\n * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 128, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );\n *\n * // Create cube camera\n * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );\n * scene.add( cubeCamera );\n *\n * // Create car\n * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );\n * const car = new THREE.Mesh( carGeometry, chromeMaterial );\n * scene.add( car );\n *\n * // Update the render target cube\n * car.visible = false;\n * cubeCamera.position.copy( car.position );\n * cubeCamera.update( renderer, scene );\n *\n * // Render the scene\n * car.visible = true;\n * renderer.render( scene, camera );\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_materials_cubemap_dynamic | materials / cubemap / dynamic }\n * @see {@link https://threejs.org/docs/index.html#api/en/cameras/CubeCamera | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/cameras/CubeCamera.js | Source}\n */\nexport class CubeCamera extends Object3D {\n    /**\n     * Constructs a {@link CubeCamera} that contains 6 {@link PerspectiveCamera | PerspectiveCameras} that render to a {@link THREE.WebGLCubeRenderTarget | WebGLCubeRenderTarget}.\n     * @param near The near clipping distance.\n     * @param far The far clipping distance.\n     * @param renderTarget The destination cube render target.\n     */\n    constructor(near: number, far: number, renderTarget: WebGLCubeRenderTarget);\n\n    /**\n     * @override\n     * @defaultValue `CubeCamera`\n     */\n    override readonly type: string | \"CubeCamera\";\n\n    /**\n     * The destination cube render target.\n     */\n    renderTarget: WebGLCubeRenderTarget;\n\n    coordinateSystem: CoordinateSystem;\n\n    activeMipmapLevel: number;\n\n    updateCoordinateSystem(): void;\n\n    /**\n     * Call this to update the {@link CubeCamera.renderTarget | renderTarget}.\n     * @param renderer The current WebGL renderer\n     * @param scene The current scene\n     */\n    update(renderer: WebGLRenderer, scene: Object3D): void;\n}\n",
      "@types/three@~0/src/cameras/OrthographicCamera.d.ts": "import { Camera } from \"./Camera.d.ts\";\n\n/**\n * Camera that uses {@link https://en.wikipedia.org/wiki/Orthographic_projection | orthographic projection}.\n * In this projection mode, an object's size in the rendered image stays constant regardless of its distance from the camera.\n * This can be useful for rendering 2D scenes and UI elements, amongst other things.\n * @example\n * ```typescript\n * const camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 1000);\n * scene.add(camera);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_camera | camera }\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_cubes_ortho | interactive / cubes / ortho }\n * @see Example: {@link https://threejs.org/examples/#webgl_materials_cubemap_dynamic | materials / cubemap / dynamic }\n * @see Example: {@link https://threejs.org/examples/#webgl_postprocessing_advanced | postprocessing / advanced }\n * @see Example: {@link https://threejs.org/examples/#webgl_postprocessing_dof2 | postprocessing / dof2 }\n * @see Example: {@link https://threejs.org/examples/#webgl_postprocessing_godrays | postprocessing / godrays }\n * @see Example: {@link https://threejs.org/examples/#webgl_rtt | rtt }\n * @see Example: {@link https://threejs.org/examples/#webgl_shaders_tonemapping | shaders / tonemapping }\n * @see Example: {@link https://threejs.org/examples/#webgl_shadowmap | shadowmap }\n * @see {@link https://threejs.org/docs/index.html#api/en/cameras/OrthographicCamera | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/cameras/OrthographicCamera.js | Source}\n */\nexport class OrthographicCamera extends Camera {\n    /**\n     * Creates a new {@link OrthographicCamera}.\n     * @remarks Together these define the camera's {@link https://en.wikipedia.org/wiki/Viewing_frustum | viewing frustum}.\n     * @param left Camera frustum left plane. Default `-1`.\n     * @param right Camera frustum right plane. Default `1`.\n     * @param top Camera frustum top plane. Default `1`.\n     * @param bottom Camera frustum bottom plane. Default `-1`.\n     * @param near Camera frustum near plane. Default `0.1`.\n     * @param far Camera frustum far plane. Default `2000`.\n     */\n    constructor(left?: number, right?: number, top?: number, bottom?: number, near?: number, far?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link OrthographicCamera}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isOrthographicCamera: true;\n\n    /**\n     * @override\n     * @defaultValue `OrthographicCamera`\n     */\n    override readonly type: string | \"OrthographicCamera\";\n\n    /**\n     * Gets or sets the zoom factor of the camera.\n     * @defaultValue `1`\n     */\n    zoom: number;\n\n    /**\n     * Set by {@link setViewOffset | .setViewOffset()}.\n     * @defaultValue `null`\n     */\n    view: null | {\n        enabled: boolean;\n        fullWidth: number;\n        fullHeight: number;\n        offsetX: number;\n        offsetY: number;\n        width: number;\n        height: number;\n    };\n\n    /**\n     * Camera frustum left plane.\n     * @remarks Expects a `Float`\n     * @defaultValue `-1`\n     */\n    left: number;\n\n    /**\n     * Camera frustum right plane.\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    right: number;\n\n    /**\n     * Camera frustum top plane.\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    top: number;\n\n    /**\n     * Camera frustum bottom plane.\n     * @remarks Expects a `Float`.\n     * @defaultValue `-1`\n     */\n    bottom: number;\n\n    /**\n     * Camera frustum near plane.`.\n     * @remarks The valid range is between `0` and the current value of the {@link far | .far} plane.\n     * @remarks Note that, unlike for the {@link THREE.PerspectiveCamera | PerspectiveCamera}, `0` is a valid value for an {@link THREE.OrthographicCamera | OrthographicCamera's} near plane.\n     * @remarks Expects a `Float`\n     * @defaultValue `0.1`\n     */\n    near: number;\n\n    /**\n     * Camera frustum far plane.\n     * @remarks Must be greater than the current value of {@link near | .near} plane.\n     * @remarks Expects a `Float`\n     * @defaultValue `2000`\n     */\n    far: number;\n\n    /**\n     * Updates the camera projection matrix\n     * @remarks Must be called after any change of parameters.\n     */\n    updateProjectionMatrix(): void;\n\n    /**\n     * Sets an offset in a larger {@link https://en.wikipedia.org/wiki/Viewing_frustum | viewing frustum}\n     * @remarks\n     * This is useful for multi-window or multi-monitor/multi-machine setups\n     * For an example on how to use it see {@link PerspectiveCamera.setViewOffset | PerspectiveCamera}.\n     * @see {@link THREE.PerspectiveCamera.setViewOffset | PerspectiveCamera}.\n     * @param fullWidth Full width of multiview setup Expects a `Float`.\n     * @param fullHeight Full height of multiview setup Expects a `Float`.\n     * @param x Horizontal offset of subcamera Expects a `Float`.\n     * @param y Vertical offset of subcamera Expects a `Float`.\n     * @param width Width of subcamera Expects a `Float`.\n     * @param height Height of subcamera Expects a `Float`.\n     */\n    setViewOffset(\n        fullWidth: number,\n        fullHeight: number,\n        offsetX: number,\n        offsetY: number,\n        width: number,\n        height: number,\n    ): void;\n\n    /**\n     * Removes any offset set by the {@link setViewOffset | .setViewOffset} method.\n     */\n    clearViewOffset(): void;\n}\n",
      "@types/three@~0/src/cameras/PerspectiveCamera.d.ts": "import { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Camera } from \"./Camera.d.ts\";\n\n/**\n * Camera that uses {@link https://en.wikipedia.org/wiki/Perspective_(graphical) | perspective projection}.\n * This projection mode is designed to mimic the way the human eye sees\n * @remarks\n * It is the most common projection mode used for rendering a 3D scene.\n * @example\n * ```typescript\n * const camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000);\n * scene.add(camera);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_animation_skinning_blending | animation / skinning / blending }\n * @see Example: {@link https://threejs.org/examples/#webgl_animation_skinning_morph | animation / skinning / morph }\n * @see Example: {@link https://threejs.org/examples/#webgl_effects_stereo | effects / stereo }\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_cubes | interactive / cubes }\n * @see Example: {@link https://threejs.org/examples/#webgl_loader_collada_skinning | loader / collada / skinning }\n * @see {@link https://threejs.org/docs/index.html#api/en/cameras/PerspectiveCamera | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/cameras/PerspectiveCamera.js | Source}\n */\nexport class PerspectiveCamera extends Camera {\n    /**\n     * Creates a new {@link PerspectiveCamera}.\n     * @remarks Together these define the camera's {@link https://en.wikipedia.org/wiki/Viewing_frustum | viewing frustum}.\n     * @param fov Camera frustum vertical field of view. Default `50`.\n     * @param aspect Camera frustum aspect ratio. Default `1`.\n     * @param near Camera frustum near plane. Default `0.1`.\n     * @param far Camera frustum far plane. Default `2000`.\n     */\n    constructor(fov?: number, aspect?: number, near?: number, far?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Camera}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isPerspectiveCamera: true;\n\n    /**\n     * @override\n     * @defaultValue `PerspectiveCamera`\n     */\n    override readonly type: string | \"PerspectiveCamera\";\n\n    /**\n     * Gets or sets the zoom factor of the camera.\n     * @defaultValue `1`\n     */\n    zoom: number;\n\n    /**\n     * Camera frustum vertical field of view, from bottom to top of view, in degrees.\n     * @remarks Expects a `Float`\n     * @defaultValue `50`\n     */\n    fov: number;\n\n    /**\n     * Camera frustum aspect ratio, usually the canvas width / canvas height.\n     * @remarks Expects a `Float`\n     * @defaultValue `1`, _(square canvas)_.\n     */\n    aspect: number;\n\n    /**\n     * Camera frustum near plane.\n     * @remarks The valid range is greater than `0` and less than the current value of the {@link far | .far} plane.\n     * @remarks Note that, unlike for the {@link THREE.OrthographicCamera | OrthographicCamera}, `0` is **not** a valid value for a {@link PerspectiveCamera |PerspectiveCamera's}. near plane.\n     * @defaultValue `0.1`\n     * @remarks Expects a `Float`\n     */\n    near: number;\n\n    /**\n     * Camera frustum far plane.\n     * @remarks Must be greater than the current value of {@link near | .near} plane.\n     * @remarks Expects a `Float`\n     * @defaultValue `2000`\n     */\n    far: number;\n\n    /**\n     * Object distance used for stereoscopy and depth-of-field effects.\n     * @remarks This parameter does not influence the projection matrix unless a {@link THREE.StereoCamera | StereoCamera} is being used.\n     * @remarks Expects a `Float`\n     * @defaultValue `10`\n     */\n    focus: number;\n\n    /**\n     * Frustum window specification or null.\n     * This is set using the {@link setViewOffset | .setViewOffset} method and cleared using {@link clearViewOffset | .clearViewOffset}.\n     * @defaultValue `null`\n     */\n    view: null | {\n        enabled: boolean;\n        fullWidth: number;\n        fullHeight: number;\n        offsetX: number;\n        offsetY: number;\n        width: number;\n        height: number;\n    };\n\n    /**\n     * Film size used for the larger axis.\n     * This parameter does not influence the projection matrix unless {@link filmOffset | .filmOffset} is set to a nonzero value.\n     * @remarks Expects a `Float`\n     * @defaultValue `35`, _millimeters_.\n     */\n    filmGauge: number;\n\n    /**\n     * Horizontal off-center offset in the same unit as {@link filmGauge | .filmGauge}.\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    filmOffset: number;\n\n    /**\n     * Returns the focal length of the current {@link .fov | fov} in respect to {@link filmGauge | .filmGauge}.\n     */\n    getFocalLength(): number;\n\n    /**\n     * Sets the FOV by focal length in respect to the current {@link filmGauge | .filmGauge}.\n     * @remarks By default, the focal length is specified for a `35mm` (full frame) camera.\n     * @param focalLength Expects a `Float`\n     */\n    setFocalLength(focalLength: number): void;\n\n    /**\n     * Returns the current vertical field of view angle in degrees considering {@link zoom | .zoom}.\n     */\n    getEffectiveFOV(): number;\n\n    /**\n     * Returns the width of the image on the film\n     * @remarks\n     * If {@link aspect | .aspect}. is greater than or equal to one (landscape format), the result equals {@link filmGauge | .filmGauge}.\n     */\n    getFilmWidth(): number;\n\n    /**\n     * Returns the height of the image on the film\n     * @remarks\n     * If {@link aspect | .aspect}. is less than or equal to one (portrait format), the result equals {@link filmGauge | .filmGauge}.\n     */\n    getFilmHeight(): number;\n\n    /**\n     * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n     * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.\n     */\n    getViewBounds(distance: number, minTarget: Vector2, maxTarget: Vector2): void;\n\n    /**\n     * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n     * Copies the result into the target Vector2, where x is width and y is height.\n     */\n    getViewSize(distance: number, target: Vector2): Vector2;\n\n    /**\n     * Sets an offset in a larger frustum.\n     * @remarks\n     * This is useful for multi-window or multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is _1920x1080_ and\n     * the monitors are in grid like this\n     * ```\n     * ┌───┬───┬───┐\n     * │ A │ B │ C │\n     * ├───┼───┼───┤\n     * │ D │ E │ F │\n     * └───┴───┴───┘\n     * ```\n     * then for each monitor you would call it like this\n     * ```typescript\n     *   const w = 1920;\n     *   const h = 1080;\n     *   const fullWidth = w * 3;\n     *   const fullHeight = h * 2;\n     *\n     *   // Monitor - A\n     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *   // Monitor - B\n     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *   // Monitor - C\n     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *   // Monitor - D\n     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *   // Monitor - E\n     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *   // Monitor - F\n     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     * ```\n     * Note there is no reason monitors have to be the same size or in a grid.\n     * @param fullWidth Full width of multiview setup Expects a `Float`.\n     * @param fullHeight Full height of multiview setup Expects a `Float`.\n     * @param x Horizontal offset of subcamera Expects a `Float`.\n     * @param y Vertical offset of subcamera Expects a `Float`.\n     * @param width Width of subcamera Expects a `Float`.\n     * @param height Height of subcamera Expects a `Float`.\n     */\n    setViewOffset(fullWidth: number, fullHeight: number, x: number, y: number, width: number, height: number): void;\n\n    /**\n     * Removes any offset set by the {@link setViewOffset | .setViewOffset} method.\n     */\n    clearViewOffset(): void;\n\n    /**\n     * Updates the camera projection matrix\n     * @remarks Must be called after any change of parameters.\n     */\n    updateProjectionMatrix(): void;\n\n    /**\n     * @deprecated Use {@link PerspectiveCamera.setFocalLength | .setFocalLength()} and {@link PerspectiveCamera.filmGauge | .filmGauge} instead.\n     */\n    setLens(focalLength: number, frameHeight?: number): void;\n}\n",
      "@types/three@~0/src/cameras/StereoCamera.d.ts": "import { Camera } from \"./Camera.d.ts\";\nimport { PerspectiveCamera } from \"./PerspectiveCamera.d.ts\";\n\n/**\n * Dual {@link PerspectiveCamera | PerspectiveCamera}s used for effects such as\n * {@link https://en.wikipedia.org/wiki/Anaglyph_3D | 3D Anaglyph} or\n * {@link https://en.wikipedia.org/wiki/parallax_barrier | Parallax Barrier}.\n * @see Example: {@link https://threejs.org/examples/#webgl_effects_anaglyph | effects / anaglyph }\n * @see Example: {@link https://threejs.org/examples/#webgl_effects_parallaxbarrier | effects / parallaxbarrier }\n * @see Example: {@link https://threejs.org/examples/#webgl_effects_stereo | effects / stereo }\n * @see {@link https://threejs.org/docs/index.html#api/en/cameras/StereoCamera | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/cameras/StereoCamera.js | Source}\n */\nexport class StereoCamera extends Camera {\n    constructor();\n\n    type: \"StereoCamera\";\n\n    /**\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    aspect: number;\n\n    /**\n     * @remarks Expects a `Float`\n     * @defaultValue `0.064`\n     */\n    eyeSep: number;\n\n    /**\n     * The Left camera.\n     * A {@link PerspectiveCamera } added to {@link THREE.PerspectiveCamera.layers | layer 1}\n     * @remarks Objects to be rendered by the **left** camera must also be added to this layer.\n     */\n    cameraL: PerspectiveCamera;\n\n    /**\n     * The Right camera.\n     * A {@link PerspectiveCamera } added to {@link THREE.PerspectiveCamera.layers | layer 2}\n     * @remarks Objects to be rendered by the **right** camera must also be added to this layer.\n     */\n    cameraR: PerspectiveCamera;\n\n    /**\n     * Update the stereo cameras based on the camera passed in.\n     * @param camera\n     */\n    update(camera: PerspectiveCamera): void;\n}\n",
      "@types/three@~0/src/core/BufferAttribute.d.ts": "import { AttributeGPUType, Usage } from \"../constants.d.ts\";\nimport { Matrix3 } from \"../math/Matrix3.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array;\n\n/**\n * This class stores data for an attribute (such as vertex positions, face indices, normals, colors, UVs, and any custom attributes )\n * associated with a {@link THREE.BufferGeometry | BufferGeometry}, which allows for more efficient passing of data to the GPU\n * @remarks\n * When working with _vector-like_ data, the _`.fromBufferAttribute( attribute, index )`_ helper methods on\n * {@link THREE.Vector2.fromBufferAttribute | Vector2},\n * {@link THREE.Vector3.fromBufferAttribute | Vector3},\n * {@link THREE.Vector4.fromBufferAttribute | Vector4}, and\n * {@link THREE.Color.fromBufferAttribute | Color} classes may be helpful.\n * @see {@link THREE.BufferGeometry | BufferGeometry} for details and a usage examples.\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry | WebGL / BufferGeometry - Clean up Memory}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/BufferAttribute | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class BufferAttribute {\n    /**\n     * This creates a new {@link THREE.GLBufferAttribute | GLBufferAttribute} object.\n     * @param array Must be a `TypedArray`. Used to instantiate the buffer.\n     * This array should have `itemSize * numVertices` elements, where numVertices is the number of vertices in the associated {@link THREE.BufferGeometry | BufferGeometry}.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @throws `TypeError` When the {@link array} is not a `TypedArray`;\n     */\n    constructor(array: TypedArray, itemSize: number, normalized?: boolean);\n\n    /**\n     * Optional name for this attribute instance.\n     * @defaultValue ''\n     */\n    name: string;\n\n    /**\n     * The {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray | TypedArray} holding data stored in the buffer.\n     * @returns `TypedArray`\n     */\n    array: TypedArray;\n\n    /**\n     * The length of vectors that are being stored in the {@link BufferAttribute.array | array}.\n     * @remarks Expects a `Integer`\n     */\n    itemSize: number;\n\n    /**\n     * Defines the intended usage pattern of the data store for optimization purposes.\n     * Corresponds to the {@link BufferAttribute.usage | usage} parameter of\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData | WebGLRenderingContext.bufferData}.\n     * @remarks\n     * After the initial use of a buffer, its usage cannot be changed. Instead, instantiate a new one and set the desired usage before the next render.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/BufferAttributeUsage | Buffer Attribute Usage Constants} for all possible values.\n     * @see {@link BufferAttribute.setUsage | setUsage}\n     * @defaultValue {@link THREE.StaticDrawUsage | THREE.StaticDrawUsage}.\n     */\n    usage: Usage;\n\n    /**\n     * Configures the bound GPU type for use in shaders. Either {@link FloatType} or {@link IntType}, default is {@link FloatType}.\n     *\n     * Note: this only has an effect for integer arrays and is not configurable for float arrays. For lower precision\n     * float types, see https://threejs.org/docs/#api/en/core/bufferAttributeTypes/BufferAttributeTypes.\n     */\n    gpuType: AttributeGPUType;\n\n    /**\n     * This can be used to only update some components of stored vectors (for example, just the component related to color).\n     * @defaultValue `{ offset: number = 0; count: number = -1 }`\n     * @deprecated Will be removed in r169. Use \"addUpdateRange()\" instead.\n     */\n    updateRange: {\n        /**\n         * Position at which to start update.\n         * @defaultValue `0`\n         */\n        offset: number;\n        /** @defaultValue `-1`, which means don't use update ranges. */\n        count: number;\n    };\n\n    /**\n     * This can be used to only update some components of stored vectors (for example, just the component related to\n     * color). Use the {@link .addUpdateRange} function to add ranges to this array.\n     */\n    updateRanges: Array<{\n        /**\n         * Position at which to start update.\n         */\n        start: number;\n        /**\n         * The number of components to update.\n         */\n        count: number;\n    }>;\n\n    /**\n     * A version number, incremented every time the {@link BufferAttribute.needsUpdate | needsUpdate} property is set to true.\n     * @remarks Expects a `Integer`\n     * @defaultValue `0`\n     */\n    version: number;\n\n    /**\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL shader code.\n     * @see `constructor` above for details.\n     * @defaultValue `false`\n     */\n    normalized: boolean;\n\n    /**\n     * Represents the number of items this buffer attribute stores. It is internally computed by dividing the\n     * {@link BufferAttribute.array | array}'s length by the {@link BufferAttribute.itemSize | itemSize}. Read-only\n     * property.\n     */\n    readonly count: number;\n\n    /**\n     * Flag to indicate that this attribute has changed and should be re-sent to the GPU.\n     * Set this to true when you modify the value of the array.\n     * @remarks Setting this to true also increments the {@link BufferAttribute.version | version}.\n     * @remarks _set-only property_.\n     */\n    set needsUpdate(value: boolean);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link BufferAttribute}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isBufferAttribute: true;\n\n    /**\n     * A callback function that is executed after the Renderer has transferred the attribute array data to the GPU.\n     */\n    onUploadCallback: () => void;\n\n    /**\n     * Sets the value of the {@link onUploadCallback} property.\n     * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry | WebGL / BufferGeometry} this is used to free memory after the buffer has been transferred to the GPU.\n     * @see {@link onUploadCallback}\n     * @param callback function that is executed after the Renderer has transferred the attribute array data to the GPU.\n     */\n    onUpload(callback: () => void): this;\n\n    /**\n     * Set {@link BufferAttribute.usage | usage}\n     * @remarks\n     * After the initial use of a buffer, its usage cannot be changed. Instead, instantiate a new one and set the desired usage before the next render.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/BufferAttributeUsage | Buffer Attribute Usage Constants} for all possible values.\n     * @see {@link BufferAttribute.usage | usage}\n     * @param value Corresponds to the {@link BufferAttribute.usage | usage} parameter of\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData | WebGLRenderingContext.bufferData}.\n     */\n    setUsage(usage: Usage): this;\n\n    /**\n     * Adds a range of data in the data array to be updated on the GPU. Adds an object describing the range to the\n     * {@link .updateRanges} array.\n     */\n    addUpdateRange(start: number, count: number): void;\n\n    /**\n     * Clears the {@link .updateRanges} array.\n     */\n    clearUpdateRanges(): void;\n\n    /**\n     * @returns a copy of this {@link BufferAttribute}.\n     */\n    clone(): BufferAttribute;\n\n    /**\n     * Copies another {@link BufferAttribute} to this {@link BufferAttribute}.\n     * @param bufferAttribute\n     */\n    copy(source: BufferAttribute): this;\n\n    /**\n     * Copy a vector from bufferAttribute[index2] to {@link BufferAttribute.array | array}[index1].\n     * @param index1\n     * @param bufferAttribute\n     * @param index2\n     */\n    copyAt(index1: number, attribute: BufferAttribute, index2: number): this;\n\n    /**\n     * Copy the array given here (which can be a normal array or `TypedArray`) into {@link BufferAttribute.array | array}.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set | TypedArray.set} for notes on requirements if copying a `TypedArray`.\n     */\n    copyArray(array: ArrayLike<number>): this;\n\n    /**\n     * Applies matrix {@link Matrix3 | m} to every Vector3 element of this {@link BufferAttribute}.\n     * @param m\n     */\n    applyMatrix3(m: Matrix3): this;\n\n    /**\n     * Applies matrix {@link Matrix4 | m} to every Vector3 element of this {@link BufferAttribute}.\n     * @param m\n     */\n    applyMatrix4(m: Matrix4): this;\n\n    /**\n     * Applies normal matrix {@link Matrix3 | m} to every Vector3 element of this {@link BufferAttribute}.\n     * @param m\n     */\n    applyNormalMatrix(m: Matrix3): this;\n\n    /**\n     * Applies matrix {@link Matrix4 | m} to every Vector3 element of this {@link BufferAttribute}, interpreting the elements as a direction vectors.\n     * @param m\n     */\n    transformDirection(m: Matrix4): this;\n\n    /**\n     * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set | TypedArray.set}( {@link value}, {@link offset} )\n     * on the {@link BufferAttribute.array | array}.\n     * @param value {@link Array | Array} or `TypedArray` from which to copy values.\n     * @param offset index of the {@link BufferAttribute.array | array} at which to start copying. Expects a `Integer`. Default `0`.\n     * @throws `RangeError` When {@link offset} is negative or is too large.\n     */\n    set(value: ArrayLike<number> | ArrayBufferView, offset?: number): this;\n\n    /**\n     * Returns the given component of the vector at the given index.\n     */\n    getComponent(index: number, component: number): number;\n\n    /**\n     * Sets the given component of the vector at the given index.\n     */\n    setComponent(index: number, component: number, value: number): void;\n\n    /**\n     * Returns the x component of the vector at the given index.\n     * @param index Expects a `Integer`\n     */\n    getX(index: number): number;\n\n    /**\n     * Sets the x component of the vector at the given index.\n     * @param index Expects a `Integer`\n     * @param x\n     */\n    setX(index: number, x: number): this;\n\n    /**\n     * Returns the y component of the vector at the given index.\n     * @param index Expects a `Integer`\n     */\n    getY(index: number): number;\n\n    /**\n     * Sets the y component of the vector at the given index.\n     * @param index Expects a `Integer`\n     * @param y\n     */\n    setY(index: number, y: number): this;\n\n    /**\n     * Returns the z component of the vector at the given index.\n     * @param index Expects a `Integer`\n     */\n    getZ(index: number): number;\n\n    /**\n     * Sets the z component of the vector at the given index.\n     * @param index Expects a `Integer`\n     * @param z\n     */\n    setZ(index: number, z: number): this;\n\n    /**\n     * Returns the w component of the vector at the given index.\n     * @param index Expects a `Integer`\n     */\n    getW(index: number): number;\n\n    /**\n     * Sets the w component of the vector at the given index.\n     * @param index Expects a `Integer`\n     * @param w\n     */\n    setW(index: number, z: number): this;\n\n    /**\n     * Sets the x and y components of the vector at the given index.\n     * @param index Expects a `Integer`\n     * @param x\n     * @param y\n     */\n    setXY(index: number, x: number, y: number): this;\n\n    /**\n     * Sets the x, y and z components of the vector at the given index.\n     * @param index Expects a `Integer`\n     * @param x\n     * @param y\n     * @param z\n     */\n    setXYZ(index: number, x: number, y: number, z: number): this;\n\n    /**\n     * Sets the x, y, z and w components of the vector at the given index.\n     * @param index Expects a `Integer`\n     * @param x\n     * @param y\n     * @param z\n     * @param w\n     */\n    setXYZW(index: number, x: number, y: number, z: number, w: number): this;\n\n    /**\n     * Convert this object to three.js to the `data.attributes` part of {@link https://github.com/mrdoob/three.js/wiki/JSON-Geometry-format-4 | JSON Geometry format v4},\n     */\n    toJSON(): {\n        itemSize: number;\n        type: string;\n        array: number[];\n        normalized: boolean;\n    };\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array: Int8Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Int8BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Int8BufferAttribute | Int8BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Int8Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array: Uint8Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Uint8BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Uint8BufferAttribute | Uint8BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Uint8Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray: Uint8ClampedArray}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Uint8ClampedBufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Uint8ClampedBufferAttribute | Uint8ClampedBufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Uint8ClampedArray`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array: Int16Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Int16BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Int16BufferAttribute | Int16BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Int16Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array: Uint16Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Uint16BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Uint16BufferAttribute | Uint16BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Uint16Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array: Int32Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Int32BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Int32BufferAttribute | Int32BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Int32Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array: Uint32Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Uint32BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Uint32BufferAttribute | Uint32BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Uint32Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array: Uint16Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Float16BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Float16BufferAttribute | Float16BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Uint16Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n\n/**\n * A {@link THREE.BufferAttribute | BufferAttribute} for {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array: Float32Array}\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects | TypedArray}\n * @see {@link THREE.BufferAttribute | BufferAttribute} for details and for inherited methods and properties.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/bufferAttributeTypes/BufferAttributeTypes | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferAttribute.js | Source}\n */\nexport class Float32BufferAttribute extends BufferAttribute {\n    /**\n     * This creates a new {@link THREE.Float32BufferAttribute | Float32BufferAttribute} object.\n     * @param array This can be a typed or untyped (normal) array or an integer length. An array value will be converted to `Float32Array`.\n     * If a length is given a new `TypedArray` will created, initialized with all elements set to zero.\n     * @param itemSize the number of values of the {@link array} that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a _position_, _normal_, or _color_),\n     * then itemSize should be `3`.\n     * @param normalized Applies to integer data only.\n     * Indicates how the underlying data in the buffer maps to the values in the GLSL code.\n     * For instance, if {@link array} is an instance of `UInt16Array`, and  {@link normalized} is true,\n     * the values `0` - `+65535` in the array data will be mapped to `0.0f` - `+1.0f` in the GLSL attribute.\n     * An `Int16Array` (signed) would map from `-32768` - `+32767` to `-1.0f` - `+1.0f`.\n     * If normalized is false, the values will be converted to floats unmodified,\n     * i.e. `32767` becomes `32767.0f`.\n     * Default `false`.\n     * @see {@link THREE.BufferAttribute | BufferAttribute}\n     */\n    constructor(\n        array: Iterable<number> | ArrayLike<number> | ArrayBuffer | number,\n        itemSize: number,\n        normalized?: boolean,\n    );\n}\n",
      "@types/three@~0/src/core/BufferGeometry.d.ts": "import { Box3 } from \"../math/Box3.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Quaternion } from \"../math/Quaternion.d.ts\";\nimport { Sphere } from \"../math/Sphere.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { BufferAttribute } from \"./BufferAttribute.d.ts\";\nimport { EventDispatcher } from \"./EventDispatcher.d.ts\";\nimport { GLBufferAttribute } from \"./GLBufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"./InterleavedBufferAttribute.d.ts\";\n\nexport type NormalBufferAttributes = Record<string, BufferAttribute | InterleavedBufferAttribute>;\nexport type NormalOrGLBufferAttributes = Record<\n    string,\n    BufferAttribute | InterleavedBufferAttribute | GLBufferAttribute\n>;\n\n/**\n * A representation of mesh, line, or point geometry\n * Includes vertex positions, face indices, normals, colors, UVs, and custom attributes within buffers, reducing the cost of passing all this data to the GPU.\n * @remarks\n * To read and edit data in BufferGeometry attributes, see {@link THREE.BufferAttribute | BufferAttribute} documentation.\n * @example\n * ```typescript\n * const geometry = new THREE.BufferGeometry();\n *\n * // create a simple square shape. We duplicate the top left and bottom right\n * // vertices because each vertex needs to appear once per triangle.\n * const vertices = new Float32Array( [\n *   -1.0, -1.0,  1.0, // v0\n *    1.0, -1.0,  1.0, // v1\n *    1.0,  1.0,  1.0, // v2\n *\n *    1.0,  1.0,  1.0, // v3\n *   -1.0,  1.0,  1.0, // v4\n *   -1.0, -1.0,  1.0  // v5\n * ] );\n *\n * // itemSize = 3 because there are 3 values (components) per vertex\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * ```\n * @example\n * ```typescript\n * const geometry = new THREE.BufferGeometry();\n *\n * const vertices = new Float32Array( [\n *   -1.0, -1.0,  1.0, // v0\n *    1.0, -1.0,  1.0, // v1\n *    1.0,  1.0,  1.0, // v2\n *   -1.0,  1.0,  1.0, // v3\n * ] );\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n *\n * const indices = [\n *   0, 1, 2,\n *   2, 3, 0,\n * ];\n *\n * geometry.setIndex( indices );\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry | Mesh with non-indexed faces}\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_indexed | Mesh with indexed faces}\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_lines | Lines}\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_lines_indexed | Indexed Lines}\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_custom_attributes_particles | Particles}\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_rawshader | Raw Shaders}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/BufferGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/BufferGeometry.js | Source}\n */\nexport class BufferGeometry<\n    Attributes extends NormalOrGLBufferAttributes = NormalBufferAttributes,\n> extends EventDispatcher<{ dispose: {} }> {\n    /**\n     * This creates a new {@link THREE.BufferGeometry | BufferGeometry} object.\n     */\n    constructor();\n\n    /**\n     * Unique number for this {@link THREE.BufferGeometry | BufferGeometry} instance.\n     * @remarks Expects a `Integer`\n     */\n    id: number;\n\n    /**\n     * {@link http://en.wikipedia.org/wiki/Universally_unique_identifier | UUID} of this object instance.\n     * @remarks This gets automatically assigned and shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * Optional name for this {@link THREE.BufferGeometry | BufferGeometry} instance.\n     * @defaultValue `''`\n     */\n    name: string;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `BufferGeometry`\n     */\n    readonly type: string | \"BufferGeometry\";\n\n    /**\n     * Allows for vertices to be re-used across multiple triangles; this is called using \"indexed triangles\".\n     * Each triangle is associated with the indices of three vertices. This attribute therefore stores the index of each vertex for each triangular face.\n     * If this attribute is not set, the {@link THREE.WebGLRenderer | renderer}  assumes that each three contiguous positions represent a single triangle.\n     * @defaultValue `null`\n     */\n    index: BufferAttribute | null;\n\n    /**\n     * This hashmap has as id the name of the attribute to be set and as value the {@link THREE.BufferAttribute | buffer} to set it to. Rather than accessing this property directly,\n     * use {@link setAttribute | .setAttribute} and {@link getAttribute | .getAttribute} to access attributes of this geometry.\n     * @defaultValue `{}`\n     */\n    attributes: Attributes;\n\n    /**\n     * Hashmap of {@link THREE.BufferAttribute | BufferAttributes} holding details of the geometry's morph targets.\n     * @remarks\n     * Once the geometry has been rendered, the morph attribute data cannot be changed.\n     * You will have to call {@link dispose | .dispose}(), and create a new instance of {@link THREE.BufferGeometry | BufferGeometry}.\n     * @defaultValue `{}`\n     */\n    morphAttributes: {\n        [name: string]: Array<BufferAttribute | InterleavedBufferAttribute>; // TODO Replace for 'Record<>'\n    };\n\n    /**\n     * Used to control the morph target behavior; when set to true, the morph target data is treated as relative offsets, rather than as absolute positions/normals.\n     * @defaultValue `false`\n     */\n    morphTargetsRelative: boolean;\n\n    /**\n     * Split the geometry into groups, each of which will be rendered in a separate WebGL draw call. This allows an array of materials to be used with the geometry.\n     * @remarks Every vertex and index must belong to exactly one group — groups must not share vertices or indices, and must not leave vertices or indices unused.\n     * @remarks Use {@link addGroup | .addGroup} to add groups, rather than modifying this array directly.\n     * @defaultValue `[]`\n     */\n    groups: Array<{\n        /**\n         * Specifies the first element in this draw call – the first vertex for non-indexed geometry, otherwise the first triangle index.\n         * @remarks Expects a `Integer`\n         */\n        start: number;\n        /**\n         * Specifies how many vertices (or indices) are included.\n         * @remarks Expects a `Integer`\n         */\n        count: number;\n        /**\n         * Specifies the material array index to use.\n         * @remarks Expects a `Integer`\n         */\n        materialIndex?: number | undefined;\n    }>;\n\n    /**\n     * Bounding box for the {@link THREE.BufferGeometry | BufferGeometry}, which can be calculated with {@link computeBoundingBox | .computeBoundingBox()}.\n     * @remarks Bounding boxes aren't computed by default. They need to be explicitly computed, otherwise they are `null`.\n     * @defaultValue `null`\n     */\n    boundingBox: Box3 | null;\n\n    /**\n     * Bounding sphere for the {@link THREE.BufferGeometry | BufferGeometry}, which can be calculated with {@link computeBoundingSphere | .computeBoundingSphere()}.\n     * @remarks bounding spheres aren't computed by default. They need to be explicitly computed, otherwise they are `null`.\n     * @defaultValue `null`\n     */\n    boundingSphere: Sphere | null;\n\n    /**\n     * Determines the part of the geometry to render. This should not be set directly, instead use {@link setDrawRange | .setDrawRange(...)}.\n     * @remarks For non-indexed {@link THREE.BufferGeometry | BufferGeometry}, count is the number of vertices to render.\n     * @remarks For indexed {@link THREE.BufferGeometry | BufferGeometry}, count is the number of indices to render.\n     * @defaultValue `{ start: 0, count: Infinity }`\n     */\n    drawRange: { start: number; count: number };\n\n    /**\n     * An object that can be used to store custom data about the BufferGeometry. It should not hold references to functions as these will not be cloned.\n     * @defaultValue `{}`\n     */\n    userData: Record<string, any>;\n\n    /**\n     * Read-only flag to check if a given object is of type {@link BufferGeometry}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isBufferGeometry: true;\n\n    /**\n     * Return the {@link index | .index} buffer.\n     */\n    getIndex(): BufferAttribute | null;\n\n    /**\n     * Set the {@link THREE.BufferGeometry.index | .index} buffer.\n     * @param index\n     */\n    setIndex(index: BufferAttribute | number[] | null): this;\n\n    /**\n     * Sets an {@link attributes | attribute} to this geometry with the specified name.\n     * @remarks\n     * Use this rather than the attributes property, because an internal hashmap of {@link attributes | .attributes} is maintained to speed up iterating over attributes.\n     * @param name\n     * @param attribute\n     */\n    setAttribute<K extends keyof Attributes>(name: K, attribute: Attributes[K]): this;\n\n    /**\n     * Returns the {@link attributes | attribute} with the specified name.\n     * @param name\n     */\n    getAttribute<K extends keyof Attributes>(name: K): Attributes[K];\n\n    /**\n     * Deletes the  {@link attributes | attribute} with the specified name.\n     * @param name\n     */\n    deleteAttribute(name: keyof Attributes): this;\n\n    /**\n     * Returns true if the {@link attributes | attribute} with the specified name exists.\n     * @param name\n     */\n    hasAttribute(name: keyof Attributes): boolean;\n\n    /**\n     * Adds a group to this geometry\n     * @see the {@link BufferGeometry.groups | groups} property for details.\n     * @param start\n     * @param count\n     * @param materialIndex\n     */\n    addGroup(start: number, count: number, materialIndex?: number): void;\n\n    /**\n     * Clears all groups.\n     */\n    clearGroups(): void;\n\n    /**\n     * Set the {@link drawRange | .drawRange} property\n     * @remarks For non-indexed BufferGeometry, count is the number of vertices to render\n     * @remarks For indexed BufferGeometry, count is the number of indices to render.\n     * @param start\n     * @param count is the number of vertices or indices to render. Expects a `Integer`\n     */\n    setDrawRange(start: number, count: number): void;\n\n    /**\n     * Applies the matrix transform to the geometry.\n     * @param matrix\n     */\n    applyMatrix4(matrix: Matrix4): this;\n\n    /**\n     * Applies the rotation represented by the quaternion to the geometry.\n     * @param quaternion\n     */\n    applyQuaternion(quaternion: Quaternion): this;\n\n    /**\n     * Rotate the geometry about the X axis. This is typically done as a one time operation, and not during a loop.\n     * @remarks Use {@link THREE.Object3D.rotation | Object3D.rotation} for typical real-time mesh rotation.\n     * @param angle radians. Expects a `Float`\n     */\n    rotateX(angle: number): this;\n\n    /**\n     * Rotate the geometry about the Y axis.\n     * @remarks This is typically done as a one time operation, and not during a loop.\n     * @remarks Use {@link THREE.Object3D.rotation | Object3D.rotation} for typical real-time mesh rotation.\n     * @param angle radians. Expects a `Float`\n     */\n    rotateY(angle: number): this;\n\n    /**\n     * Rotate the geometry about the Z axis.\n     * @remarks This is typically done as a one time operation, and not during a loop.\n     * @remarks Use {@link THREE.Object3D.rotation | Object3D.rotation} for typical real-time mesh rotation.\n     * @param angle radians. Expects a `Float`\n     */\n    rotateZ(angle: number): this;\n\n    /**\n     * Translate the geometry.\n     * @remarks This is typically done as a one time operation, and not during a loop.\n     * @remarks Use {@link THREE.Object3D.position | Object3D.position} for typical real-time mesh rotation.\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     * @param z Expects a `Float`\n     */\n    translate(x: number, y: number, z: number): this;\n\n    /**\n     * Scale the geometry data.\n     * @remarks This is typically done as a one time operation, and not during a loop.\n     * @remarks Use {@link THREE.Object3D.scale | Object3D.scale} for typical real-time mesh scaling.\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     * @param z Expects a `Float`\n     */\n    scale(x: number, y: number, z: number): this;\n\n    /**\n     * Rotates the geometry to face a point in space.\n     * @remarks This is typically done as a one time operation, and not during a loop.\n     * @remarks Use {@link THREE.Object3D.lookAt | Object3D.lookAt} for typical real-time mesh usage.\n     * @param vector A world vector to look at.\n     */\n    lookAt(vector: Vector3): this;\n\n    /**\n     * Center the geometry based on the bounding box.\n     */\n    center(): this;\n\n    /**\n     * Sets the attributes for this BufferGeometry from an array of points.\n     * @param points\n     */\n    setFromPoints(points: Vector3[] | Vector2[]): this;\n\n    /**\n     * Computes the bounding box of the geometry, and updates the {@link .boundingBox} attribute. The bounding box is\n     * not computed by the engine; it must be computed by your app. You may need to recompute the bounding box if the\n     * geometry vertices are modified.\n     */\n    computeBoundingBox(): void;\n\n    /**\n     * Computes the bounding sphere of the geometry, and updates the {@link .boundingSphere} attribute. The engine\n     * automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling. You\n     * may need to recompute the bounding sphere if the geometry vertices are modified.\n     */\n    computeBoundingSphere(): void;\n\n    /**\n     * Calculates and adds a tangent attribute to this geometry.\n     * The computation is only supported for indexed geometries and if position, normal, and uv attributes are defined\n     * @remarks\n     * When using a tangent space normal map, prefer the MikkTSpace algorithm provided by\n     * {@link BufferGeometryUtils.computeMikkTSpaceTangents} instead.\n     */\n    computeTangents(): void;\n\n    /**\n     * Computes vertex normals for the given vertex data. For indexed geometries, the method sets each vertex normal to\n     * be the average of the face normals of the faces that share that vertex. For non-indexed geometries, vertices are\n     * not shared, and the method sets each vertex normal to be the same as the face normal.\n     */\n    computeVertexNormals(): void;\n\n    /**\n     * Every normal vector in a geometry will have a magnitude of 1\n     * @remarks This will correct lighting on the geometry surfaces.\n     */\n    normalizeNormals(): void;\n\n    /**\n     * Return a non-index version of an indexed BufferGeometry.\n     */\n    toNonIndexed(): BufferGeometry;\n\n    /**\n     * Convert the buffer geometry to three.js {@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4 | JSON Object/Scene format}.\n     */\n    toJSON(): {};\n\n    /**\n     * Creates a clone of this BufferGeometry\n     */\n    clone(): this;\n\n    /**\n     * Copies another BufferGeometry to this BufferGeometry.\n     * @param source\n     */\n    copy(source: BufferGeometry): this;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance.\n     * @remarks Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/core/Clock.d.ts": "/**\n * Object for keeping track of time\n * @remarks\n * This uses {@link https://developer.mozilla.org/en-US/docs/Web/API/Performance/now | performance.now} if it is available,\n * otherwise it reverts to the less accurate {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now | Date.now}.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/Clock | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/Clock.js | Source}\n */\nexport class Clock {\n    /**\n     * Create a new instance of {@link THREE.Clock | Clock}\n     * @param autoStart - Whether to automatically start the clock when {@link getDelta | .getDelta()} is called for the first time. Default `true`\n     */\n    constructor(autoStart?: boolean);\n\n    /**\n     * If set, starts the clock automatically when {@link getDelta | .getDelta()} is called for the first time.\n     * @defaultValue `true`\n     */\n    autoStart: boolean;\n\n    /**\n     * Holds the time at which the clock's {@link start | .start()} method was last called.\n     * @defaultValue `0`\n     */\n    startTime: number;\n\n    /**\n     * Holds the time at which the clock's {@link start | .start()}, {@link getElapsedTime | .getElapsedTime()} or {@link getDelta | .getDelta()} methods were last called.\n     * @defaultValue `0`\n     */\n    oldTime: number;\n\n    /**\n     * Keeps track of the total time that the clock has been running.\n     * @defaultValue `0`\n     */\n    elapsedTime: number;\n\n    /**\n     * Whether the clock is running or not.\n     * @defaultValue `false`\n     */\n    running: boolean;\n\n    /**\n     * Starts clock.\n     * @remarks\n     * Also sets the {@link startTime | .startTime} and {@link oldTime | .oldTime} to the current time,\n     * sets {@link elapsedTime | .elapsedTime} to `0` and {@link running | .running} to `true`.\n     */\n    start(): void;\n\n    /**\n     * Stops clock and sets {@link oldTime | oldTime} to the current time.\n     */\n    stop(): void;\n\n    /**\n     * Get the seconds passed since the clock started and sets {@link oldTime | .oldTime} to the current time.\n     * @remarks\n     * If {@link autoStart | .autoStart} is `true` and the clock is not running, also starts the clock.\n     */\n    getElapsedTime(): number;\n\n    /**\n     * Get the seconds passed since the time {@link oldTime | .oldTime} was set and sets {@link oldTime | .oldTime} to the current time.\n     * @remarks\n     * If {@link autoStart | .autoStart} is `true` and the clock is not running, also starts the clock.\n     */\n    getDelta(): number;\n}\n",
      "@types/three@~0/src/core/EventDispatcher.d.ts": "/**\n * The minimal basic Event that can be dispatched by a {@link EventDispatcher<>}.\n */\nexport interface BaseEvent<TEventType extends string = string> {\n    readonly type: TEventType;\n}\n\n/**\n * The minimal expected contract of a fired Event that was dispatched by a {@link EventDispatcher<>}.\n */\nexport interface Event<TEventType extends string = string, TTarget = unknown> {\n    readonly type: TEventType;\n    readonly target: TTarget;\n}\n\nexport type EventListener<TEventData, TEventType extends string, TTarget> = (\n    event: TEventData & Event<TEventType, TTarget>,\n) => void;\n\n/**\n * JavaScript events for custom objects\n * @example\n * ```typescript\n * // Adding events to a custom object\n * class Car extends EventDispatcher {\n *   start() {\n *     this.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\n *   }\n * };\n * // Using events with the custom object\n * const car = new Car();\n * car.addEventListener( 'start', ( event ) => {\n *   alert( event.message );\n * } );\n * car.start();\n * ```\n * @see {@link https://github.com/mrdoob/eventdispatcher.js | mrdoob EventDispatcher on GitHub}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/EventDispatcher | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/EventDispatcher.js | Source}\n */\nexport class EventDispatcher<TEventMap extends {} = {}> {\n    /**\n     * Creates {@link THREE.EventDispatcher | EventDispatcher} object.\n     */\n    constructor();\n\n    /**\n     * Adds a listener to an event type.\n     * @param type The type of event to listen to.\n     * @param listener The function that gets called when the event is fired.\n     */\n    addEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): void;\n    addEventListener<T extends string>(type: T, listener: EventListener<{}, T, this>): void;\n\n    /**\n     * Checks if listener is added to an event type.\n     * @param type The type of event to listen to.\n     * @param listener The function that gets called when the event is fired.\n     */\n    hasEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): boolean;\n    hasEventListener<T extends string>(type: T, listener: EventListener<{}, T, this>): boolean;\n\n    /**\n     * Removes a listener from an event type.\n     * @param type The type of the listener that gets removed.\n     * @param listener The listener function that gets removed.\n     */\n    removeEventListener<T extends Extract<keyof TEventMap, string>>(\n        type: T,\n        listener: EventListener<TEventMap[T], T, this>,\n    ): void;\n    removeEventListener<T extends string>(type: T, listener: EventListener<{}, T, this>): void;\n\n    /**\n     * Fire an event type.\n     * @param event The event that gets fired.\n     */\n    dispatchEvent<T extends Extract<keyof TEventMap, string>>(event: BaseEvent<T> & TEventMap[T]): void;\n}\n",
      "@types/three@~0/src/core/GLBufferAttribute.d.ts": "/**\n * This buffer attribute class does not construct a VBO.\n * Instead, it uses whatever VBO is passed in constructor and can later be altered via the {@link buffer | .buffer} property.\n * @remarks\n * It is required to pass additional params alongside the VBO\n * Those are: the GL context, the GL data type, the number of components per vertex, the number of bytes per component, and the number of vertices.\n * @remarks\n * The most common use case for this class is when some kind of GPGPU calculation interferes or even produces the VBOs in question.\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_glbufferattribute | WebGL / buffergeometry / glbufferattribute}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/GLBufferAttribute | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/GLBufferAttribute.js | Source}\n */\nexport class GLBufferAttribute {\n    /**\n     * This creates a new GLBufferAttribute object.\n     * @param buffer Must be a {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer | WebGLBuffer}. See {@link GLBufferAttribute.buffer | .buffer}\n     * @param type One of {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants#Data_types | WebGL Data Types}. See {@link GLBufferAttribute.type | .type}\n     * @param itemSize How many values make up each item (vertex). See {@link GLBufferAttribute.itemSize | .itemSize}\n     * @param elementSize `1`, `2` or `4`. The corresponding size (in bytes) for the given {@link type} param. See {@link GLBufferAttribute.elementSize | .elementSize}\n     * @param count The expected number of vertices in VBO. See {@link GLBufferAttribute.count | .count}\n     */\n    constructor(buffer: WebGLBuffer, type: GLenum, itemSize: number, elementSize: 1 | 2 | 4, count: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link GLBufferAttribute}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isGLBufferAttribute: true;\n\n    /**\n     * Optional name for this attribute instance.\n     * @defaultValue `\"\"`\n     */\n    name: string;\n\n    /**\n     * The current {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer | WebGLBuffer} instance.\n     */\n    buffer: WebGLBuffer;\n\n    /**\n     * A {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants#Data_types | WebGL Data Type} describing the underlying VBO contents.\n     *\n     * #### WebGL Data Type (`GLenum`)\n     * - gl.BYTE: 0x1400\n     * - gl.UNSIGNED_BYTE: 0x1401\n     * - gl.SHORT: 0x1402\n     * - gl.UNSIGNED_SHORT: 0x1403\n     * - gl.INT: 0x1404\n     * - gl.UNSIGNED_INT: 0x1405\n     * - gl.FLOAT: 0x1406\n     * @remarks Set this property together with {@link elementSize | .elementSize}. The recommended way is using the {@link setType | .setType()} method.\n     * @remarks Expects a `DataType` `GLenum` _possible values:_ `0x1400` `0x1401` `0x1402` `0x1403` `0x1404` `0x1405` `0x1406`\n     */\n    type: GLenum;\n\n    /**\n     * How many values make up each item (vertex).\n     * @remarks The number of values of the array that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a position, normal, or color), then itemSize should be 3.\n     * @remarks Expects a `Integer`\n     */\n    itemSize: number;\n\n    /**\n     * Stores the corresponding size in bytes for the current {@link type | .type} property value.\n     *\n     * The corresponding size (_in bytes_) for the given \"type\" param.\n     * #### WebGL Data Type (`GLenum`)\n     * - gl.BYTE: 1\n     * - gl.UNSIGNED_BYTE: 1\n     * - gl.SHORT: 2\n     * - gl.UNSIGNED_SHORT: 2\n     * - gl.INT: 4\n     * - gl.UNSIGNED_INT: 4\n     * - gl.FLOAT: 4\n     * @remarks Set this property together with {@link type | .type}. The recommended way is using the {@link setType | .setType} method.\n     * @see `constructor`` for a list of known type sizes.\n     * @remarks Expects a `1`, `2` or `4`\n     */\n    elementSize: 1 | 2 | 4;\n\n    /**\n     * The expected number of vertices in VBO.\n     * @remarks Expects a `Integer`\n     */\n    count: number;\n\n    /**\n     * A version number, incremented every time the needsUpdate property is set to true.\n     * @remarks Expects a `Integer`\n     */\n    version: number;\n\n    /**\n     * Setting this to true increments {@link version | .version}.\n     * @remarks _set-only property_.\n     */\n    set needsUpdate(value: boolean);\n\n    /**\n     * Sets the {@link buffer | .buffer} property.\n     */\n    setBuffer(buffer: WebGLBuffer): this;\n\n    /**\n     * Sets the both {@link GLBufferAttribute.type | type} and {@link GLBufferAttribute.elementSize | elementSize} properties.\n     */\n    setType(type: GLenum, elementSize: 1 | 2 | 4): this;\n\n    /**\n     * Sets the {@link GLBufferAttribute.itemSize | itemSize} property.\n     */\n    setItemSize(itemSize: number): this;\n\n    /**\n     * Sets the {@link GLBufferAttribute.count | count} property.\n     */\n    setCount(count: number): this;\n}\n",
      "@types/three@~0/src/core/InstancedBufferAttribute.d.ts": "import { BufferAttribute, TypedArray } from \"./BufferAttribute.d.ts\";\n\n/**\n * An instanced version of {@link THREE.BufferAttribute | BufferAttribute}.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/InstancedBufferAttribute | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/InstancedBufferAttribute.js | Source}\n */\nexport class InstancedBufferAttribute extends BufferAttribute {\n    /**\n     * Create a new instance of {@link THREE.InstancedBufferAttribute | InstancedBufferAttribute}\n     * @param array\n     * @param itemSize\n     * @param normalized\n     * @param meshPerAttribute\n     */\n    constructor(array: TypedArray, itemSize: number, normalized?: boolean, meshPerAttribute?: number);\n\n    /**\n     * Defines how often a value of this buffer attribute should be repeated.\n     * A value of one means that each value of the instanced attribute is used for a single instance.\n     * A value of two means that each value is used for two consecutive instances (and so on).\n     * @defaultValue `1`\n     */\n    meshPerAttribute: number;\n\n    /**\n     * Read-only flag to check if a given object is of type {@link InstancedBufferAttribute}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isInstancedBufferAttribute: true;\n}\n",
      "@types/three@~0/src/core/InstancedBufferGeometry.d.ts": "import { BufferGeometry } from \"./BufferGeometry.d.ts\";\n\n/**\n * An instanced version of {@link THREE.BufferGeometry | BufferGeometry}.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/InstancedBufferGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/InstancedBufferGeometry.js | Source}\n */\nexport class InstancedBufferGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link InstancedBufferGeometry}\n     */\n    constructor();\n\n    /**\n     * @defaultValue `InstancedBufferGeometry`\n     */\n    type: string;\n\n    /**\n     * Read-only flag to check if a given object is of type {@link InstancedBufferGeometry}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isInstancedBufferGeometry: true;\n\n    /**\n     * @defaultValue `Infinity`\n     */\n    instanceCount: number;\n\n    /**\n     * Copies the given {@link InstancedBufferGeometry} to this instance.\n     * @param source\n     * @override\n     */\n    copy(source: InstancedBufferGeometry): this;\n}\n",
      "@types/three@~0/src/core/InstancedInterleavedBuffer.d.ts": "import { TypedArray } from \"./BufferAttribute.d.ts\";\nimport { InterleavedBuffer } from \"./InterleavedBuffer.d.ts\";\n\n/**\n * An instanced version of {@link THREE.InterleavedBuffer | InterleavedBuffer}.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/InstancedInterleavedBuffer | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/InstancedInterleavedBuffer.js | Source}\n */\nexport class InstancedInterleavedBuffer extends InterleavedBuffer {\n    /**\n     * Create a new instance of {@link InstancedInterleavedBuffer}\n     * @param array\n     * @param itemSize\n     * @param meshPerAttribute\n     */\n    constructor(array: TypedArray, stride: number, meshPerAttribute?: number);\n\n    /**\n     * @defaultValue `1`\n     */\n    meshPerAttribute: number;\n}\n",
      "@types/three@~0/src/core/InterleavedBuffer.d.ts": "import { Usage } from \"../constants.d.ts\";\nimport { TypedArray } from \"./BufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"./InterleavedBufferAttribute.d.ts\";\n\n/**\n * **\"Interleaved\"** means that multiple attributes, possibly of different types, (e.g., _position, normal, uv, color_) are packed into a single array buffer.\n * An introduction into interleaved arrays can be found here: {@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html | Interleaved array basics}\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_points_interleaved | webgl / buffergeometry / points / interleaved}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/InterleavedBuffer | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/InterleavedBuffer.js | Source}\n */\nexport class InterleavedBuffer {\n    /**\n     * Create a new instance of {@link InterleavedBuffer}\n     * @param array A {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray | TypedArray} with a shared buffer. Stores the geometry data.\n     * @param stride The number of typed-array elements per vertex. Expects a `Integer`\n     */\n    constructor(array: TypedArray, stride: number);\n\n    /**\n     * A {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray | TypedArray} with a shared buffer. Stores the geometry data.\n     */\n    array: TypedArray;\n\n    /**\n     * The number of {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray | TypedArray} elements per vertex.\n     * @remarks Expects a `Integer`\n     */\n    stride: number;\n\n    /**\n     * Defines the intended usage pattern of the data store for optimization purposes.\n     * Corresponds to the {@link BufferAttribute.usage | usage} parameter of\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData | WebGLRenderingContext.bufferData}.\n     * @remarks\n     * After the initial use of a buffer, its usage cannot be changed. Instead, instantiate a new one and set the desired usage before the next render.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/BufferAttributeUsage | Buffer Attribute Usage Constants} for all possible values.\n     * @see {@link BufferAttribute.setUsage | setUsage}\n     * @defaultValue {@link THREE.StaticDrawUsage | THREE.StaticDrawUsage}.\n     */\n    usage: Usage;\n\n    /**\n     * Object containing offset and count.\n     * @defaultValue `{ offset: number = 0; count: number = -1 }`\n     * @deprecated Will be removed in r169. Use \"addUpdateRange()\" instead.\n     */\n    updateRange: {\n        /** @defaultValue `0` */\n        offset: number;\n        /** @defaultValue `-1` */\n        count: number;\n    };\n\n    /**\n     * This can be used to only update some components of stored data. Use the {@link .addUpdateRange} function to add\n     * ranges to this array.\n     */\n    updateRanges: Array<{\n        /**\n         * Position at which to start update.\n         */\n        start: number;\n        /**\n         * The number of components to update.\n         */\n        count: number;\n    }>;\n\n    /**\n     * A version number, incremented every time the {@link BufferAttribute.needsUpdate | needsUpdate} property is set to true.\n     * @remarks Expects a `Integer`\n     * @defaultValue `0`\n     */\n    version: number;\n\n    /**\n     * Gives the total number of elements in the array.\n     * @remarks Expects a `Integer`\n     * @defaultValue 0\n     */\n    count: number;\n\n    /**\n     * Flag to indicate that this attribute has changed and should be re-sent to the GPU.\n     * Set this to true when you modify the value of the array.\n     * @remarks Setting this to true also increments the {@link BufferAttribute.version | version}.\n     * @remarks _set-only property_.\n     */\n    set needsUpdate(value: boolean);\n\n    /**\n     * {@link http://en.wikipedia.org/wiki/Universally_unique_identifier | UUID} of this object instance.\n     * @remarks This gets automatically assigned and shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set | TypedArray.set}( {@link value}, {@link offset} )\n     * on the {@link BufferAttribute.array | array}.\n     * @param value The source `TypedArray`.\n     * @param offset index of the {@link BufferAttribute.array | array} at which to start copying. Expects a `Integer`. Default `0`.\n     * @throws `RangeError` When {@link offset} is negative or is too large.\n     */\n    set(value: ArrayLike<number>, offset: number): this;\n\n    /**\n     * Set {@link BufferAttribute.usage | usage}\n     * @remarks\n     * After the initial use of a buffer, its usage cannot be changed. Instead, instantiate a new one and set the desired usage before the next render.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/BufferAttributeUsage | Buffer Attribute Usage Constants} for all possible values.\n     * @see {@link BufferAttribute.usage | usage}\n     * @param value Corresponds to the {@link BufferAttribute.usage | usage} parameter of\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData | WebGLRenderingContext.bufferData}.\n     */\n    setUsage(value: Usage): this;\n\n    /**\n     * Adds a range of data in the data array to be updated on the GPU. Adds an object describing the range to the\n     * {@link .updateRanges} array.\n     */\n    addUpdateRange(start: number, count: number): void;\n\n    /**\n     * Clears the {@link .updateRanges} array.\n     */\n    clearUpdateRanges(): void;\n\n    /**\n     * Copies another {@link InterleavedBuffer} to this {@link InterleavedBuffer} instance.\n     * @param source\n     */\n    copy(source: InterleavedBuffer): this;\n\n    /**\n     * Copies data from {@link attribute}[{@link index2}] to {@link InterleavedBuffer.array | array}[{@link index1}].\n     * @param index1 Expects a `Integer`\n     * @param attribute\n     * @param index2 Expects a `Integer`\n     */\n    copyAt(index1: number, attribute: InterleavedBufferAttribute, index2: number): this;\n\n    /**\n     * Creates a clone of this {@link InterleavedBuffer}.\n     * @param data This object holds shared array buffers required for properly cloning geometries with interleaved attributes.\n     */\n    clone(data: {}): InterleavedBuffer;\n\n    /**\n     * Serializes this {@link InterleavedBuffer}.\n     * Converting to {@link https://github.com/mrdoob/three.js/wiki/JSON-Geometry-format-4 | JSON Geometry format v4},\n     * @param data This object holds shared array buffers required for properly serializing geometries with interleaved attributes.\n     */\n    toJSON(data: {}): {\n        uuid: string;\n        buffer: string;\n        type: string;\n        stride: number;\n    };\n}\n",
      "@types/three@~0/src/core/InterleavedBufferAttribute.d.ts": "import { Matrix } from \"../math/Matrix3.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { BufferAttribute, TypedArray } from \"./BufferAttribute.d.ts\";\nimport { InterleavedBuffer } from \"./InterleavedBuffer.d.ts\";\n\n/**\n * @see {@link https://threejs.org/docs/index.html#api/en/core/InterleavedBufferAttribute | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/InterleavedBufferAttribute.js | Source}\n */\nexport class InterleavedBufferAttribute {\n    /**\n     * Create a new instance of {@link THREE.InterleavedBufferAttribute | InterleavedBufferAttribute}.\n     * @param interleavedBuffer\n     * @param itemSize\n     * @param offset\n     * @param normalized Default `false`.\n     */\n    constructor(interleavedBuffer: InterleavedBuffer, itemSize: number, offset: number, normalized?: boolean);\n\n    /**\n     * Optional name for this attribute instance.\n     * @defaultValue `''`\n     */\n    name: string;\n\n    /**\n     * The {@link InterleavedBuffer | InterleavedBuffer} instance passed in the constructor.\n     */\n    data: InterleavedBuffer;\n\n    /**\n     * How many values make up each item.\n     * @remarks Expects a `Integer`\n     */\n    itemSize: number;\n\n    /**\n     * The offset in the underlying array buffer where an item starts.\n     * @remarks Expects a `Integer`\n     */\n    offset: number;\n\n    /**\n     * @defaultValue `false`\n     */\n    normalized: boolean;\n\n    /**\n     * The value of {@link data | .data}.{@link InterleavedBuffer.count | count}.\n     * If the buffer is storing a 3-component item (such as a _position, normal, or color_), then this will count the number of such items stored.\n     * @remarks _get-only property_.\n     * @remarks Expects a `Integer`\n     */\n    get count(): number;\n\n    /**\n     * The value of {@link InterleavedBufferAttribute.data | data}.{@link InterleavedBuffer.array | array}.\n     * @remarks _get-only property_.\n     */\n    get array(): TypedArray;\n\n    /**\n     * Flag to indicate that the {@link data | .data} ({@link InterleavedBuffer}) attribute has changed and should be re-sent to the GPU.\n     * @remarks Setting this to have the same result of setting true also increments the {@link InterleavedBuffer.needsUpdate | InterleavedBuffer.needsUpdate} of {@link data | .data}.\n     * @remarks Setting this to true also increments the {@link InterleavedBuffer.version | InterleavedBuffer.version}.\n     * @remarks _set-only property_.\n     */\n    set needsUpdate(value: boolean);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link InterleavedBufferAttribute}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isInterleavedBufferAttribute: true;\n\n    /**\n     * Applies matrix {@link Matrix4 | m} to every Vector3 element of this InterleavedBufferAttribute.\n     * @param m\n     */\n    applyMatrix4(m: Matrix4): this;\n\n    /**\n     * Applies normal matrix {@link Matrix3 | m} to every Vector3 element of this InterleavedBufferAttribute.\n     * @param m\n     */\n    applyNormalMatrix(m: Matrix): this;\n\n    /**\n     * Applies matrix {@link Matrix4 | m} to every Vector3 element of this InterleavedBufferAttribute, interpreting the elements as a direction vectors.\n     * @param m\n     */\n    transformDirection(m: Matrix): this;\n\n    /**\n     * Returns the given component of the vector at the given index.\n     */\n    getComponent(index: number, component: number): number;\n\n    /**\n     * Sets the given component of the vector at the given index.\n     */\n    setComponent(index: number, component: number, value: number): this;\n\n    /**\n     * Returns the x component of the item at the given index.\n     * @param index Expects a `Integer`\n     */\n    getX(index: number): number;\n\n    /**\n     * Sets the x component of the item at the given index.\n     * @param index Expects a `Integer`\n     * @param x Expects a `Float`\n     */\n    setX(index: number, x: number): this;\n\n    /**\n     * Returns the y component of the item at the given index.\n     * @param index Expects a `Integer`\n     */\n    getY(index: number): number;\n\n    /**\n     * Sets the y component of the item at the given index.\n     * @param index Expects a `Integer`\n     * @param y Expects a `Float`\n     */\n    setY(index: number, y: number): this;\n\n    /**\n     * Returns the z component of the item at the given index.\n     * @param index Expects a `Integer`\n     */\n    getZ(index: number): number;\n\n    /**\n     * Sets the z component of the item at the given index.\n     * @param index Expects a `Integer`\n     * @param z Expects a `Float`\n     */\n    setZ(index: number, z: number): this;\n\n    /**\n     * Returns the w component of the item at the given index.\n     * @param index Expects a `Integer`\n     */\n    getW(index: number): number;\n\n    /**\n     * Sets the w component of the item at the given index.\n     * @param index Expects a `Integer`\n     * @param w Expects a `Float`\n     */\n    setW(index: number, z: number): this;\n\n    /**\n     * Sets the x and y components of the item at the given index.\n     * @param index Expects a `Integer`\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    setXY(index: number, x: number, y: number): this;\n    /**\n     * Sets the x, y and z components of the item at the given index.\n     * @param index Expects a `Integer`\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     * @param z Expects a `Float`\n     */\n    setXYZ(index: number, x: number, y: number, z: number): this;\n\n    /**\n     * Sets the x, y, z and w components of the item at the given index.\n     * @param index Expects a `Integer`\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     * @param z Expects a `Float`\n     * @param w Expects a `Float`\n     */\n    setXYZW(index: number, x: number, y: number, z: number, w: number): this;\n\n    /**\n     * Creates a clone of this {@link InterleavedBufferAttribute}.\n     * @param data This object holds shared array buffers required for properly cloning geometries with interleaved attributes.\n     */\n    clone(data?: {}): BufferAttribute;\n\n    /**\n     * Serializes this {@link InterleavedBufferAttribute}.\n     * Converting to {@link https://github.com/mrdoob/three.js/wiki/JSON-Geometry-format-4 | JSON Geometry format v4},\n     * @param data This object holds shared array buffers required for properly serializing geometries with interleaved attributes.\n     */\n    toJSON(data?: {}): {\n        isInterleavedBufferAttribute: true;\n        itemSize: number;\n        data: string;\n        offset: number;\n        normalized: boolean;\n    };\n}\n",
      "@types/three@~0/src/core/Layers.d.ts": "/**\n * A {@link THREE.Layers | Layers} object assigns an {@link THREE.Object3D | Object3D} to 1 or more of 32 layers numbered `0` to `31` - internally the\n * layers are stored as a {@link https://en.wikipedia.org/wiki/Mask_(computing) | bit mask}, and\n * by default all Object3Ds are a member of layer `0`.\n * @remarks\n * This can be used to control visibility - an object must share a layer with a {@link Camera | camera} to be visible when that camera's view is rendered.\n * @remarks\n * All classes that inherit from {@link THREE.Object3D | Object3D} have an {@link THREE.Object3D.layers | Object3D.layers} property which is an instance of this class.\n * @see Example: {@link https://threejs.org/examples/#webgl_layers | WebGL / layers}\n * @see Example: {@link https://threejs.org/examples/#webxr_vr_layers | Webxr / vr / layers}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/Layers | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/Layers.js | Source}\n */\nexport class Layers {\n    /**\n     * Create a new Layers object, with membership initially set to layer 0.\n     */\n    constructor();\n\n    /**\n     * A bit mask storing which of the 32 layers this layers object is currently a member of.\n     * @defaultValue `1 | 0`\n     * @remarks Expects a `Integer`\n     */\n    mask: number;\n\n    /**\n     * Set membership to `layer`, and remove membership all other layers.\n     * @param layer An integer from 0 to 31.\n     */\n    set(layer: number): void;\n\n    /**\n     * Add membership of this `layer`.\n     * @param layer An integer from 0 to 31.\n     */\n    enable(layer: number): void;\n\n    /**\n     * Add membership to all layers.\n     */\n    enableAll(): void;\n\n    /**\n     * Toggle membership of `layer`.\n     * @param layer An integer from 0 to 31.\n     */\n    toggle(layer: number): void;\n\n    /**\n     * Remove membership of this `layer`.\n     * @param layer An integer from 0 to 31.\n     */\n    disable(layer: number): void;\n\n    /**\n     * Remove membership from all layers.\n     */\n    disableAll(): void;\n\n    /**\n     * Returns true if this and the passed `layers` object have at least one layer in common.\n     * @param layers A Layers object\n     */\n    test(layers: Layers): boolean;\n\n    /**\n     * Returns true if the given layer is enabled.\n     * @param layer An integer from 0 to 31.\n     */\n    isEnabled(layer: number): boolean;\n}\n",
      "@types/three@~0/src/core/Object3D.d.ts": "import { AnimationClip } from \"../animation/AnimationClip.d.ts\";\nimport { Camera } from \"../cameras/Camera.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Euler } from \"../math/Euler.d.ts\";\nimport { Matrix3 } from \"../math/Matrix3.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Quaternion } from \"../math/Quaternion.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Group } from \"../objects/Group.d.ts\";\nimport { WebGLRenderer } from \"../renderers/WebGLRenderer.d.ts\";\nimport { Scene } from \"../scenes/Scene.d.ts\";\nimport { BufferGeometry } from \"./BufferGeometry.d.ts\";\nimport { EventDispatcher } from \"./EventDispatcher.d.ts\";\nimport { Layers } from \"./Layers.d.ts\";\nimport { Intersection, Raycaster } from \"./Raycaster.d.ts\";\n\nexport interface Object3DEventMap {\n    /**\n     * Fires when the object has been added to its parent object.\n     */\n    added: {};\n\n    /**\n     * Fires when the object has been removed from its parent object.\n     */\n    removed: {};\n\n    /**\n     * Fires when a new child object has been added.\n     */\n    childadded: { child: Object3D };\n\n    /**\n     * Fires when a new child object has been removed.\n     */\n    childremoved: { child: Object3D };\n}\n\n/**\n * This is the base class for most objects in three.js and provides a set of properties and methods for manipulating objects in 3D space.\n * @remarks Note that this can be used for grouping objects via the {@link THREE.Object3D.add | .add()} method which adds the object as a child,\n * however it is better to use {@link THREE.Group | Group} for this.\n * @see {@link https://threejs.org/docs/index.html#api/en/core/Object3D | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js | Source}\n */\nexport class Object3D<TEventMap extends Object3DEventMap = Object3DEventMap> extends EventDispatcher<TEventMap> {\n    /**\n     * This creates a new {@link Object3D} object.\n     */\n    constructor();\n\n    /**\n     * Flag to check if a given object is of type {@link Object3D}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isObject3D: true;\n\n    /**\n     * Unique number for this {@link Object3D} instance.\n     * @remarks Note that ids are assigned in chronological order: 1, 2, 3, ..., incrementing by one for each new object.\n     * Expects a `Integer`\n     */\n    readonly id: number;\n\n    /**\n     * {@link http://en.wikipedia.org/wiki/Universally_unique_identifier | UUID} of this object instance.\n     * @remarks This gets automatically assigned and shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * Optional name of the object\n     * @remarks _(doesn't need to be unique)_.\n     * @defaultValue `\"\"`\n     */\n    name: string;\n\n    /**\n     * A Read-only _string_ to check `this` object type.\n     * @remarks This can be used to find a specific type of Object3D in a scene.\n     * Sub-classes will update this value.\n     * @defaultValue `Object3D`\n     */\n    readonly type: string | \"Object3D\";\n\n    /**\n     * Object's parent in the {@link https://en.wikipedia.org/wiki/Scene_graph | scene graph}.\n     * @remarks An object can have at most one parent.\n     * @defaultValue `null`\n     */\n    parent: Object3D | null;\n\n    /**\n     * Array with object's children.\n     * @see {@link THREE.Object3DGroup | Group} for info on manually grouping objects.\n     * @defaultValue `[]`\n     */\n\n    children: Object3D[];\n\n    /**\n     * This is used by the {@link lookAt | lookAt} method, for example, to determine the orientation of the result.\n     * @defaultValue {@link DEFAULT_UP | Object3D.DEFAULT_UP} - that is `(0, 1, 0)`.\n     */\n    up: Vector3;\n\n    /**\n     * Object's local position.\n     * @defaultValue `new THREE.Vector3()` - that is `(0, 0, 0)`.\n     */\n    readonly position: Vector3;\n\n    /**\n     * Object's local rotation ({@link https://en.wikipedia.org/wiki/Euler_angles | Euler angles}), in radians.\n     * @defaultValue `new THREE.Euler()` - that is `(0, 0, 0, Euler.DEFAULT_ORDER)`.\n     */\n    readonly rotation: Euler;\n\n    /**\n     * Object's local rotation as a {@link THREE.Quaternion | Quaternion}.\n     * @defaultValue `new THREE.Quaternion()` - that is `(0,  0, 0, 1)`.\n     */\n    readonly quaternion: Quaternion;\n\n    /**\n     * The object's local scale.\n     * @defaultValue `new THREE.Vector3( 1, 1, 1 )`\n     */\n    readonly scale: Vector3;\n\n    /**\n     * @defaultValue `new THREE.Matrix4()`\n     */\n    readonly modelViewMatrix: Matrix4;\n\n    /**\n     * @defaultValue `new THREE.Matrix3()`\n     */\n    readonly normalMatrix: Matrix3;\n\n    /**\n     * The local transform matrix.\n     * @defaultValue `new THREE.Matrix4()`\n     */\n    matrix: Matrix4;\n\n    /**\n     * The global transform of the object.\n     * @remarks If the {@link Object3D} has no parent, then it's identical to the local transform {@link THREE.Object3D.matrix | .matrix}.\n     * @defaultValue `new THREE.Matrix4()`\n     */\n    matrixWorld: Matrix4;\n\n    /**\n     * When this is set, it calculates the matrix of position, (rotation or quaternion) and\n     * scale every frame and also recalculates the matrixWorld property.\n     * @defaultValue {@link DEFAULT_MATRIX_AUTO_UPDATE} - that is `(true)`.\n     */\n    matrixAutoUpdate: boolean;\n\n    /**\n     * If set, then the renderer checks every frame if the object and its children need matrix updates.\n     * When it isn't, then you have to maintain all matrices in the object and its children yourself.\n     * @defaultValue {@link DEFAULT_MATRIX_WORLD_AUTO_UPDATE} - that is `(true)`.\n     */\n    matrixWorldAutoUpdate: boolean;\n\n    /**\n     * When this is set, it calculates the matrixWorld in that frame and resets this property to false.\n     * @defaultValue `false`\n     */\n    matrixWorldNeedsUpdate: boolean;\n\n    /**\n     * The layer membership of the object.\n     * @remarks The object is only visible if it has at least one layer in common with the {@link THREE.Object3DCamera | Camera} in use.\n     * This property can also be used to filter out unwanted objects in ray-intersection tests when using {@link THREE.Raycaster | Raycaster}.\n     * @defaultValue `new THREE.Layers()`\n     */\n    layers: Layers;\n\n    /**\n     * Object gets rendered if `true`.\n     * @defaultValue `true`\n     */\n    visible: boolean;\n\n    /**\n     * Whether the object gets rendered into shadow map.\n     * @defaultValue `false`\n     */\n    castShadow: boolean;\n\n    /**\n     * Whether the material receives shadows.\n     * @defaultValue `false`\n     */\n    receiveShadow: boolean;\n\n    /**\n     * When this is set, it checks every frame if the object is in the frustum of the camera before rendering the object.\n     * If set to `false` the object gets rendered every frame even if it is not in the frustum of the camera.\n     * @defaultValue `true`\n     */\n    frustumCulled: boolean;\n\n    /**\n     * This value allows the default rendering order of {@link https://en.wikipedia.org/wiki/Scene_graph | scene graph}\n     * objects to be overridden although opaque and transparent objects remain sorted independently.\n     * @remarks When this property is set for an instance of {@link Group | Group}, all descendants objects will be sorted and rendered together.\n     * Sorting is from lowest to highest renderOrder.\n     * @defaultValue `0`\n     */\n    renderOrder: number;\n\n    /**\n     * Array with object's animation clips.\n     * @defaultValue `[]`\n     */\n    animations: AnimationClip[];\n\n    /**\n     * An object that can be used to store custom data about the {@link Object3D}.\n     * @remarks It should not hold references to _functions_ as these **will not** be cloned.\n     * @default `{}`\n     */\n    userData: Record<string, any>;\n\n    /**\n     * Custom depth material to be used when rendering to the depth map.\n     * @remarks Can only be used in context of meshes.\n     * When shadow-casting with a {@link THREE.DirectionalLight | DirectionalLight} or {@link THREE.SpotLight | SpotLight},\n     * if you are modifying vertex positions in the vertex shader you must specify a customDepthMaterial for proper shadows.\n     * @defaultValue `undefined`\n     */\n    customDepthMaterial?: Material | undefined;\n\n    /**\n     * Same as {@link customDepthMaterial}, but used with {@link THREE.Object3DPointLight | PointLight}.\n     * @defaultValue `undefined`\n     */\n    customDistanceMaterial?: Material | undefined;\n\n    /**\n     * An optional callback that is executed immediately before a 3D object is rendered to a shadow map.\n     * @remarks This function is called with the following parameters: renderer, scene, camera, shadowCamera, geometry,\n     * depthMaterial, group.\n     * Please notice that this callback is only executed for `renderable` 3D objects. Meaning 3D objects which\n     * define their visual appearance with geometries and materials like instances of {@link Mesh}, {@link Line},\n     * {@link Points} or {@link Sprite}. Instances of {@link Object3D}, {@link Group} or {@link Bone} are not renderable\n     * and thus this callback is not executed for such objects.\n     */\n    onBeforeShadow(\n        renderer: WebGLRenderer,\n        scene: Scene,\n        shadowCamera: Camera,\n        geometry: BufferGeometry,\n        depthMaterial: Material,\n        group: Group,\n    ): void;\n\n    /**\n     * An optional callback that is executed immediately after a 3D object is rendered to a shadow map.\n     * @remarks This function is called with the following parameters: renderer, scene, camera, shadowCamera, geometry,\n     * depthMaterial, group.\n     * Please notice that this callback is only executed for `renderable` 3D objects. Meaning 3D objects which\n     * define their visual appearance with geometries and materials like instances of {@link Mesh}, {@link Line},\n     * {@link Points} or {@link Sprite}. Instances of {@link Object3D}, {@link Group} or {@link Bone} are not renderable\n     * and thus this callback is not executed for such objects.\n     */\n    onAfterShadow(\n        renderer: WebGLRenderer,\n        scene: Scene,\n        shadowCamera: Camera,\n        geometry: BufferGeometry,\n        depthMaterial: Material,\n        group: Group,\n    ): void;\n\n    /**\n     * An optional callback that is executed immediately before a 3D object is rendered.\n     * @remarks This function is called with the following parameters: renderer, scene, camera, geometry, material, group.\n     * Please notice that this callback is only executed for `renderable` 3D objects. Meaning 3D objects which\n     * define their visual appearance with geometries and materials like instances of {@link Mesh}, {@link Line},\n     * {@link Points} or {@link Sprite}. Instances of {@link Object3D}, {@link Group} or {@link Bone} are not renderable\n     * and thus this callback is not executed for such objects.\n     */\n    onBeforeRender(\n        renderer: WebGLRenderer,\n        scene: Scene,\n        camera: Camera,\n        geometry: BufferGeometry,\n        material: Material,\n        group: Group,\n    ): void;\n\n    /**\n     * An optional callback that is executed immediately after a 3D object is rendered.\n     * @remarks This function is called with the following parameters: renderer, scene, camera, geometry, material, group.\n     * Please notice that this callback is only executed for `renderable` 3D objects. Meaning 3D objects which\n     * define their visual appearance with geometries and materials like instances of {@link Mesh}, {@link Line},\n     * {@link Points} or {@link Sprite}. Instances of {@link Object3D}, {@link Group} or {@link Bone} are not renderable\n     * and thus this callback is not executed for such objects.\n     */\n    onAfterRender(\n        renderer: WebGLRenderer,\n        scene: Scene,\n        camera: Camera,\n        geometry: BufferGeometry,\n        material: Material,\n        group: Group,\n    ): void;\n\n    /**\n     * The default {@link up} direction for objects, also used as the default position for {@link THREE.DirectionalLight | DirectionalLight},\n     * {@link THREE.HemisphereLight | HemisphereLight} and {@link THREE.Spotlight | Spotlight} (which creates lights shining from the top down).\n     * @defaultValue `new THREE.Vector3( 0, 1, 0)`\n     */\n    static DEFAULT_UP: Vector3;\n\n    /**\n     * The default setting for {@link matrixAutoUpdate} for newly created Object3Ds.\n     * @defaultValue `true`\n     */\n    static DEFAULT_MATRIX_AUTO_UPDATE: boolean;\n\n    /**\n     * The default setting for {@link matrixWorldAutoUpdate} for newly created Object3Ds.\n     * @defaultValue `true`\n     */\n    static DEFAULT_MATRIX_WORLD_AUTO_UPDATE: boolean;\n\n    /**\n     * Applies the matrix transform to the object and updates the object's position, rotation and scale.\n     * @param matrix\n     */\n    applyMatrix4(matrix: Matrix4): void;\n\n    /**\n     * Applies the rotation represented by the quaternion to the object.\n     * @param quaternion\n     */\n    applyQuaternion(quaternion: Quaternion): this;\n\n    /**\n     * Calls {@link THREE.Quaternion.setFromAxisAngle | setFromAxisAngle}({@link axis}, {@link angle}) on the {@link quaternion | .quaternion}.\n     * @param axis A normalized vector in object space.\n     * @param angle Angle in radians. Expects a `Float`\n     */\n    setRotationFromAxisAngle(axis: Vector3, angle: number): void;\n\n    /**\n     * Calls {@link THREE.Quaternion.setFromEuler | setFromEuler}({@link euler}) on the {@link quaternion | .quaternion}.\n     * @param euler Euler angle specifying rotation amount.\n     */\n    setRotationFromEuler(euler: Euler): void;\n\n    /**\n     * Calls {@link THREE.Quaternion.setFromRotationMatrix | setFromRotationMatrix}({@link m}) on the {@link quaternion | .quaternion}.\n     * @remarks Note that this assumes that the upper 3x3 of m is a pure rotation matrix (i.e, unscaled).\n     * @param m Rotate the quaternion by the rotation component of the matrix.\n     */\n    setRotationFromMatrix(m: Matrix4): void;\n\n    /**\n     * Copy the given {@link THREE.Quaternion | Quaternion} into {@link quaternion | .quaternion}.\n     * @param q Normalized Quaternion.\n     */\n    setRotationFromQuaternion(q: Quaternion): void;\n\n    /**\n     * Rotate an object along an axis in object space.\n     * @remarks The axis is assumed to be normalized.\n     * @param axis A normalized vector in object space.\n     * @param angle The angle in radians. Expects a `Float`\n     */\n    rotateOnAxis(axis: Vector3, angle: number): this;\n\n    /**\n     * Rotate an object along an axis in world space.\n     * @remarks The axis is assumed to be normalized\n     * Method Assumes no rotated parent.\n     * @param axis A normalized vector in world space.\n     * @param angle The angle in radians. Expects a `Float`\n     */\n    rotateOnWorldAxis(axis: Vector3, angle: number): this;\n\n    /**\n     * Rotates the object around _x_ axis in local space.\n     * @param rad The angle to rotate in radians. Expects a `Float`\n     */\n    rotateX(angle: number): this;\n\n    /**\n     * Rotates the object around _y_ axis in local space.\n     * @param rad The angle to rotate in radians. Expects a `Float`\n     */\n    rotateY(angle: number): this;\n\n    /**\n     * Rotates the object around _z_ axis in local space.\n     * @param rad The angle to rotate in radians. Expects a `Float`\n     */\n    rotateZ(angle: number): this;\n\n    /**\n     * Translate an object by distance along an axis in object space\n     * @remarks The axis is assumed to be normalized.\n     * @param axis A normalized vector in object space.\n     * @param distance The distance to translate. Expects a `Float`\n     */\n    translateOnAxis(axis: Vector3, distance: number): this;\n\n    /**\n     * Translates object along x axis in object space by {@link distance} units.\n     * @param distance Expects a `Float`\n     */\n    translateX(distance: number): this;\n\n    /**\n     * Translates object along _y_ axis in object space by {@link distance} units.\n     * @param distance Expects a `Float`\n     */\n    translateY(distance: number): this;\n\n    /**\n     * Translates object along _z_ axis in object space by {@link distance} units.\n     * @param distance Expects a `Float`\n     */\n    translateZ(distance: number): this;\n\n    /**\n     * Converts the vector from this object's local space to world space.\n     * @param vector A vector representing a position in this object's local space.\n     */\n    localToWorld(vector: Vector3): Vector3;\n\n    /**\n     * Converts the vector from world space to this object's local space.\n     * @param vector A vector representing a position in world space.\n     */\n    worldToLocal(vector: Vector3): Vector3;\n\n    /**\n     * Rotates the object to face a point in world space.\n     * @remarks This method does not support objects having non-uniformly-scaled parent(s).\n     * @param vector A vector representing a position in world space to look at.\n     */\n    lookAt(vector: Vector3): void;\n    /**\n     * Rotates the object to face a point in world space.\n     * @remarks This method does not support objects having non-uniformly-scaled parent(s).\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     * @param z Expects a `Float`\n     */\n    lookAt(x: number, y: number, z: number): void;\n\n    /**\n     * Adds another {@link Object3D} as child of this {@link Object3D}.\n     * @remarks An arbitrary number of objects may be added\n     * Any current parent on an {@link object} passed in here will be removed, since an {@link Object3D} can have at most one parent.\n     * @see {@link attach}\n     * @see {@link THREE.Group | Group} for info on manually grouping objects.\n     * @param object\n     */\n    add(...object: Object3D[]): this;\n\n    /**\n     * Removes a {@link Object3D} as child of this {@link Object3D}.\n     * @remarks An arbitrary number of objects may be removed.\n     * @see {@link THREE.Group | Group} for info on manually grouping objects.\n     * @param object\n     */\n    remove(...object: Object3D[]): this;\n\n    /**\n     * Removes this object from its current parent.\n     */\n    removeFromParent(): this;\n\n    /**\n     * Removes all child objects.\n     */\n    clear(): this;\n\n    /**\n     * Adds a {@link Object3D} as a child of this, while maintaining the object's world transform.\n     * @remarks Note: This method does not support scene graphs having non-uniformly-scaled nodes(s).\n     * @see {@link add}\n     * @param object\n     */\n    attach(object: Object3D): this;\n\n    /**\n     * Searches through an object and its children, starting with the object itself, and returns the first with a matching id.\n     * @remarks Note that ids are assigned in chronological order: 1, 2, 3, ..., incrementing by one for each new object.\n     * @see {@link id}\n     * @param id Unique number of the object instance. Expects a `Integer`\n     */\n    getObjectById(id: number): Object3D | undefined;\n\n    /**\n     * Searches through an object and its children, starting with the object itself, and returns the first with a matching name.\n     * @remarks Note that for most objects the name is an empty string by default\n     * You will have to set it manually to make use of this method.\n     * @param name String to match to the children's Object3D.name property.\n     */\n    getObjectByName(name: string): Object3D | undefined;\n\n    /**\n     * Searches through an object and its children, starting with the object itself,\n     * and returns the first with a property that matches the value given.\n     *\n     * @param name - the property name to search for.\n     * @param value - value of the given property.\n     */\n    getObjectByProperty(name: string, value: any): Object3D | undefined;\n\n    /**\n     * Searches through an object and its children, starting with the object itself,\n     * and returns the first with a property that matches the value given.\n     * @param name The property name to search for.\n     * @param value Value of the given property.\n     * @param optionalTarget target to set the result. Otherwise a new Array is instantiated. If set, you must clear\n     * this array prior to each call (i.e., array.length = 0;).\n     */\n    getObjectsByProperty(name: string, value: any, optionalTarget?: Object3D[]): Object3D[];\n\n    /**\n     * Returns a vector representing the position of the object in world space.\n     * @param target The result will be copied into this Vector3.\n     */\n    getWorldPosition(target: Vector3): Vector3;\n\n    /**\n     * Returns a quaternion representing the rotation of the object in world space.\n     * @param target The result will be copied into this Quaternion.\n     */\n    getWorldQuaternion(target: Quaternion): Quaternion;\n\n    /**\n     * Returns a vector of the scaling factors applied to the object for each axis in world space.\n     * @param target The result will be copied into this Vector3.\n     */\n    getWorldScale(target: Vector3): Vector3;\n\n    /**\n     * Returns a vector representing the direction of object's positive z-axis in world space.\n     * @param target The result will be copied into this Vector3.\n     */\n    getWorldDirection(target: Vector3): Vector3;\n\n    /**\n     * Abstract (empty) method to get intersections between a casted ray and this object\n     * @remarks Subclasses such as {@link THREE.Mesh | Mesh}, {@link THREE.Line | Line}, and {@link THREE.Points | Points} implement this method in order to use raycasting.\n     * @see {@link THREE.Raycaster | Raycaster}\n     * @param raycaster\n     * @param intersects\n     * @defaultValue `() => {}`\n     */\n    raycast(raycaster: Raycaster, intersects: Intersection[]): void;\n\n    /**\n     * Executes the callback on this object and all descendants.\n     * @remarks Note: Modifying the scene graph inside the callback is discouraged.\n     * @param callback A function with as first argument an {@link Object3D} object.\n     */\n    traverse(callback: (object: Object3D) => any): void;\n\n    /**\n     * Like traverse, but the callback will only be executed for visible objects\n     * @remarks Descendants of invisible objects are not traversed.\n     * Note: Modifying the scene graph inside the callback is discouraged.\n     * @param callback A function with as first argument an {@link Object3D} object.\n     */\n    traverseVisible(callback: (object: Object3D) => any): void;\n\n    /**\n     * Executes the callback on all ancestors.\n     * @remarks Note: Modifying the scene graph inside the callback is discouraged.\n     * @param callback A function with as first argument an {@link Object3D} object.\n     */\n    traverseAncestors(callback: (object: Object3D) => any): void;\n\n    /**\n     * Updates local transform.\n     */\n    updateMatrix(): void;\n\n    /**\n     * Updates the global transform of the object.\n     * And will update the object descendants if {@link matrixWorldNeedsUpdate | .matrixWorldNeedsUpdate} is set to true or if the {@link force} parameter is set to `true`.\n     * @param force A boolean that can be used to bypass {@link matrixWorldAutoUpdate | .matrixWorldAutoUpdate}, to recalculate the world matrix of the object and descendants on the current frame.\n     * Useful if you cannot wait for the renderer to update it on the next frame, assuming {@link matrixWorldAutoUpdate | .matrixWorldAutoUpdate} set to `true`.\n     */\n    updateMatrixWorld(force?: boolean): void;\n\n    /**\n     * Updates the global transform of the object.\n     * @param updateParents Recursively updates global transform of ancestors.\n     * @param updateChildren Recursively updates global transform of descendants.\n     */\n    updateWorldMatrix(updateParents: boolean, updateChildren: boolean): void;\n\n    /**\n     * Convert the object to three.js {@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4 | JSON Object/Scene format}.\n     * @param meta Object containing metadata such as materials, textures or images for the object.\n     */\n    toJSON(meta?: { geometries: any; materials: any; textures: any; images: any }): any;\n\n    /**\n     * Returns a clone of `this` object and optionally all descendants.\n     * @param recursive If true, descendants of the object are also cloned. Default `true`\n     */\n    clone(recursive?: boolean): this;\n\n    /**\n     * Copies the given object into this object.\n     * @remarks Event listeners and user-defined callbacks ({@link .onAfterRender} and {@link .onBeforeRender}) are not copied.\n     * @param object\n     * @param recursive If set to `true`, descendants of the object are copied next to the existing ones. If set to\n     * `false`, descendants are left unchanged. Default is `true`.\n     */\n    copy(object: Object3D, recursive?: boolean): this;\n}\n",
      "@types/three@~0/src/core/Raycaster.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport { Ray } from \"../math/Ray.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { XRTargetRaySpace } from \"../renderers/webxr/WebXRController.d.ts\";\nimport { Layers } from \"./Layers.d.ts\";\nimport { Object3D } from \"./Object3D.d.ts\";\n\nexport interface Face {\n    a: number;\n    b: number;\n    c: number;\n    normal: Vector3;\n    materialIndex: number;\n}\n\nexport interface Intersection<TIntersected extends Object3D = Object3D> {\n    /** Distance between the origin of the ray and the intersection */\n    distance: number;\n    distanceToRay?: number | undefined;\n    /** Point of intersection, in world coordinates */\n    point: Vector3;\n    index?: number | undefined;\n    /** Intersected face */\n    face?: Face | null | undefined;\n    /** Index of the intersected face */\n    faceIndex?: number | undefined;\n    /** The intersected object */\n    object: TIntersected;\n    uv?: Vector2 | undefined;\n    uv1?: Vector2 | undefined;\n    normal?: Vector3;\n    /** The index number of the instance where the ray intersects the {@link THREE.InstancedMesh | InstancedMesh } */\n    instanceId?: number | undefined;\n    pointOnLine?: Vector3;\n    batchId?: number;\n}\n\nexport interface RaycasterParameters {\n    Mesh: any;\n    Line: { threshold: number };\n    Line2?: { threshold: number };\n    LOD: any;\n    Points: { threshold: number };\n    Sprite: any;\n}\n\n/**\n * This class is designed to assist with {@link https://en.wikipedia.org/wiki/Ray_casting | raycasting}\n * @remarks\n * Raycasting is used for mouse picking (working out what objects in the 3d space the mouse is over) amongst other things.\n * @example\n * ```typescript\n * const raycaster = new THREE.Raycaster();\n * const pointer = new THREE.Vector2();\n *\n * function onPointerMove(event) {\n *     // calculate pointer position in normalized device coordinates (-1 to +1) for both components\n *     pointer.x = (event.clientX / window.innerWidth) * 2 - 1;\n *     pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;\n * }\n *\n * function render() {\n *     // update the picking ray with the camera and pointer position\n *     raycaster.setFromCamera(pointer, camera);\n *     // calculate objects intersecting the picking ray\n *     const intersects = raycaster.intersectObjects(scene.children);\n *     for (let i = 0; i & lt; intersects.length; i++) {\n *         intersects[i].object.material.color.set(0xff0000);\n *     }\n *     renderer.render(scene, camera);\n * }\n * window.addEventListener('pointermove', onPointerMove);\n * window.requestAnimationFrame(render);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_cubes | Raycasting to a Mesh}\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_cubes_ortho | Raycasting to a Mesh in using an OrthographicCamera}\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_buffergeometry | Raycasting to a Mesh with BufferGeometry}\n * @see Example: {@link https://threejs.org/examples/#webgl_instancing_raycast | Raycasting to a InstancedMesh}\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_lines | Raycasting to a Line}\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_raycasting_points | Raycasting to Points}\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_terrain_raycast | Terrain raycasting}\n * @see Example: {@link https://threejs.org/examples/#webgl_interactive_voxelpainter | Raycasting to paint voxels}\n * @see Example: {@link https://threejs.org/examples/#webgl_raycaster_texture | Raycast to a Texture}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/Raycaster | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/Raycaster.js | Source}\n */\nexport class Raycaster {\n    /**\n     * This creates a new {@link Raycaster} object.\n     * @param origin The origin vector where the ray casts from. Default `new Vector3()`\n     * @param direction The direction vector that gives direction to the ray. Should be normalized. Default `new Vector3(0, 0, -1)`\n     * @param near All results returned are further away than near. Near can't be negative. Expects a `Float`. Default `0`\n     * @param far All results returned are closer than far. Far can't be lower than near. Expects a `Float`. Default `Infinity`\n     */\n    constructor(origin?: Vector3, direction?: Vector3, near?: number, far?: number);\n\n    /**\n     * The {@link THREE.RaycasterRay | Ray} used for the raycasting.\n     */\n    ray: Ray;\n\n    /**\n     * The near factor of the raycaster. This value indicates which objects can be discarded based on the distance.\n     * This value shouldn't be negative and should be smaller than the far property.\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    near: number;\n\n    /**\n     * The far factor of the raycaster. This value indicates which objects can be discarded based on the distance.\n     * This value shouldn't be negative and should be larger than the near property.\n     * @remarks Expects a `Float`\n     * @defaultValue `Infinity`\n     */\n    far: number;\n\n    /**\n     * The camera to use when raycasting against view-dependent objects such as billboarded objects like {@link THREE.Sprites | Sprites}.\n     * This field can be set manually or is set when calling  {@link setFromCamera}.\n     * @defaultValue `null`\n     */\n    camera: Camera;\n\n    /**\n     * Used by {@link Raycaster} to selectively ignore 3D objects when performing intersection tests.\n     * The following code example ensures that only 3D objects on layer `1` will be honored by the instance of Raycaster.\n     * ```\n     * raycaster.layers.set( 1 );\n     * object.layers.enable( 1 );\n     * ```\n     * @defaultValue `new THREE.Layers()` - See {@link THREE.Layers | Layers}.\n     */\n    layers: Layers;\n\n    /**\n     * An data object where threshold is the precision of the {@link Raycaster} when intersecting objects, in world units.\n     * @defaultValue `{ Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} }`\n     */\n    params: RaycasterParameters;\n\n    /**\n     * Updates the ray with a new origin and direction\n     * @remarks\n     * Please note that this method only copies the values from the arguments.\n     * @param origin The origin vector where the ray casts from.\n     * @param direction The normalized direction vector that gives direction to the ray.\n     */\n    set(origin: Vector3, direction: Vector3): void;\n\n    /**\n     * Updates the ray with a new origin and direction.\n     * @param coords 2D coordinates of the mouse, in normalized device coordinates (NDC)---X and Y components should be between -1 and 1.\n     * @param camera camera from which the ray should originate\n     */\n    setFromCamera(coords: Vector2, camera: Camera): void;\n\n    /**\n     * Updates the ray with a new origin and direction.\n     * @param controller The controller to copy the position and direction from.\n     */\n    setFromXRController(controller: XRTargetRaySpace): this;\n\n    /**\n     * Checks all intersection between the ray and the object with or without the descendants\n     * @remarks Intersections are returned sorted by distance, closest first\n     * @remarks {@link Raycaster} delegates to the {@link Object3D.raycast | raycast} method of the passed object, when evaluating whether the ray intersects the object or not\n     * This allows {@link THREE.Mesh | meshes} to respond differently to ray casting than {@link THREE.Line | lines} and {@link THREE.Points | pointclouds}.\n     * **Note** that for meshes, faces must be pointed towards the origin of the {@link Raycaster.ray | ray} in order to be detected;\n     * intersections of the ray passing through the back of a face will not be detected\n     * To raycast against both faces of an object, you'll want to set the {@link Mesh.material | material}'s {@link Material.side | side} property to `THREE.DoubleSide`.\n     * @see {@link intersectObjects | .intersectObjects()}.\n     * @param object The object to check for intersection with the ray.\n     * @param recursive If true, it also checks all descendants. Otherwise it only checks intersection with the object. Default `true`\n     * @param optionalTarget Target to set the result. Otherwise a new {@link Array | Array} is instantiated.\n     * If set, you must clear this array prior to each call (i.e., array.length = 0;). Default `[]`\n     * @returns An array of intersections is returned.\n     */\n    intersectObject<TIntersected extends Object3D>(\n        object: Object3D,\n        recursive?: boolean,\n        optionalTarget?: Array<Intersection<TIntersected>>,\n    ): Array<Intersection<TIntersected>>;\n\n    /**\n     * Checks all intersection between the ray and the objects with or without the descendants\n     * @remarks Intersections are returned sorted by distance, closest first\n     * @remarks Intersections are of the same form as those returned by {@link intersectObject | .intersectObject()}.\n     * @remarks {@link Raycaster} delegates to the {@link Object3D.raycast | raycast} method of the passed object, when evaluating whether the ray intersects the object or not\n     * This allows {@link THREE.Mesh | meshes} to respond differently to ray casting than {@link THREE.Line | lines} and {@link THREE.Points | pointclouds}.\n     * **Note** that for meshes, faces must be pointed towards the origin of the {@link Raycaster.ray | ray} in order to be detected;\n     * intersections of the ray passing through the back of a face will not be detected\n     * To raycast against both faces of an object, you'll want to set the {@link Mesh.material | material}'s {@link Material.side | side} property to `THREE.DoubleSide`.\n     * @see {@link intersectObject | .intersectObject()}.\n     * @param objects The objects to check for intersection with the ray.\n     * @param recursive If true, it also checks all descendants of the objects. Otherwise it only checks intersection with the objects. Default `true`\n     * @param optionalTarget Target to set the result. Otherwise a new {@link Array | Array} is instantiated.\n     * If set, you must clear this array prior to each call (i.e., array.length = 0;). Default `[]`\n     * @returns An array of intersections is returned.\n     */\n    intersectObjects<TIntersected extends Object3D>(\n        objects: Object3D[],\n        recursive?: boolean,\n        optionalTarget?: Array<Intersection<TIntersected>>,\n    ): Array<Intersection<TIntersected>>;\n}\n",
      "@types/three@~0/src/core/RenderTarget.d.ts": "import {\n    ColorSpace,\n    MagnificationTextureFilter,\n    MinificationTextureFilter,\n    PixelFormatGPU,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { Vector4 } from \"../math/Vector4.d.ts\";\nimport { DepthTexture } from \"../textures/DepthTexture.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { EventDispatcher } from \"./EventDispatcher.d.ts\";\n\nexport interface RenderTargetOptions {\n    wrapS?: Wrapping | undefined;\n    wrapT?: Wrapping | undefined;\n    magFilter?: MagnificationTextureFilter | undefined;\n    minFilter?: MinificationTextureFilter | undefined;\n    generateMipmaps?: boolean | undefined; // true\n    format?: number | undefined; // RGBAFormat\n    type?: TextureDataType | undefined; // UnsignedByteType\n    anisotropy?: number | undefined; // 1\n    colorSpace?: ColorSpace | undefined;\n    internalFormat?: PixelFormatGPU | null | undefined; // null\n    depthBuffer?: boolean | undefined; // true\n    stencilBuffer?: boolean | undefined; // false\n    resolveDepthBuffer?: boolean | undefined; // true\n    resolveStencilBuffer?: boolean | undefined; // true\n    depthTexture?: DepthTexture | null | undefined; // null\n    /**\n     * Defines the count of MSAA samples. Can only be used with WebGL 2. Default is **0**.\n     * @default 0\n     */\n    samples?: number | undefined;\n    count?: number | undefined;\n}\n\nexport class RenderTarget<TTexture extends Texture | Texture[] = Texture> extends EventDispatcher<{ dispose: {} }> {\n    readonly isRenderTarget: true;\n\n    width: number;\n    height: number;\n    depth: number;\n\n    scissor: Vector4;\n    /**\n     * @default false\n     */\n    scissorTest: boolean;\n    viewport: Vector4;\n    textures: TTexture[];\n\n    /**\n     * @default true\n     */\n    depthBuffer: boolean;\n\n    /**\n     * @default false\n     */\n    stencilBuffer: boolean;\n\n    /**\n     * Defines whether the depth buffer should be resolved when rendering into a multisampled render target.\n     * @default true\n     */\n    resolveDepthBuffer: boolean;\n\n    /**\n     * Defines whether the stencil buffer should be resolved when rendering into a multisampled render target.\n     * This property has no effect when {@link .resolveDepthBuffer} is set to `false`.\n     * @default true\n     */\n    resolveStencilBuffer: boolean;\n\n    /**\n     * @default null\n     */\n    depthTexture: DepthTexture | null;\n\n    /**\n     * Defines the count of MSAA samples. Can only be used with WebGL 2. Default is **0**.\n     * @default 0\n     */\n    samples: number;\n\n    constructor(width?: number, height?: number, options?: RenderTargetOptions);\n\n    get texture(): TTexture;\n    set texture(value: TTexture);\n\n    setSize(width: number, height: number, depth?: number): void;\n    clone(): this;\n    copy(source: RenderTarget): this;\n    dispose(): void;\n}\n",
      "@types/three@~0/src/core/Uniform.d.ts": "/**\n * Uniforms are global GLSL variables.\n * They are passed to shader programs.\n * @example\n * When declaring a uniform of a {@link THREE.ShaderMaterial | ShaderMaterial}, it is declared by value or by object.\n * ```typescript\n * uniforms: {\n *     time: {\n *         value: 1.0\n *     },\n *     resolution: new Uniform(new Vector2())\n * };\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_nodes_materials_instance_uniform | WebGL2 / nodes / materials / instance / uniform}\n * @see Example: {@link https://threejs.org/examples/#webgpu_instance_uniform| WebGPU / instance / uniform}\n * @see {@link https://threejs.org/docs/index.html#api/en/core/Uniform | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/Uniform.js | Source}\n */\nexport class Uniform<T = any> {\n    /**\n     * Create a new instance of {@link THREE.Uniform | Uniform}\n     * @param value An object containing the value to set up the uniform. It's type must be one of the Uniform Types described above.\n     */\n    constructor(value: T);\n\n    /**\n     * Current value of the uniform.\n     */\n    value: T;\n\n    /**\n     * Returns a clone of this uniform.\n     * @remarks\n     * If the uniform's {@link value} property is an {@link Object | Object} with a `clone()` method, this is used,\n     * otherwise the value is copied by assignment Array values are **shared** between cloned {@link THREE.UniformUniform | Uniform}s.\n     */\n    clone(): Uniform<T>;\n}\n",
      "@types/three@~0/src/core/UniformsGroup.d.ts": "import { Usage } from \"../constants.d.ts\";\nimport { EventDispatcher } from \"./EventDispatcher.d.ts\";\nimport { Uniform } from \"./Uniform.d.ts\";\n\n/**\n * @see Example: {@link https://threejs.org/examples/#webgl2_ubo | WebGL2 / UBO}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/core/UniformsGroup.js | Source}\n */\nexport class UniformsGroup extends EventDispatcher<{ dispose: {} }> {\n    constructor();\n\n    readonly isUniformsGroup: true;\n\n    id: number;\n\n    usage: Usage;\n\n    uniforms: Array<Uniform | Uniform[]>;\n\n    add(uniform: Uniform | Uniform[]): this;\n\n    remove(uniform: Uniform | Uniform[]): this;\n\n    setName(name: string): this;\n\n    setUsage(value: Usage): this;\n\n    dispose(): this;\n\n    copy(source: UniformsGroup): this;\n\n    clone(): UniformsGroup;\n}\n",
      "@types/three@~0/src/extras/core/Curve.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Vector3 } from \"../../math/Vector3.d.ts\";\n\n/**\n * An abstract base class for creating a {@link Curve} object that contains methods for interpolation\n * @remarks\n * For an array of Curves see {@link THREE.CurvePath | CurvePath}.\n * @remarks\n * This following curves inherit from THREE.Curve:\n *\n * **2D curves**\n *  - {@link THREE.ArcCurve}\n *  - {@link THREE.CubicBezierCurve}\n *  - {@link THREE.EllipseCurve}\n *  - {@link THREE.LineCurve}\n *  - {@link THREE.QuadraticBezierCurve}\n *  - {@link THREE.SplineCurve}\n *\n * **3D curves**\n *  - {@link THREE.CatmullRomCurve3}\n *  - {@link THREE.CubicBezierCurve3}\n *  - {@link THREE.LineCurve3}\n *  - {@link THREE.QuadraticBezierCurve3}\n *\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/Curve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/Curve.js | Source}\n */\nexport abstract class Curve<TVector extends Vector2 | Vector3> {\n    protected constructor();\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `Curve`\n     */\n    readonly type: string | \"Curve\";\n\n    /**\n     * This value determines the amount of divisions when calculating the cumulative segment lengths of a {@link Curve}\n     * via {@link .getLengths}.\n     * To ensure precision when using methods like {@link .getSpacedPoints}, it is recommended to increase {@link .arcLengthDivisions} if the {@link Curve} is very large.\n     * @defaultValue `200`\n     * @remarks Expects a `Integer`\n     */\n    arcLengthDivisions: number;\n\n    /**\n     * Returns a vector for a given position on the curve.\n     * @param t A position on the curve. Must be in the range `[ 0, 1 ]`. Expects a `Float`\n     * @param optionalTarget If specified, the result will be copied into this Vector, otherwise a new Vector will be created. Default `new T`.\n     */\n    getPoint(t: number, optionalTarget?: TVector): TVector;\n\n    /**\n     * Returns a vector for a given position on the {@link Curve} according to the arc length.\n     * @param u A position on the {@link Curve} according to the arc length. Must be in the range `[ 0, 1 ]`. Expects a `Float`\n     * @param optionalTarget If specified, the result will be copied into this Vector, otherwise a new Vector will be created. Default `new T`.\n     */\n    getPointAt(u: number, optionalTarget?: TVector): TVector;\n\n    /**\n     * Returns a set of divisions `+1` points using {@link .getPoint | getPoint(t)}.\n     * @param divisions Number of pieces to divide the {@link Curve} into. Expects a `Integer`. Default `5`\n     */\n    getPoints(divisions?: number): TVector[];\n\n    /**\n     * Returns a set of divisions `+1` equi-spaced points using {@link .getPointAt | getPointAt(u)}.\n     * @param divisions Number of pieces to divide the {@link Curve} into. Expects a `Integer`. Default `5`\n     */\n    getSpacedPoints(divisions?: number): TVector[];\n\n    /**\n     * Get total {@link Curve} arc length.\n     */\n    getLength(): number;\n\n    /**\n     * Get list of cumulative segment lengths.\n     * @param divisions Expects a `Integer`\n     */\n    getLengths(divisions?: number): number[];\n\n    /**\n     * Update the cumulative segment distance cache\n     * @remarks\n     * The method must be called every time {@link Curve} parameters are changed\n     * If an updated {@link Curve} is part of a composed {@link Curve} like {@link THREE.CurvePath | CurvePath},\n     * {@link .updateArcLengths}() must be called on the composed curve, too.\n     */\n    updateArcLengths(): void;\n\n    /**\n     * Given u in the range `[ 0, 1 ]`,\n     * @remarks\n     * `u` and `t` can then be used to give you points which are equidistant from the ends of the curve, using {@link .getPoint}.\n     * @param u Expects a `Float`\n     * @param distance Expects a `Float`\n     * @returns `t` also in the range `[ 0, 1 ]`. Expects a `Float`.\n     */\n    getUtoTmapping(u: number, distance: number): number;\n\n    /**\n     * Returns a unit vector tangent at t\n     * @remarks\n     * If the derived {@link Curve} does not implement its tangent derivation, two points a small delta apart will be used to find its gradient which seems to give a reasonable approximation.\n     * @param t A position on the curve. Must be in the range `[ 0, 1 ]`. Expects a `Float`\n     * @param optionalTarget If specified, the result will be copied into this Vector, otherwise a new Vector will be created.\n     */\n    getTangent(t: number, optionalTarget?: TVector): TVector;\n\n    /**\n     * Returns tangent at a point which is equidistant to the ends of the {@link Curve} from the point given in {@link .getTangent}.\n     * @param u A position on the {@link Curve} according to the arc length. Must be in the range `[ 0, 1 ]`. Expects a `Float`\n     * @param optionalTarget If specified, the result will be copied into this Vector, otherwise a new Vector will be created.\n     */\n    getTangentAt(u: number, optionalTarget?: TVector): TVector;\n\n    /**\n     * Generates the Frenet Frames\n     * @remarks\n     * Requires a {@link Curve} definition in 3D space\n     * Used in geometries like {@link THREE.TubeGeometry | TubeGeometry} or {@link THREE.ExtrudeGeometry | ExtrudeGeometry}.\n     * @param segments Expects a `Integer`\n     * @param closed\n     */\n    computeFrenetFrames(\n        segments: number,\n        closed?: boolean,\n    ): {\n        tangents: Vector3[];\n        normals: Vector3[];\n        binormals: Vector3[];\n    };\n\n    /**\n     * Creates a clone of this instance.\n     */\n    clone(): this;\n    /**\n     * Copies another {@link Curve} object to this instance.\n     * @param source\n     */\n    copy(source: Curve<TVector>): this;\n\n    /**\n     * Returns a JSON object representation of this instance.\n     */\n    toJSON(): {};\n\n    /**\n     * Copies the data from the given JSON object to this instance.\n     * @param json\n     */\n    fromJSON(json: {}): this;\n}\n",
      "@types/three@~0/src/extras/core/CurvePath.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Vector3 } from \"../../math/Vector3.d.ts\";\nimport { Curve } from \"./Curve.d.ts\";\n\n/**\n * Curved Path - a curve path is simply a array of connected curves, but retains the api of a curve.\n * @remarks\n * A {@link CurvePath} is simply an array of connected curves, but retains the api of a curve.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/CurvePath | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/CurvePath.js | Source}\n */\nexport class CurvePath<TVector extends Vector2 | Vector3> extends Curve<TVector> {\n    /**\n     * The constructor take no parameters.\n     */\n    constructor();\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `CurvePath`\n     */\n    override readonly type: string | \"CurvePath\";\n\n    /**\n     * The array of {@link Curve | Curves}.\n     * @defaultValue `[]`\n     */\n    curves: Array<Curve<TVector>>;\n\n    /**\n     * Whether or not to automatically close the path.\n     * @defaultValue false\n     */\n    autoClose: boolean;\n\n    /**\n     * Add a curve to the {@link .curves} array.\n     * @param curve\n     */\n    add(curve: Curve<TVector>): void;\n    /**\n     * Adds a {@link LineCurve | lineCurve} to close the path.\n     */\n    closePath(): this;\n\n    getPoint(t: number, optionalTarget?: TVector): TVector;\n\n    /**\n     * Get list of cumulative curve lengths of the curves in the {@link .curves} array.\n     */\n    getCurveLengths(): number[];\n\n    /**\n     * Returns an array of points representing a sequence of curves\n     * @remarks\n     * The `division` parameter defines the number of pieces each curve is divided into\n     * However, for optimization and quality purposes, the actual sampling resolution for each curve depends on its type\n     * For example, for a {@link THREE.LineCurve | LineCurve}, the returned number of points is always just 2.\n     * @param divisions Number of pieces to divide the curve into. Expects a `Integer`. Default `12`\n     */\n    override getPoints(divisions?: number): TVector[];\n\n    /**\n     * Returns a set of divisions `+1` equi-spaced points using {@link .getPointAt | getPointAt(u)}.\n     * @param divisions Number of pieces to divide the curve into. Expects a `Integer`. Default `40`\n     */\n    override getSpacedPoints(divisions?: number): TVector[];\n}\n",
      "@types/three@~0/src/extras/core/Interpolations.d.ts": "/**\n * Used internally by {@link THREE.SplineCurve | SplineCurve}.\n * @param t Interpolation weight. Expects a `Float`\n * @param p0 Expects a `Float`\n * @param p1 Expects a `Float`\n * @param p2 Expects a `Float`\n * @param p3 P0, p1, p2, the points defining the spline curve. Expects a `Float`\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/Interpolations | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js | Source}\n */\ndeclare function CatmullRom(t: number, p0: number, p1: number, p2: number, p3: number): number;\n\n/**\n * Used internally by {@link THREE.QuadraticBezierCurve3 | QuadraticBezierCurve3} and {@link THREE.QuadraticBezierCurve | QuadraticBezierCurve}.\n * @param t Interpolation weight. Expects a `Float`\n * @param p0 Expects a `Float`\n * @param p1 Expects a `Float`\n * @param p2 P0, p1, the starting, control and end points defining the curve. Expects a `Float`\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/Interpolations | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js | Source}\n */\ndeclare function QuadraticBezier(t: number, p0: number, p1: number, p2: number): number;\n\n/**\n * Used internally by {@link THREE.CubicBezierCurve3 | CubicBezierCurve3} and {@link THREE.CubicBezierCurve | CubicBezierCurve}.\n * @param t Interpolation weight. Expects a `Float`\n * @param p0 Expects a `Float`\n * @param p1 Expects a `Float`\n * @param p2 Expects a `Float`\n * @param p3 P0, p1, p2, the starting, control(twice) and end points defining the curve. Expects a `Float`\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/Interpolations | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js | Source}\n */\ndeclare function CubicBezier(t: number, p0: number, p1: number, p2: number, p3: number): number;\n\nexport { CatmullRom, CubicBezier, QuadraticBezier };\n",
      "@types/three@~0/src/extras/core/Path.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { CurvePath } from \"./CurvePath.d.ts\";\n\n/**\n * A 2D {@link Path} representation.\n * @remarks\n * The class provides methods for creating paths and contours of 2D shapes similar to the 2D Canvas API.\n * @example\n * ```typescript\n * const {@link Path} = new THREE.Path();\n * path.lineTo(0, 0.8);\n * path.quadraticCurveTo(0, 1, 0.2, 1);\n * path.lineTo(1, 1);\n * const points = path.getPoints();\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({\n *     color: 0xffffff\n * });\n * const line = new THREE.Line(geometry, material);\n * scene.add(line);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/Path | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/Path.js | Source}\n */\nexport class Path extends CurvePath<Vector2> {\n    /**\n     * Creates a {@link Path} from the points\n     * @remarks\n     * The first point defines the offset, then successive points are added to the {@link CurvePath.curves | curves} array as {@link LineCurve | LineCurves}.\n     * If no points are specified, an empty {@link Path} is created and the {@link .currentPoint} is set to the origin.\n     * @param points Array of {@link Vector2 | Vector2s}.\n     */\n    constructor(points?: Vector2[]);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `Path`\n     */\n    override readonly type: string | \"Path\";\n\n    /**\n     * The current offset of the path. Any new {@link THREE.Curve | Curve} added will start here.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    currentPoint: Vector2;\n\n    /**\n     * Adds an absolutely positioned {@link THREE.EllipseCurve | EllipseCurve} to the path.\n     * @param x Expects a `Float`\n     * @param y X, The absolute center of the arc. Expects a `Float`\n     * @param radius The radius of the arc. Expects a `Float`\n     * @param startAngle The start angle in radians. Expects a `Float`\n     * @param endAngle The end angle in radians. Expects a `Float`\n     * @param clockwise Sweep the arc clockwise. Default `false`\n     */\n    absarc(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise?: boolean): this;\n\n    /**\n     * Adds an absolutely positioned {@link THREE.EllipseCurve | EllipseCurve} to the path.\n     * @param x Expects a `Float`\n     * @param y X, The absolute center of the ellipse. Expects a `Float`\n     * @param xRadius The radius of the ellipse in the x axis. Expects a `Float`\n     * @param yRadius The radius of the ellipse in the y axis. Expects a `Float`\n     * @param startAngle The start angle in radians. Expects a `Float`\n     * @param endAngle The end angle in radians. Expects a `Float`\n     * @param clockwise Sweep the ellipse clockwise. Default `false`\n     * @param rotation The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, Expects a `Float`. Default `0`\n     */\n    absellipse(\n        aX: number,\n        aY: number,\n        xRadius: number,\n        yRadius: number,\n        aStartAngle: number,\n        aEndAngle: number,\n        aClockwise?: boolean,\n        aRotation?: number,\n    ): this;\n\n    /**\n     * Adds an {@link THREE.EllipseCurve | EllipseCurve} to the path, positioned relative to {@link .currentPoint}.\n     * @param x Expects a `Float`\n     * @param y X, The center of the arc offset from the last call. Expects a `Float`\n     * @param radius The radius of the arc. Expects a `Float`\n     * @param startAngle The start angle in radians. Expects a `Float`\n     * @param endAngle The end angle in radians. Expects a `Float`\n     * @param clockwise Sweep the arc clockwise. Default `false`\n     */\n    arc(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise?: boolean): this;\n\n    /**\n     * This creates a bezier curve from {@link .currentPoint} with (cp1X, cp1Y) and (cp2X, cp2Y) as control points and updates {@link .currentPoint} to x and y.\n     * @param cp1X Expects a `Float`\n     * @param cp1Y Expects a `Float`\n     * @param cp2X Expects a `Float`\n     * @param cp2Y Expects a `Float`\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    bezierCurveTo(aCP1x: number, aCP1y: number, aCP2x: number, aCP2y: number, aX: number, aY: number): this;\n\n    /**\n     * Adds an {@link THREE.EllipseCurve | EllipseCurve} to the path, positioned relative to {@link .currentPoint}.\n     * @param x Expects a `Float`\n     * @param y X, The center of the ellipse offset from the last call. Expects a `Float`\n     * @param xRadius The radius of the ellipse in the x axis. Expects a `Float`\n     * @param yRadius The radius of the ellipse in the y axis. Expects a `Float`\n     * @param startAngle The start angle in radians. Expects a `Float`\n     * @param endAngle The end angle in radians. Expects a `Float`\n     * @param clockwise Sweep the ellipse clockwise. Default `false`\n     * @param rotation The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, Expects a `Float`. Default `0`\n     */\n    ellipse(\n        aX: number,\n        aY: number,\n        xRadius: number,\n        yRadius: number,\n        aStartAngle: number,\n        aEndAngle: number,\n        aClockwise?: boolean,\n        aRotation?: number,\n    ): this;\n\n    /**\n     * Connects a {@link THREE.LineCurve | LineCurve} from {@link .currentPoint} to x, y onto the path.\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    lineTo(x: number, y: number): this;\n\n    /**\n     * Move the {@link .currentPoint} to x, y.\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    moveTo(x: number, y: number): this;\n\n    /**\n     * Creates a quadratic curve from {@link .currentPoint} with cpX and cpY as control point and updates {@link .currentPoint} to x and y.\n     * @param cpX Expects a `Float`\n     * @param cpY Expects a `Float`\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    quadraticCurveTo(aCPx: number, aCPy: number, aX: number, aY: number): this;\n\n    /**\n     * Points are added to the {@link CurvePath.curves | curves} array as {@link THREE.LineCurve | LineCurves}.\n     * @param vector2s\n     */\n    setFromPoints(vectors: Vector2[]): this;\n\n    /**\n     * Connects a new {@link THREE.SplineCurve | SplineCurve} onto the path.\n     * @param points An array of {@link Vector2 | Vector2's}\n     */\n    splineThru(pts: Vector2[]): this;\n}\n",
      "@types/three@~0/src/extras/core/Shape.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Path } from \"./Path.d.ts\";\n\n/**\n * Defines an arbitrary 2d {@link Shape} plane using paths with optional holes\n * @remarks\n * It can be used with {@link THREE.ExtrudeGeometry | ExtrudeGeometry}, {@link THREE.ShapeGeometry | ShapeGeometry}, to get points, or to get triangulated faces.\n * @example\n * ```typescript\n * const heartShape = new THREE.Shape();\n * heartShape.moveTo(25, 25);\n * heartShape.bezierCurveTo(25, 25, 20, 0, 0, 0);\n * heartShape.bezierCurveTo(-30, 0, -30, 35, -30, 35);\n * heartShape.bezierCurveTo(-30, 55, -10, 77, 25, 95);\n * heartShape.bezierCurveTo(60, 77, 80, 55, 80, 35);\n * heartShape.bezierCurveTo(80, 35, 80, 0, 50, 0);\n * heartShape.bezierCurveTo(35, 0, 25, 25, 25, 25);\n * const extrudeSettings = {\n *     depth: 8,\n *     bevelEnabled: true,\n *     bevelSegments: 2,\n *     steps: 2,\n *     bevelSize: 1,\n *     bevelThickness: 1\n * };\n * const geometry = new THREE.ExtrudeGeometry(heartShape, extrudeSettings);\n * const mesh = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_shapes | geometry / shapes }\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_extrude_shapes | geometry / extrude / shapes }\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_extrude_shapes2 | geometry / extrude / shapes2 }\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/Shape | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/Shape.js | Source}\n */\nexport class Shape extends Path {\n    /**\n     * Creates a {@link Shape} from the points\n     * @remarks\n     * The first point defines the offset, then successive points are added to the {@link CurvePath.curves | curves} array as {@link THREE.LineCurve | LineCurves}.\n     * If no points are specified, an empty {@link Shape} is created and the {@link .currentPoint} is set to the origin.\n     * @param points Array of {@link Vector2 | Vector2s}.\n     */\n    constructor(points?: Vector2[]);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `Shape`\n     */\n    override readonly type: string | \"Shape\";\n\n    /**\n     * {@link http://en.wikipedia.org/wiki/Universally_unique_identifier | UUID} of this object instance.\n     * @remarks This gets automatically assigned and shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * An array of {@link Path | paths} that define the holes in the shape.\n     * @defaultValue `[]`\n     */\n    holes: Path[];\n\n    /**\n     * Call {@link THREE.Curve.getPoints | getPoints} on the {@link Shape} and the {@link holes} array\n     * @param divisions The fineness of the result. Expects a `Integer`\n     */\n    extractPoints(divisions: number): {\n        shape: Vector2[];\n        holes: Vector2[][];\n    };\n\n    /**\n     * Get an array of {@link Vector2 | Vector2's} that represent the holes in the shape.\n     * @param divisions The fineness of the result. Expects a `Integer`\n     */\n    getPointsHoles(divisions: number): Vector2[][];\n}\n",
      "@types/three@~0/src/extras/core/ShapePath.d.ts": "import { Color } from \"../../math/Color.d.ts\";\nimport { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Path } from \"./Path.d.ts\";\nimport { Shape } from \"./Shape.d.ts\";\n\n/**\n * This class is used to convert a series of shapes to an array of {@link THREE.Path | Path's},\n * for example an SVG shape to a path.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/core/ShapePath | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/core/ShapePath.js | Source}\n */\nexport class ShapePath {\n    /**\n     * Creates a new {@link ShapePath}\n     * @remarks\n     * Unlike a {@link THREE.Path | Path}, no points are passed in as the {@link ShapePath} is designed to be generated after creation.\n     */\n    constructor();\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `ShapePath`\n     */\n    readonly type: \"ShapePath\";\n\n    /**\n     * Array of {@link THREE.Path | Path's}s.\n     * @defaultValue `[]`\n     */\n    subPaths: Path[];\n\n    /**\n     * The current {@link THREE.Path | Path} that is being generated.\n     * @defaultValue `null`\n     */\n    readonly currentPath: Path | null;\n\n    /**\n     * {@link THREE.Color | Color} of the shape, by default set to white _(0xffffff)_.\n     * @defaultValue `new THREE.Color()`\n     */\n    color: Color;\n\n    /**\n     * Starts a new {@link THREE.Path | Path} and calls {@link THREE.Path.moveTo | Path.moveTo}( x, y ) on that {@link THREE.Path | Path}\n     * @remarks\n     * Also points {@link ShapePath.currentPath | currentPath} to that {@link THREE.Path | Path}.\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    moveTo(x: number, y: number): this;\n\n    /**\n     * This creates a line from the {@link ShapePath.currentPath | currentPath}'s offset to X and Y and updates the offset to X and Y.\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    lineTo(x: number, y: number): this;\n\n    /**\n     * This creates a quadratic curve from the {@link ShapePath.currentPath | currentPath}'s\n     * offset to _x_ and _y_ with _cpX_ and _cpY_ as control point and updates the {@link ShapePath.currentPath | currentPath}'s offset to _x_ and _y_.\n     * @param cpX Expects a `Float`\n     * @param cpY Expects a `Float`\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    quadraticCurveTo(aCPx: number, aCPy: number, aX: number, aY: number): this;\n\n    /**\n     * This creates a bezier curve from the {@link ShapePath.currentPath | currentPath}'s\n     * offset to _x_ and _y_ with _cp1X_, _cp1Y_ and _cp2X_, _cp2Y_ as control points and\n     * updates the {@link ShapePath.currentPath | currentPath}'s offset to _x_ and _y_.\n     * @param cp1X Expects a `Float`\n     * @param cp1Y Expects a `Float`\n     * @param cp2X Expects a `Float`\n     * @param cp2Y Expects a `Float`\n     * @param x Expects a `Float`\n     * @param y Expects a `Float`\n     */\n    bezierCurveTo(aCP1x: number, aCP1y: number, aCP2x: number, aCP2y: number, aX: number, aY: number): this;\n\n    /**\n     * Connects a new {@link THREE.SplineCurve | SplineCurve} onto the {@link ShapePath.currentPath | currentPath}.\n     * @param points An array of {@link THREE.Vector2 | Vector2}s\n     */\n    splineThru(pts: Vector2[]): this;\n\n    /**\n     * Converts the {@link ShapePath.subPaths | subPaths} array into an array of Shapes\n     * @remarks\n     * By default solid shapes are defined clockwise (CW) and holes are defined counterclockwise (CCW)\n     * If isCCW is set to true, then those are flipped.\n     * @param isCCW Changes how solids and holes are generated\n     */\n    toShapes(isCCW: boolean): Shape[];\n}\n",
      "@types/three@~0/src/extras/curves/Curves.d.ts": "export * from \"./ArcCurve.d.ts\";\nexport * from \"./CatmullRomCurve3.d.ts\";\nexport * from \"./CubicBezierCurve.d.ts\";\nexport * from \"./CubicBezierCurve3.d.ts\";\nexport * from \"./EllipseCurve.d.ts\";\nexport * from \"./LineCurve.d.ts\";\nexport * from \"./LineCurve3.d.ts\";\nexport * from \"./QuadraticBezierCurve.d.ts\";\nexport * from \"./QuadraticBezierCurve3.d.ts\";\nexport * from \"./SplineCurve.d.ts\";\n",
      "@types/three@~0/src/extras/DataUtils.d.ts": "/**\n * Returns a half precision floating point value from the given single precision floating point value.\n * @param val A single precision floating point value.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/DataUtils | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/DataUtils.js | Source}\n */\nexport function toHalfFloat(val: number): number;\n\n/**\n * Returns a single precision floating point value from the given half precision floating point value.\n * @param val A half precision floating point value.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/DataUtils | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/DataUtils.js | Source}\n */\nexport function fromHalfFloat(val: number): number;\n",
      "@types/three@~0/src/extras/ImageUtils.d.ts": "import { Mapping } from \"../constants.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\n\n/**\n * A class containing utility functions for images.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/ImageUtils | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/ImageUtils.js | Source}\n */\nexport namespace ImageUtils {\n    /**\n     * Returns a data URI containing a representation of the given image.\n     * @param image The image object.\n     */\n    function getDataURL(\n        image: HTMLImageElement | HTMLCanvasElement | CanvasImageSource | ImageBitmap | ImageData,\n    ): string;\n\n    /**\n     * Converts the given sRGB image data to linear color space.\n     * @param image\n     */\n    function sRGBToLinear(image: HTMLImageElement | HTMLCanvasElement | ImageBitmap): HTMLCanvasElement;\n\n    /**\n     * Converts the given sRGB image data to linear color space.\n     * @param image\n     */\n    function sRGBToLinear(image: ImageData): {\n        data: ImageData[\"data\"];\n        width: ImageData[\"width\"];\n        height: ImageData[\"height\"];\n    };\n}\n",
      "@types/three@~0/src/extras/PMREMGenerator.d.ts": "import { WebGLRenderer } from \"../renderers/WebGLRenderer.d.ts\";\nimport { WebGLRenderTarget } from \"../renderers/WebGLRenderTarget.d.ts\";\nimport { Scene } from \"../scenes/Scene.d.ts\";\nimport { CubeTexture } from \"../textures/CubeTexture.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map (PMREM) from a cubeMap environment texture.\n * @remarks\n * This allows different levels of blur to be quickly accessed based on material roughness\n * Unlike a traditional mipmap chain, it only goes down to the LOD_MIN level (above), and then creates extra even more filtered 'mips' at the same LOD_MIN resolution,\n * associated with higher roughness levels\n * In this way we maintain resolution to smoothly interpolate diffuse lighting while limiting sampling computation.\n * @remarks\n * Note: The minimum {@link THREE.MeshStandardMaterial | MeshStandardMaterial}'s roughness depends on the size of the provided texture\n * If your render has small dimensions or the shiny parts have a lot of curvature, you may still be able to get away with a smaller texture size.\n *\n * | texture size | minimum roughness  |\n * |--------------|--------------------|\n * | 16           | 0.21               |\n * | 32           | 0.15               |\n * | 64           | 0.11               |\n * | 128          | 0.076              |\n * | 256          | 0.054              |\n * | 512          | 0.038              |\n * | 1024         | 0.027              |\n *\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/PMREMGenerator | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/PMREMGenerator.js | Source}\n */\nexport class PMREMGenerator {\n    /**\n     * This constructor creates a new PMREMGenerator.\n     * @param renderer\n     */\n    constructor(renderer: WebGLRenderer);\n\n    /**\n     * Generates a PMREM from a supplied Scene, which can be faster than using an image if networking bandwidth is low\n     * @remarks\n     * Optional near and far planes ensure the scene is rendered in its entirety (the cubeCamera is placed at the origin).\n     * @param scene The given scene.\n     * @param sigma Specifies a blur radius in radians to be applied to the scene before PMREM generation. Default `0`.\n     * @param near The near plane value. Default `0.1`.\n     * @param far The far plane value. Default `100`.\n     */\n    fromScene(scene: Scene, sigma?: number, near?: number, far?: number): WebGLRenderTarget;\n\n    /**\n     * Generates a PMREM from an equirectangular texture, which can be either LDR or HDR. The ideal input image size is\n     * 1k (1024 x 512), as this matches best with the 256 x 256 cubemap output. The smallest supported equirectangular\n     * image size is 64 x 32.\n     */\n    fromEquirectangular(equirectangular: Texture, renderTarget?: WebGLRenderTarget | null): WebGLRenderTarget;\n\n    /**\n     * Generates a PMREM from an cubemap texture, which can be either LDR or HDR. The ideal input cube size is\n     * 256 x 256, as this matches best with the 256 x 256 cubemap output. The smallest supported cube size is 16 x 16.\n     */\n    fromCubemap(cubemap: CubeTexture, renderTarget?: WebGLRenderTarget | null): WebGLRenderTarget;\n\n    /**\n     * Pre-compiles the cubemap shader\n     * @remarks\n     * You can get faster start-up by invoking this method during your texture's network fetch for increased concurrency.\n     */\n    compileCubemapShader(): void;\n\n    /**\n     * Pre-compiles the equirectangular shader\n     * @remarks\n     * You can get faster start-up by invoking this method during your texture's network fetch for increased concurrency.\n     */\n    compileEquirectangularShader(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/extras/ShapeUtils.d.ts": "export interface Vec2 {\n    x: number;\n    y: number;\n}\n\n/**\n * A class containing utility functions for shapes.\n * @remarks Note that these are all linear functions so it is necessary to calculate separately for x, y (and z, w if present) components of a vector.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/ShapeUtils | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/ShapeUtils.js | Source}\n */\nexport namespace ShapeUtils {\n    /**\n     * Calculate area of a ( 2D ) contour polygon.\n     */\n    function area(contour: Vec2[]): number;\n\n    /**\n     * Note that this is a linear function so it is necessary to calculate separately for x, y components of a polygon.\n     * @remarks Used internally by {@link THREE.Path | Path}, {@link THREE.ExtrudeGeometry | ExtrudeGeometry} and {@link THREE.ShapeGeometry | ShapeGeometry}.\n     */\n    function isClockWise(pts: Vec2[]): boolean;\n\n    /**\n     * Used internally by {@link THREE.ExtrudeGeometry | ExtrudeGeometry} and {@link THREE.ShapeGeometry | ShapeGeometry} to calculate faces in shapes with holes.\n     */\n    function triangulateShape(contour: Vec2[], holes: Vec2[][]): number[][];\n}\n",
      "@types/three@~0/src/geometries/Geometries.d.ts": "export * from \"./BoxGeometry.d.ts\";\nexport * from \"./CapsuleGeometry.d.ts\";\nexport * from \"./CircleGeometry.d.ts\";\nexport * from \"./ConeGeometry.d.ts\";\nexport * from \"./CylinderGeometry.d.ts\";\nexport * from \"./DodecahedronGeometry.d.ts\";\nexport * from \"./EdgesGeometry.d.ts\";\nexport * from \"./ExtrudeGeometry.d.ts\";\nexport * from \"./IcosahedronGeometry.d.ts\";\nexport * from \"./LatheGeometry.d.ts\";\nexport * from \"./OctahedronGeometry.d.ts\";\nexport * from \"./PlaneGeometry.d.ts\";\nexport * from \"./PolyhedronGeometry.d.ts\";\nexport * from \"./RingGeometry.d.ts\";\nexport * from \"./ShapeGeometry.d.ts\";\nexport * from \"./SphereGeometry.d.ts\";\nexport * from \"./TetrahedronGeometry.d.ts\";\nexport * from \"./TorusGeometry.d.ts\";\nexport * from \"./TorusKnotGeometry.d.ts\";\nexport * from \"./TubeGeometry.d.ts\";\nexport * from \"./WireframeGeometry.d.ts\";\n",
      "@types/three@~0/src/helpers/ArrowHelper.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Line } from \"../objects/Line.d.ts\";\nimport { Mesh } from \"../objects/Mesh.d.ts\";\n\n/**\n * An 3D arrow object for visualizing directions.\n * @example\n * ```typescript\n * const dir = new THREE.Vector3(1, 2, 0);\n * //normalize the direction vector (convert to vector of length 1)\n * dir.normalize();\n * const origin = new THREE.Vector3(0, 0, 0);\n * const length = 1;\n * const hex = 0xffff00;\n * const {@link ArrowHelper} = new THREE.ArrowHelper(dir, origin, length, hex);\n * scene.add(arrowHelper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_shadowmesh | WebGL / shadowmesh}\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/ArrowHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/ArrowHelper.js | Source}\n */\nexport class ArrowHelper extends Object3D {\n    /**\n     * Create a new instance of {@link ArrowHelper}\n     * @param dir Direction from origin. Must be a unit vector. Default `new THREE.Vector3(0, 0, 1)`\n     * @param origin Point at which the arrow starts. Default `new THREE.Vector3(0, 0, 0)`\n     * @param length Length of the arrow. Default `1`\n     * @param hex Hexadecimal value to define color. Default `0xffff00`\n     * @param headLength The length of the head of the arrow. Default `0.2 * length`\n     * @param headWidth The width of the head of the arrow. Default `0.2 * headLength`\n     */\n    constructor(\n        dir?: Vector3,\n        origin?: Vector3,\n        length?: number,\n        color?: ColorRepresentation,\n        headLength?: number,\n        headWidth?: number,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `ArrowHelper`\n     */\n    override readonly type: string | \"ArrowHelper\";\n\n    /**\n     * Contains the line part of the arrowHelper.\n     */\n    line: Line;\n\n    /**\n     * Contains the cone part of the arrowHelper.\n     */\n    cone: Mesh;\n\n    /**\n     * Sets the color of the arrowHelper.\n     * @param color The desired color.\n     */\n    setColor(color: ColorRepresentation): void;\n\n    /**\n     * @param dir The desired direction. Must be a unit vector.\n     */\n    setDirection(dir: Vector3): void;\n\n    /**\n     * Sets the length of the arrowhelper.\n     * @param length The desired length.\n     * @param headLength The length of the head of the arrow. Default `0.2 * length`\n     * @param headWidth The width of the head of the arrow. Default `0.2 * headLength`\n     */\n    setLength(length: number, headLength?: number, headWidth?: number): void;\n\n    /**\n     * Copy the given object into this object\n     * @remarks Note: event listeners and user-defined callbacks ({@link onAfterRender | .onAfterRender} and {@link onBeforeRender | .onBeforeRender}) are not copied.\n     * @param source\n     */\n    override copy(source: this): this;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/AxesHelper.d.ts": "import { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * An axis object to visualize the 3 axes in a simple way.\n * @remarks\n * The X axis is red\n * The Y axis is green\n * The Z axis is blue.\n * @example\n * ```typescript\n * const {@link AxesHelper} = new THREE.AxesHelper(5);\n * scene.add(axesHelper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_compression | WebGL / buffergeometry / compression}\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_convex | WebGL / geometry / convex}\n * @see Example: {@link https://threejs.org/examples/#webgl_loader_nrrd | WebGL / loader / nrrd}\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/AxesHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/AxesHelper.js | Source}\n */\nexport class AxesHelper extends LineSegments {\n    /**\n     * Create a new instance of {@link AxesHelper}\n     * @param size Size of the lines representing the axes. Default `1`\n     */\n    constructor(size?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `AxesHelper`\n     */\n    override readonly type: string | \"AxesHelper\";\n\n    /**\n     * Sets the axes colors to {@link Color | xAxisColor}, {@link Color | yAxisColor}, {@link Color | zAxisColor}.\n     * @param xAxisColor\n     * @param yAxisColor\n     * @param zAxisColor\n     */\n    setColors(xAxisColor: ColorRepresentation, yAxisColor: ColorRepresentation, zAxisColor: ColorRepresentation): this;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/Box3Helper.d.ts": "import { Box3 } from \"../math/Box3.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * Helper object to visualize a {@link THREE.Box3 | Box3}.\n * @example\n * ```typescript\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize(new THREE.Vector3(1, 1, 1), new THREE.Vector3(2, 1, 3));\n * const helper = new THREE.Box3Helper(box, 0xffff00);\n * scene.add(helper);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/Box3Helper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/Box3Helper.js | Source}\n */\nexport class Box3Helper extends LineSegments {\n    /**\n     * Creates a new wireframe box that represents the passed Box3.\n     * @param box The Box3 to show.\n     * @param color The box's color. Default `0xffff00`\n     */\n    constructor(box: Box3, color?: ColorRepresentation);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `Box3Helper`\n     */\n    override readonly type: string | \"Box3Helper\";\n\n    /**\n     * The Box3 being visualized.\n     */\n    box: Box3;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/BoxHelper.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { LineBasicMaterial } from \"../materials/LineBasicMaterial.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * Helper object to graphically show the world-axis-aligned bounding box around an object\n * @remarks\n * The actual bounding box is handled with {@link THREE.Box3 | Box3}, this is just a visual helper for debugging\n * It can be automatically resized with the {@link THREE.BoxHelper.update | BoxHelper.update} method when the object it's created from is transformed\n * Note that the object must have a {@link THREE.BufferGeometry | BufferGeometry} for this to work, so it won't work with {@link Sprite | Sprites}.\n * @example\n * ```typescript\n * const sphere = new THREE.SphereGeometry();\n * const object = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial(0xff0000));\n * const box = new THREE.BoxHelper(object, 0xffff00);\n * scene.add(box);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_helpers | WebGL / helpers}\n * @see Example: {@link https://threejs.org/examples/#webgl_loader_nrrd | WebGL / loader / nrrd}\n * @see Example: {@link https://threejs.org/examples/#webgl_buffergeometry_drawrange | WebGL / buffergeometry / drawrange}\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/BoxHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/BoxHelper.js | Source}\n */\nexport class BoxHelper extends LineSegments<BufferGeometry, LineBasicMaterial> {\n    /**\n     * Creates a new wireframe box that bounds the passed object\n     * @remarks\n     * Internally this uses {@link THREE.Box3.setFromObject | Box3.setFromObject} to calculate the dimensions\n     * Note that this includes any children.\n     * @param object The object3D to show the world-axis-aligned bounding box.\n     * @param color Hexadecimal value that defines the box's color. Default `0xffff00`\n     */\n    constructor(object: Object3D, color?: ColorRepresentation);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `BoxHelper`\n     */\n    override readonly type: string | \"BoxHelper\";\n\n    /**\n     * Updates the helper's geometry to match the dimensions of the object, including any children\n     * @remarks\n     * See {@link THREE.Box3.setFromObject | Box3.setFromObject}.\n     */\n    update(object?: Object3D): void;\n\n    /**\n     * Updates the wireframe box for the passed object.\n     * @param object {@link THREE.Object3D | Object3D} to create the helper of.\n     */\n    setFromObject(object: Object3D): this;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/CameraHelper.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport { Color } from \"../math/Color.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * This helps with visualizing what a camera contains in its frustum\n * @remarks\n * It visualizes the frustum of a camera using a {@link THREE.LineSegments | LineSegments}.\n * @remarks {@link CameraHelper} must be a child of the scene.\n * @example\n * ```typescript\n * const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n * const helper = new THREE.CameraHelper(camera);\n * scene.add(helper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_camera | WebGL / camera}\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_extrude_splines | WebGL / extrude / splines}\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/CameraHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/CameraHelper.js | Source}\n */\nexport class CameraHelper extends LineSegments {\n    /**\n     * This create a new {@link CameraHelper} for the specified camera.\n     * @param camera The camera to visualize.\n     */\n    constructor(camera: Camera);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `CameraHelper`\n     */\n    override readonly type: string | \"CameraHelper\";\n\n    /**\n     * The camera being visualized.\n     */\n    camera: Camera;\n\n    /**\n     * This contains the points used to visualize the camera.\n     */\n    pointMap: { [id: string]: number[] };\n\n    /**\n     * Reference to the {@link THREE.Camera.matrixWorld | camera.matrixWorld}.\n     */\n    matrix: Matrix4;\n\n    /**\n     * Is set to `false`, as the helper is using the {@link THREE.Camera.matrixWorld | camera.matrixWorld}.\n     * @see {@link THREE.Object3D.matrixAutoUpdate | Object3D.matrixAutoUpdate}.\n     * @defaultValue `false`.\n     */\n    override matrixAutoUpdate: boolean;\n\n    /**\n     * Defines the colors of the helper.\n     * @param frustum\n     * @param cone\n     * @param up\n     * @param target\n     * @param cross\n     */\n    setColors(frustum: Color, cone: Color, up: Color, target: Color, cross: Color): this;\n\n    /**\n     * Updates the helper based on the projectionMatrix of the camera.\n     */\n    update(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/DirectionalLightHelper.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { DirectionalLight } from \"../lights/DirectionalLight.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Line } from \"../objects/Line.d.ts\";\n\n/**\n * Helper object to assist with visualizing a {@link THREE.DirectionalLight | DirectionalLight}'s effect on the scene\n * @remarks\n * This consists of plane and a line representing the light's position and direction.\n * @example\n * ```typescript\n * const light = new THREE.DirectionalLight(0xFFFFFF);\n * scene.add(light);\n *\n * const helper = new THREE.DirectionalLightHelper(light, 5);\n * scene.add(helper);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/DirectionalLightHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/DirectionalLightHelper.js | Source}\n */\nexport class DirectionalLightHelper extends Object3D {\n    /**\n     * Create a new instance of {@link DirectionalLightHelper}\n     * @param light The light to be visualized.\n     * @param size Dimensions of the plane. Default `1`\n     * @param color If this is not the set the helper will take the color of the light. Default `light.color`\n     */\n    constructor(light: DirectionalLight, size?: number, color?: ColorRepresentation);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `DirectionalLightHelper`\n     */\n    override readonly type: string | \"DirectionalLightHelper\";\n\n    /**\n     * Contains the line mesh showing the location of the directional light.\n     */\n    lightPlane: Line;\n\n    /**\n     * Reference to the {@link THREE.DirectionalLight | directionalLight} being visualized.\n     */\n    light: DirectionalLight;\n\n    /**\n     * Reference to the {@link THREE.DirectionalLight.matrixWorld | light.matrixWorld}.\n     */\n    matrix: Matrix4;\n\n    /**\n     * Is set to `false`, as the helper is using the {@link THREE.DirectionalLight.matrixWorld | light.matrixWorld}.\n     * @see {@link THREE.Object3D.matrixAutoUpdate | Object3D.matrixAutoUpdate}.\n     * @defaultValue `false`.\n     */\n    override matrixAutoUpdate: boolean;\n\n    /**\n     * The color parameter passed in the constructor.\n     * @remarks If this is changed, the helper's color will update the next time {@link update} is called.\n     * @defaultValue `undefined`\n     */\n    color: ColorRepresentation | undefined;\n\n    targetLine: Line; // TODO: Double check if this need to be exposed or not.\n\n    /**\n     * Updates the helper to match the position and direction of the {@link light | DirectionalLight} being visualized.\n     */\n    update(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/GridHelper.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { LineBasicMaterial } from \"../materials/LineBasicMaterial.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * The {@link GridHelper} is an object to define grids\n * @remarks\n * Grids are two-dimensional arrays of lines.\n * @example\n * ```typescript\n * const size = 10;\n * const divisions = 10;\n * const {@link GridHelper} = new THREE.GridHelper(size, divisions);\n * scene.add(gridHelper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_helpers | WebGL / helpers}\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/GridHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/GridHelper.js | Source}\n */\nexport class GridHelper extends LineSegments<BufferGeometry, LineBasicMaterial> {\n    /**\n     * Creates a new {@link GridHelper} of size 'size' and divided into 'divisions' segments per side\n     * @remarks\n     * Colors are optional.\n     * @param size The size of the grid. Default `10`\n     * @param divisions The number of divisions across the grid. Default `10`\n     * @param colorCenterLine The color of the centerline. This can be a {@link THREE.Color | Color}, a hexadecimal value and an CSS-Color name. Default `0x444444`\n     * @param colorGrid The color of the lines of the grid. This can be a {@link THREE.Color | Color}, a hexadecimal value and an CSS-Color name. Default `0x888888`\n     */\n    constructor(size?: number, divisions?: number, color1?: ColorRepresentation, color2?: ColorRepresentation);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `GridHelper`\n     */\n    override readonly type: string | \"GridHelper\";\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/HemisphereLightHelper.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { HemisphereLight } from \"../lights/HemisphereLight.d.ts\";\nimport { MeshBasicMaterial } from \"../materials/MeshBasicMaterial.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\n\n/**\n * Creates a visual aid consisting of a spherical {@link THREE.Mesh | Mesh} for a {@link THREE.HemisphereLight | HemisphereLight}.\n * @example\n * ```typescript\n * const light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n * const helper = new THREE.HemisphereLightHelper(light, 5);\n * scene.add(helper);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/HemisphereLightHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/HemisphereLightHelper.js | Source}\n */\nexport class HemisphereLightHelper extends Object3D {\n    /**\n     *  Create a new instance of {@link HemisphereLightHelper}\n     * @param light The light being visualized.\n     * @param size Thr sphere size\n     * @param color If this is not the set the helper will take the color of the light.\n     */\n    constructor(light: HemisphereLight, size: number, color?: ColorRepresentation);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `HemisphereLightHelper`\n     */\n    override readonly type: string | \"HemisphereLightHelper\";\n\n    /**\n     * Reference to the HemisphereLight being visualized.\n     */\n    light: HemisphereLight;\n\n    /**\n     * Reference to the {@link THREE.HemisphereLight.matrixWorld | light.matrixWorld}.\n     */\n    matrix: Matrix4;\n\n    /**\n     * Is set to `false`, as the helper is using the {@link THREE.HemisphereLight.matrixWorld | light.matrixWorld}.\n     * @see {@link THREE.Object3D.matrixAutoUpdate | Object3D.matrixAutoUpdate}.\n     * @defaultValue `false`.\n     */\n    override matrixAutoUpdate: boolean;\n\n    material: MeshBasicMaterial; // TODO: Double check if this need to be exposed or not.\n\n    /**\n     * The color parameter passed in the constructor.\n     * @remarks If this is changed, the helper's color will update the next time {@link update} is called.\n     * @defaultValue `undefined`\n     */\n    color: ColorRepresentation | undefined;\n\n    /**\n     * Updates the helper to match the position and direction of the {@link .light | HemisphereLight}.\n     */\n    update(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/PlaneHelper.d.ts": "import { Plane } from \"../math/Plane.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * Helper object to visualize a {@link THREE.Plane | Plane}.\n * @example\n * ```typescript\n * const plane = new THREE.Plane(new THREE.Vector3(1, 1, 0.2), 3);\n * const helper = new THREE.PlaneHelper(plane, 1, 0xffff00);\n * scene.add(helper);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/PlaneHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/PlaneHelper.js | Source}\n */\nexport class PlaneHelper extends LineSegments {\n    /**\n     * Creates a new wireframe representation of the passed plane.\n     * @param plane The plane to visualize.\n     * @param size Side length of plane helper. Expects a `Float`. Default `1`\n     * @param hex Color. Default `0xffff00`\n     */\n    constructor(plane: Plane, size?: number, hex?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `PlaneHelper`\n     */\n    override readonly type: string | \"PlaneHelper\";\n\n    /**\n     * The {@link Plane | plane} being visualized.\n     */\n    plane: Plane;\n\n    /**\n     * The side lengths of plane helper.\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    size: number;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/PointLightHelper.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { PointLight } from \"../lights/PointLight.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\n\n/**\n * This displays a helper object consisting of a spherical {@link THREE.Mesh | Mesh} for visualizing a {@link THREE.PointLight | PointLight}.\n * @example\n * ```typescript\n * const pointLight = new THREE.PointLight(0xff0000, 1, 100);\n * pointLight.position.set(10, 10, 10);\n * scene.add(pointLight);\n * const sphereSize = 1;\n * const {@link PointLightHelper} = new THREE.PointLightHelper(pointLight, sphereSize);\n * scene.add(pointLightHelper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_helpers | WebGL / helpers}\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/PointLightHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/PointLightHelper.js | Source}\n */\nexport class PointLightHelper extends Object3D {\n    /**\n     * Create a new instance of {@link PointLightHelper}\n     * @param light The light to be visualized.\n     * @param sphereSize The size of the sphere helper. Expects a `Float`. Default `1`\n     * @param color If this is not the set the helper will take the color of the light.\n     */\n    constructor(light: PointLight, sphereSize?: number, color?: ColorRepresentation);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `PointLightHelper`\n     */\n    override readonly type: string | \"PointLightHelper\";\n\n    /**\n     * The {@link THREE.PointLight | PointLight} that is being visualized.\n     */\n    light: PointLight;\n\n    /**\n     * Reference to the {@link THREE.PointLight.matrixWorld | light.matrixWorld}.\n     */\n    matrix: Matrix4;\n\n    /**\n     * The color parameter passed in the constructor.\n     * @remarks If this is changed, the helper's color will update the next time {@link update} is called.\n     * @defaultValue `undefined`\n     */\n    color: ColorRepresentation | undefined;\n\n    /**\n     * Is set to `false`, as the helper is using the {@link THREE.PointLight.matrixWorld | light.matrixWorld}.\n     * @see {@link THREE.Object3D.matrixAutoUpdate | Object3D.matrixAutoUpdate}.\n     * @defaultValue `false`.\n     */\n    override matrixAutoUpdate: boolean;\n\n    /**\n     * Updates the helper to match the position of the {@link THREE..light | .light}.\n     */\n    update(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/PolarGridHelper.d.ts": "import { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * The {@link PolarGridHelper} is an object to define polar grids\n * @remarks\n * Grids are two-dimensional arrays of lines.\n * @example\n * ```typescript\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n * const helper = new THREE.PolarGridHelper(radius, sectors, rings, divisions);\n * scene.add(helper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_helpers | WebGL / helpers}\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/PolarGridHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/PolarGridHelper.js | Source}\n */\nexport class PolarGridHelper extends LineSegments {\n    /**\n     * Creates a new {@link PolarGridHelper} of radius 'radius' with 'sectors' number of sectors and 'rings' number of rings, where each circle is smoothed into 'divisions' number of line segments.\n     * @remarks Colors are optional.\n     * @param radius The radius of the polar grid. This can be any positive number. Default `10`.\n     * @param sectors The number of sectors the grid will be divided into. This can be any positive integer. Default `16`.\n     * @param rings The number of rings. This can be any positive integer. Default `8`.\n     * @param divisions The number of line segments used for each circle. This can be any positive integer that is 3 or greater. Default `64`.\n     * @param color1 The first color used for grid elements. This can be a {@link THREE.Color | Color}, a hexadecimal value and an CSS-Color name. Default `0x444444`.\n     * @param color2 The second color used for grid elements. This can be a {@link THREE.Color | Color}, a hexadecimal value and an CSS-Color name. Default `0x888888`.\n     */\n    constructor(\n        radius?: number,\n        radials?: number,\n        circles?: number,\n        divisions?: number,\n        color1?: ColorRepresentation,\n        color2?: ColorRepresentation,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `PolarGridHelper`\n     */\n    override readonly type: string | \"PolarGridHelper\";\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/SkeletonHelper.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Bone } from \"../objects/Bone.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\nimport { SkinnedMesh } from \"../objects/SkinnedMesh.d.ts\";\n\n/**\n * A helper object to assist with visualizing a {@link Skeleton | Skeleton}\n * @remarks\n * The helper is rendered using a {@link LineBasicMaterial | LineBasicMaterial}.\n * @example\n * ```typescript\n * const helper = new THREE.SkeletonHelper(skinnedMesh);\n * scene.add(helper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_animation_skinning_blending | WebGL / animation / skinning / blending}\n * @see Example: {@link https://threejs.org/examples/#webgl_animation_skinning_morph | WebGL / animation / skinning / morph}\n * @see Example: {@link https://threejs.org/examples/#webgl_loader_bvh | WebGL / loader / bvh }\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/SkeletonHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/SkeletonHelper.js | Source}\n */\nexport class SkeletonHelper extends LineSegments {\n    /**\n     * Create a new instance of {@link SkeletonHelper}\n     * @param object Usually an instance of {@link THREE.SkinnedMesh | SkinnedMesh}.\n     * However, any instance of {@link THREE.Object3D | Object3D} can be used if it represents a hierarchy of {@link Bone | Bone}s (via {@link THREE.Object3D.children | Object3D.children}).\n     */\n    constructor(object: SkinnedMesh | Object3D);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link SkeletonHelper}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSkeletonHelper = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `SkeletonHelper`\n     */\n    override readonly type: string | \"SkeletonHelper\";\n\n    /**\n     * The list of bones that the helper renders as {@link Line | Lines}.\n     */\n    bones: Bone[];\n\n    /**\n     * The object passed in the constructor.\n     */\n    root: SkinnedMesh | Object3D;\n\n    /**\n     * Reference to the {@link THREE.Object3D.matrixWorld | root.matrixWorld}.\n     */\n    matrix: Matrix4;\n\n    /**\n     * Is set to `false`, as the helper is using the {@link THREE.Object3D.matrixWorld | root.matrixWorld}.\n     * @see {@link THREE.Object3D.matrixAutoUpdate | Object3D.matrixAutoUpdate}.\n     * @defaultValue `false`.\n     */\n    override matrixAutoUpdate: boolean;\n\n    /**\n     * Updates the helper.\n     */\n    update(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/helpers/SpotLightHelper.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { Light } from \"../lights/Light.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { LineSegments } from \"../objects/LineSegments.d.ts\";\n\n/**\n * This displays a cone shaped helper object for a {@link THREE.SpotLight | SpotLight}.\n * @example\n * ```typescript\n * const spotLight = new THREE.SpotLight(0xffffff);\n * spotLight.position.set(10, 10, 10);\n * scene.add(spotLight);\n * const {@link SpotLightHelper} = new THREE.SpotLightHelper(spotLight);\n * scene.add(spotLightHelper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_lights_spotlights | WebGL/ lights / spotlights }\n * @see {@link https://threejs.org/docs/index.html#api/en/helpers/SpotLightHelper | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/helpers/SpotLightHelper.js | Source}\n */\nexport class SpotLightHelper extends Object3D {\n    /**\n     * Create a new instance of {@link SpotLightHelper}\n     * @param light The {@link THREE.SpotLight | SpotLight} to be visualized.\n     * @param color If this is not the set the helper will take the color of the light. Default `light.color`\n     */\n    constructor(light: Light, color?: ColorRepresentation);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `SpotLightHelper`\n     */\n    override readonly type: string | \"SpotLightHelper\";\n\n    /**\n     * {@link THREE.LineSegments | LineSegments} used to visualize the light.\n     */\n    cone: LineSegments;\n\n    /**\n     * Reference to the {@link THREE.SpotLight | SpotLight} being visualized.\n     */\n    light: Light;\n\n    /**\n     * Reference to the spotLight's {@link Object3D.matrixWorld | matrixWorld}.\n     */\n    matrix: Matrix4;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If this is changed, the helper's color will update the next time {@link SpotLightHelper.update | update} is called.\n     * @defaultValue `undefined`\n     */\n    color: ColorRepresentation | undefined;\n\n    /**\n     * Is set to `false`, as the helper is using the {@link THREE.Light.matrixWorld | light.matrixWorld}.\n     * @see {@link THREE.Object3D.matrixAutoUpdate | Object3D.matrixAutoUpdate}.\n     * @defaultValue `false`.\n     */\n    override matrixAutoUpdate: boolean;\n\n    /**\n     * Updates the light helper.\n     */\n    update(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/lights/AmbientLight.d.ts": "import { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Light } from \"./Light.d.ts\";\n\n/**\n * This light globally illuminates all objects in the scene equally.\n * @remarks This light cannot be used to cast shadows as it does not have a direction.\n * @example\n * ```typescript\n * const light = new THREE.AmbientLight(0x404040); // soft white light\n * scene.add(light);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/AmbientLight | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/AmbientLight.js | Source}\n */\nexport class AmbientLight extends Light<undefined> {\n    /**\n     * Creates a new {@link AmbientLight}.\n     * @param color Numeric value of the RGB component of the color. Default `0xffffff`\n     * @param intensity Numeric value of the light's strength/intensity. Expects a `Float`. Default `1`\n     */\n    constructor(color?: ColorRepresentation, intensity?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link AmbientLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isAmbientLight: true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `AmbientLight`\n     */\n    override readonly type: string | \"AmbientLight\";\n}\n",
      "@types/three@~0/src/lights/DirectionalLight.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { DirectionalLightShadow } from \"./DirectionalLightShadow.d.ts\";\nimport { Light } from \"./Light.d.ts\";\n\n/**\n * A light that gets emitted in a specific direction\n * @remarks\n * This light will behave as though it is infinitely far away and the rays produced from it are all parallel\n * The common use case for this is to simulate daylight; the sun is far enough away that its position can be considered to be infinite, and all light rays coming from it are parallel.\n * A common point of confusion for directional lights is that setting the rotation has no effect\n * @remarks\n * This is because three.js's {@link DirectionalLight} is the equivalent to what is often called a 'Target Direct Light' in other applications.\n * This means that its direction is calculated as pointing from the light's {@link THREE.Object3D.position | position} to the {@link THREE.DirectionalLight.target | target}'s\n * position (as opposed to a 'Free Direct Light' that just has a rotation component).\n * See the {@link THREE.DirectionalLight.target | target} property below for details on updating the target.\n * @example\n * ```typescript\n * // White directional light at half intensity shining from the top.\n * const {@link DirectionalLight} = new THREE.DirectionalLight(0xffffff, 0.5);\n * scene.add(directionalLight);\n * ```\n * @see Example: {@link https://threejs.org/examples/#misc_controls_fly | controls / fly }\n * @see Example: {@link https://threejs.org/examples/#webgl_effects_parallaxbarrier | effects / parallaxbarrier }\n * @see Example: {@link https://threejs.org/examples/#webgl_effects_stereo | effects / stereo }\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_extrude_splines | geometry / extrude / splines }\n * @see Example: {@link https://threejs.org/examples/#webgl_materials_bumpmap | materials / bumpmap }\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/DirectionalLight | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLight.js | Source}\n */\nexport class DirectionalLight extends Light<DirectionalLightShadow> {\n    /**\n     * Creates a new {@link DirectionalLight}.\n     * @param color Hexadecimal color of the light. Default `0xffffff` _(white)_.\n     * @param intensity Numeric value of the light's strength/intensity. Expects a `Float`. Default `1`\n     */\n    constructor(color?: ColorRepresentation, intensity?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link DirectionalLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isDirectionalLight: true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `DirectionalLight`\n     */\n    override readonly type: string | \"DirectionalLight\";\n\n    /**\n     * Whether the object gets rendered into shadow map.\n     * @remarks\n     * If set to `true` light will cast dynamic shadows.\n     * **Warning**: This is expensive and requires tweaking to get shadows looking right.\n     * @see {@link THREE.DirectionalLightShadow | DirectionalLightShadow} for details.\n     * @defaultValue `false`\n     */\n    override castShadow: boolean;\n\n    /**\n     * This is set equal to {@link THREE.Object3D.DEFAULT_UP}, so that the light shines from the top down.\n     * @defaultValue {@link Object3D.DEFAULT_UP} _(0, 1, 0)_\n     */\n    override readonly position: Vector3;\n\n    /**\n     * A {@link THREE.DirectionalLightShadow | DirectionalLightShadow} used to calculate shadows for this light.\n     * @defaultValue `new THREE.DirectionalLightShadow()`\n     */\n    shadow: DirectionalLightShadow;\n\n    /**\n     * The {@link DirectionalLight} points from its {@link DirectionalLight.position | position} to target.position.\n     * @remarks **Note**: For the target's position to be changed to anything other than the default,\n     * it must be added to the {@link THREE.Scene | scene} using\n     * ```typescript\n     * Scene.add( light.target );\n     * ```\n     * This is so that the target's {@link THREE.Object3D.matrixWorld | matrixWorld} gets automatically updated each frame.\n     *\n     * It is also possible to set the target to be another object in the scene (anything with a {@link THREE.Object3D.position | position} property),\n     * like so:\n     * ```typescript\n     * const targetObject = new THREE.Object3D();\n     * scene.add(targetObject);\n     * light.target = targetObject;\n     * ```\n     * The {@link DirectionalLight} will now track the target object.\n     * @defaultValue `new THREE.Object3D()` at _(0, 0, 0)_\n     */\n    target: Object3D;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/lights/DirectionalLightShadow.d.ts": "import { OrthographicCamera } from \"../cameras/OrthographicCamera.d.ts\";\nimport { LightShadow } from \"./LightShadow.d.ts\";\n\n/**\n * This is used internally by {@link DirectionalLight | DirectionalLights} for calculating shadows.\n * Unlike the other shadow classes, this uses an {@link THREE.OrthographicCamera | OrthographicCamera} to calculate the shadows,\n * rather than a {@link THREE.PerspectiveCamera | PerspectiveCamera}\n * @remarks\n * This is because light rays from a {@link THREE.DirectionalLight | DirectionalLight} are parallel.\n * @example\n * ```typescript\n * //Create a WebGLRenderer and turn on shadows in the renderer\n * const renderer = new THREE.WebGLRenderer();\n * renderer.shadowMap.enabled = true;\n * renderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\n * //Create a DirectionalLight and turn on shadows for the light\n * const light = new THREE.DirectionalLight(0xffffff, 1);\n * light.position.set(0, 1, 0); //default; light shining from top\n * light.castShadow = true; // default false\n * scene.add(light);\n * //Set up shadow properties for the light\n * light.shadow.mapSize.width = 512; // default\n * light.shadow.mapSize.height = 512; // default\n * light.shadow.camera.near = 0.5; // default\n * light.shadow.camera.far = 500; // default\n * //Create a sphere that cast shadows (but does not receive them)\n * const sphereGeometry = new THREE.SphereGeometry(5, 32, 32);\n * const sphereMaterial = new THREE.MeshStandardMaterial({\n *     color: 0xff0000\n * });\n * const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n * sphere.castShadow = true; //default is false\n * sphere.receiveShadow = false; //default\n * scene.add(sphere);\n * //Create a plane that receives shadows (but does not cast them)\n * const planeGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);\n * const planeMaterial = new THREE.MeshStandardMaterial({\n *     color: 0x00ff00\n * })\n * const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n * plane.receiveShadow = true;\n * scene.add(plane);\n * //Create a helper for the shadow camera (optional)\n * const helper = new THREE.CameraHelper(light.shadow.camera);\n * scene.add(helper);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/shadows/DirectionalLightShadow | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLightShadow.js | Source}\n */\nexport class DirectionalLightShadow extends LightShadow<OrthographicCamera> {\n    /**\n     * Create a new instance of {@link DirectionalLightShadow}\n     */\n    constructor();\n\n    /**\n     * Read-only flag to check if a given object is of type {@link DirectionalLightShadow}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isDirectionalLightShadow: true;\n\n    /**\n     * The light's view of the world.\n     * @remarks This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow.\n     * @defaultValue is an {@link THREE.OrthographicCamera | OrthographicCamera} with\n     * {@link OrthographicCamera.left | left} and {@link OrthographicCamera.bottom | bottom} set to -5,\n     * {@link OrthographicCamera.right | right} and {@link OrthographicCamera.top | top} set to 5,\n     * the {@link OrthographicCamera.near | near} clipping plane at 0.5 and\n     * the {@link OrthographicCamera.far | far} clipping plane at 500.\n     */\n    camera: OrthographicCamera;\n}\n",
      "@types/three@~0/src/lights/HemisphereLight.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Light } from \"./Light.d.ts\";\n\n/**\n * A light source positioned directly above the scene, with color fading from the sky color to the ground color.\n * @remarks This light cannot be used to cast shadows.\n * @example\n * ```typescript\n * const light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n * scene.add(light);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_animation_skinning_blending | animation / skinning / blending }\n * @see Example: {@link https://threejs.org/examples/#webgl_lights_hemisphere | lights / hemisphere }\n * @see Example: {@link https://threejs.org/examples/#misc_controls_pointerlock | controls / pointerlock }\n * @see Example: {@link https://threejs.org/examples/#webgl_loader_collada_kinematics | loader / collada / kinematics }\n * @see Example: {@link https://threejs.org/examples/#webgl_loader_stl | loader / stl }\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/HemisphereLight | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/HemisphereLight.js | Source}\n */\nexport class HemisphereLight extends Light<undefined> {\n    /**\n     * Creates a new {@link HemisphereLight}.\n     * @param skyColor Hexadecimal color of the sky. Expects a `Integer`. Default `0xffffff` _(white)_.\n     * @param groundColor Hexadecimal color of the ground. Expects a `Integer`. Default `0xffffff` _(white)_.\n     * @param intensity Numeric value of the light's strength/intensity. Expects a `Float`. Default `1`.\n     */\n    constructor(skyColor?: ColorRepresentation, groundColor?: ColorRepresentation, intensity?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link HemisphereLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isHemisphereLight: true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `HemisphereLight`\n     */\n    override readonly type: string | \"HemisphereLight\";\n\n    /**\n     * This is set equal to {@link THREE.Object3D.DEFAULT_UP}, so that the light shines from the top down.\n     * @defaultValue {@link Object3D.DEFAULT_UP} _(0, 1, 0)_\n     */\n    override readonly position: Vector3;\n\n    /**\n     * The light's sky color, as passed in the constructor.\n     * @defaultValue `new THREE.Color()` set to white _(0xffffff)_.\n     */\n    override color: Color;\n\n    /**\n     * The light's ground color, as passed in the constructor.\n     * @defaultValue `new THREE.Color()` set to white _(0xffffff)_.\n     */\n    groundColor: Color;\n}\n",
      "@types/three@~0/src/lights/Light.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { LightShadow } from \"./LightShadow.d.ts\";\n\n/**\n * Abstract base class for lights.\n * @remarks All other light types inherit the properties and methods described here.\n */\nexport abstract class Light<TShadowSupport extends LightShadow | undefined = LightShadow | undefined> extends Object3D {\n    /**\n     * Creates a new {@link Light}\n     * @remarks\n     * **Note** that this is not intended to be called directly (use one of derived classes instead).\n     * @param color Hexadecimal color of the light. Default `0xffffff` _(white)_.\n     * @param intensity Numeric value of the light's strength/intensity. Expects a `Float`. Default `1`.\n     */\n    constructor(color?: ColorRepresentation, intensity?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link HemisphereLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLight: true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `Light`\n     */\n    override readonly type: string | \"Light\";\n\n    /**\n     * Color of the light. \\\n     * @defaultValue `new THREE.Color(0xffffff)` _(white)_.\n     */\n    color: Color;\n\n    /**\n     * The light's intensity, or strength.\n     * The units of intensity depend on the type of light.\n     * @defaultValue `1`\n     */\n    intensity: number;\n\n    /**\n     * A {@link THREE.LightShadow | LightShadow} used to calculate shadows for this light.\n     * @remarks Available only on Light's that support shadows.\n     */\n    shadow: TShadowSupport;\n\n    /**\n     * Copies value of all the properties from the {@link Light | source} to this instance.\n     * @param source\n     * @param recursive\n     */\n    copy(source: this, recursive?: boolean): this;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/lights/LightProbe.d.ts": "import { SphericalHarmonics3 } from \"../math/SphericalHarmonics3.d.ts\";\nimport { Light } from \"./Light.d.ts\";\n\n/**\n * Light probes are an alternative way of adding light to a 3D scene.\n * @remarks\n * Unlike classical light sources (e.g\n * directional, point or spot lights), light probes do not emit light\n * Instead they store information about light passing through 3D space\n * During rendering, the light that hits a 3D object is approximated by using the data from the light probe.\n * Light probes are usually created from (radiance) environment maps\n * The class {@link THREE.LightProbeGenerator | LightProbeGenerator} can be used to create light probes from\n * instances of {@link THREE.CubeTexture | CubeTexture} or {@link THREE.WebGLCubeRenderTarget | WebGLCubeRenderTarget}\n * However, light estimation data could also be provided in other forms e.g\n * by WebXR\n * This enables the rendering of augmented reality content that reacts to real world lighting.\n * The current probe implementation in three.js supports so-called diffuse light probes\n * This type of light probe is functionally equivalent to an irradiance environment map.\n * @see Example: {@link https://threejs.org/examples/#webgl_lightprobe | WebGL / light probe }\n * @see Example: {@link https://threejs.org/examples/#webgl_lightprobe_cubecamera | WebGL / light probe / cube camera }\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/LightProbe | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/LightProbe.js | Source}\n */\nexport class LightProbe extends Light {\n    /**\n     * Creates a new LightProbe.\n     * @param sh An instance of {@link THREE.SphericalHarmonics3 | SphericalHarmonics3}. Default `new THREE.SphericalHarmonics3()``.\n     * @param intensity Numeric value of the light probe's intensity. Expects a `Float`. Default `1`.\n     */\n    constructor(sh?: SphericalHarmonics3, intensity?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link DirectionalLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLightProbe: true;\n\n    /**\n     * A light probe uses spherical harmonics to encode lighting information.\n     * @defaultValue `new THREE.SphericalHarmonics3()`\n     */\n    sh: SphericalHarmonics3;\n\n    /** @internal */\n    fromJSON(json: {}): LightProbe;\n}\n",
      "@types/three@~0/src/lights/LightShadow.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport { Frustum } from \"../math/Frustum.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Vector4 } from \"../math/Vector4.d.ts\";\nimport { WebGLRenderTarget } from \"../renderers/WebGLRenderTarget.d.ts\";\nimport { Light } from \"./Light.d.ts\";\n\n/**\n * Serves as a base class for the other shadow classes.\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/shadows/LightShadow | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/LightShadow.js | Source}\n */\nexport class LightShadow<TCamera extends Camera = Camera> {\n    /**\n     * Create a new instance of {@link LightShadow}\n     * @param camera The light's view of the world.\n     */\n    constructor(camera: TCamera);\n\n    /**\n     * The light's view of the world.\n     * @remark This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow.\n     */\n    camera: TCamera;\n\n    /**\n     * Shadow map bias, how much to add or subtract from the normalized depth when deciding whether a surface is in shadow.\n     * @remark The Very tiny adjustments here (in the order of 0.0001) may help reduce artifacts in shadows.\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    bias: number;\n\n    /**\n     * Defines how much the position used to query the shadow map is offset along the object normal.\n     * @remark The Increasing this value can be used to reduce shadow acne especially in large scenes where light shines onto geometry at a shallow angle.\n     * @remark The cost is that shadows may appear distorted.\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    normalBias: number;\n\n    /**\n     * Setting this to values greater than 1 will blur the edges of the shadow.toi\n     * @remark High values will cause unwanted banding effects in the shadows - a greater {@link LightShadow.mapSize | mapSize\n     *  will allow for a higher value to be used here before these effects become visible.\n     * @remark If {@link THREE.WebGLRenderer.shadowMap.type | WebGLRenderer.shadowMap.type} is set to {@link Renderer | PCFSoftShadowMap},\n     * radius has no effect and it is recommended to increase softness by decreasing {@link LightShadow.mapSize | mapSize} instead.\n     * @remark Note that this has no effect if the {@link THREE.WebGLRenderer.shadowMap | WebGLRenderer.shadowMap}.{@link THREE.WebGLShadowMap.type | type}\n     * is set to {@link THREE.BasicShadowMap | BasicShadowMap}.\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    radius: number;\n\n    /**\n     * The amount of samples to use when blurring a VSM shadow map.\n     * @remarks Expects a `Integer`\n     * @defaultValue `8`\n     */\n    blurSamples: number;\n\n    /**\n     * A {@link THREE.Vector2 | Vector2} defining the width and height of the shadow map.\n     * @remarks Higher values give better quality shadows at the cost of computation time.\n     * @remarks Values must be powers of 2, up to the {@link THREE.WebGLRenderer.capabilities | WebGLRenderer.capabilities}.maxTextureSize for a given device,\n     * although the width and height don't have to be the same (so, for example, (512, 1024) is valid).\n     * @defaultValue `new THREE.Vector2(512, 512)`\n     */\n    mapSize: Vector2;\n\n    /**\n     * The depth map generated using the internal camera; a location beyond a pixel's depth is in shadow. Computed internally during rendering.\n     * @defaultValue null\n     */\n    map: WebGLRenderTarget | null;\n\n    /**\n     * The distribution map generated using the internal camera; an occlusion is calculated based on the distribution of depths. Computed internally during rendering.\n     * @defaultValue null\n     */\n    mapPass: WebGLRenderTarget | null;\n\n    /**\n     * Model to shadow camera space, to compute location and depth in shadow map.\n     * Stored in a {@link Matrix4 | Matrix4}.\n     * @remarks This is computed internally during rendering.\n     * @defaultValue new THREE.Matrix4()\n     */\n    matrix: Matrix4;\n\n    /**\n     * Enables automatic updates of the light's shadow. If you do not require dynamic lighting / shadows, you may set this to `false`.\n     * @defaultValue `true`\n     */\n    autoUpdate: boolean;\n\n    /**\n     * When set to `true`, shadow maps will be updated in the next `render` call.\n     * If you have set {@link autoUpdate} to `false`, you will need to set this property to `true` and then make a render call to update the light's shadow.\n     * @defaultValue `false`\n     */\n    needsUpdate: boolean;\n\n    /**\n     * Used internally by the renderer to get the number of viewports that need to be rendered for this shadow.\n     */\n    getViewportCount(): number;\n\n    /**\n     * Copies value of all the properties from the {@link {@link LightShadow} | source} to this Light.\n     * @param source\n     */\n    copy(source: LightShadow): this;\n\n    /**\n     * Creates a new {@link LightShadow} with the same properties as this one.\n     */\n    clone(recursive?: boolean): this;\n\n    /**\n     * Serialize this LightShadow.\n     */\n    toJSON(): {};\n\n    /**\n     * Gets the shadow cameras frustum\n     * @remarks\n     * Used internally by the renderer to cull objects.\n     */\n    getFrustum(): Frustum;\n\n    /**\n     * Update the matrices for the camera and shadow, used internally by the renderer.\n     * @param light The light for which the shadow is being rendered.\n     */\n    updateMatrices(light: Light): void;\n\n    getViewport(viewportIndex: number): Vector4;\n\n    /**\n     * Used internally by the renderer to extend the shadow map to contain all viewports\n     */\n    getFrameExtents(): Vector2;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/lights/PointLight.d.ts": "import { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Light } from \"./Light.d.ts\";\nimport { PointLightShadow } from \"./PointLightShadow.d.ts\";\n\n/**\n * A light that gets emitted from a single point in all directions\n * @remarks\n * A common use case for this is to replicate the light emitted from a bare lightbulb.\n * @example\n * ```typescript\n * const light = new THREE.PointLight(0xff0000, 1, 100);\n * light.position.set(50, 50, 50);\n * scene.add(light);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_lights_pointlights | lights / pointlights }\n * @see Example: {@link https://threejs.org/examples/#webgl_effects_anaglyph | effects / anaglyph }\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_text | geometry / text }\n * @see Example: {@link https://threejs.org/examples/#webgl_lensflares | lensflares }\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/PointLight | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/PointLight.js | Source}\n */\nexport class PointLight extends Light<PointLightShadow> {\n    /**\n     * Creates a new PointLight.\n     * @param color Hexadecimal color of the light. Default is 0xffffff (white). Expects a `Integer`\n     * @param intensity Numeric value of the light's strength/intensity. Expects a `Float`. Default `1`\n     * @param distance Maximum range of the light. Default is 0 (no limit).\n     * @param decay The amount the light dims along the distance of the light. Expects a `Float`. Default `2`\n     */\n    constructor(color?: ColorRepresentation, intensity?: number, distance?: number, decay?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link PointLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isPointLight: true;\n\n    /**\n     * @default 'PointLight'\n     */\n    type: string;\n\n    /**\n     * The light's intensity.\n     *\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** — intensity is the luminous intensity of the light measured in candela (cd).\n     * @remarks Changing the intensity will also change the light's power.\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    intensity: number;\n\n    /**\n     * When **Default mode** — When distance is zero, light does not attenuate. When distance is non-zero,\n     * light will attenuate linearly from maximum intensity at the light's position down to zero at this distance from the light.\n     *\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** — When distance is zero,\n     * light will attenuate according to inverse-square law to infinite distance.\n     * When distance is non-zero, light will attenuate according to inverse-square law until near the distance cutoff,\n     * where it will then attenuate quickly and smoothly to 0. Inherently, cutoffs are not physically correct.\n     *\n     * @defaultValue `0.0`\n     * @remarks Expects a `Float`\n     */\n    distance: number;\n\n    /**\n     * If set to `true` light will cast dynamic shadows.\n     * **Warning**: This is expensive and requires tweaking to get shadows looking right.\n     * @see {@link THREE.PointLightShadow | PointLightShadow} for details.\n     * @defaultValue `false`\n     */\n    castShadow: boolean;\n\n    /**\n     * The amount the light dims along the distance of the light.\n     * In context of physically-correct rendering the default value should not be changed.\n     * @remarks Expects a `Float`\n     * @defaultValue `2`\n     */\n    decay: number;\n\n    /**\n     * A {@link THREE.PointLightShadow | PointLightShadow} used to calculate shadows for this light.\n     * The lightShadow's {@link LightShadow.camera | camera} is set to\n     * a {@link THREE.PerspectiveCamera | PerspectiveCamera} with {@link PerspectiveCamera.fov | fov} of 90,\n     * {@link PerspectiveCamera.aspect | aspect} of 1,\n     * {@link PerspectiveCamera.near | near} clipping plane at 0.5\n     * and {@link PerspectiveCamera.far | far} clipping plane at 500.\n     * @defaultValue new THREE.PointLightShadow()\n     */\n    shadow: PointLightShadow;\n\n    /**\n     * The light's power.\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** — power is the luminous power of the light measured in lumens (lm).\n     * @remarks Changing the power will also change the light's intensity.\n     * @remarks Expects a `Float`\n     */\n    power: number;\n}\n",
      "@types/three@~0/src/lights/PointLightShadow.d.ts": "import { PerspectiveCamera } from \"../cameras/PerspectiveCamera.d.ts\";\nimport { Light } from \"./Light.d.ts\";\nimport { LightShadow } from \"./LightShadow.d.ts\";\n\n/**\n * Shadow for {@link THREE.PointLight | PointLight}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/PointLightShadow.js | Source}\n */\nexport class PointLightShadow extends LightShadow<PerspectiveCamera> {\n    /**\n     * Read-only flag to check if a given object is of type {@link PointLightShadow}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isPointLightShadow = true;\n\n    /**\n     * Update the matrices for the camera and shadow, used internally by the renderer.\n     * @param light The light for which the shadow is being rendered.\n     */\n    override updateMatrices(light: Light, viewportIndex?: number): void;\n}\n",
      "@types/three@~0/src/lights/RectAreaLight.d.ts": "import { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Light } from \"./Light.d.ts\";\n\n/**\n * {@link RectAreaLight} emits light uniformly across the face a rectangular plane\n * @remarks\n * This light type can be used to simulate light sources such as bright windows or strip lighting.\n * Important Notes:\n *  - There is no shadow support.\n *  - Only {@link MeshStandardMaterial | MeshStandardMaterial} and {@link MeshPhysicalMaterial | MeshPhysicalMaterial} are supported.\n *  - You have to include {@link https://threejs.org/examples/jsm/lights/RectAreaLightUniformsLib.js | RectAreaLightUniformsLib} into your scene and call `init()`.\n * @example\n * ```typescript\n * const width = 10;\n * const height = 10;\n * const intensity = 1;\n * const rectLight = new THREE.RectAreaLight(0xffffff, intensity, width, height);\n * rectLight.position.set(5, 5, 0);\n * rectLight.lookAt(0, 0, 0);\n * scene.add(rectLight)\n * const rectLightHelper = new RectAreaLightHelper(rectLight);\n * rectLight.add(rectLightHelper);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_lights_rectarealight | WebGL / {@link RectAreaLight} }\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/RectAreaLight | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/RectAreaLight.js | Source}\n */\nexport class RectAreaLight extends Light<undefined> {\n    /**\n     * Creates a new {@link RectAreaLight}.\n     * @param color Hexadecimal color of the light. Default `0xffffff` _(white)_.\n     * @param intensity The light's intensity, or brightness. Expects a `Float`. Default `1`\n     * @param width Width of the light. Expects a `Float`. Default `10`\n     * @param height Height of the light. Expects a `Float`. Default `10`\n     */\n    constructor(color?: ColorRepresentation, intensity?: number, width?: number, height?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link RectAreaLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isRectAreaLight: true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `RectAreaLight`\n     */\n    override readonly type: string | \"RectAreaLight\";\n\n    /**\n     * The width of the light.\n     * @remarks Expects a `Float`\n     * @defaultValue `10`\n     */\n    width: number;\n\n    /**\n     * The height of the light.\n     * @remarks Expects a `Float`\n     * @defaultValue `10`\n     */\n    height: number;\n\n    /**\n     * The light's intensity.\n     * @remarks Changing the intensity will also change the light's power.\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** — intensity is the luminance (brightness) of the light measured in nits (cd/m^2).\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    intensity: number;\n\n    /**\n     * The light's power.\n     * @remarks Changing the power will also change the light's intensity.\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** — power is the luminous power of the light measured in lumens (lm).\n     * @remarks Expects a `Float`\n     */\n    power: number;\n}\n",
      "@types/three@~0/src/lights/SpotLight.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Light } from \"./Light.d.ts\";\nimport { SpotLightShadow } from \"./SpotLightShadow.d.ts\";\n\n/**\n * This light gets emitted from a single point in one direction, along a cone that increases in size the further from the light it gets.\n * @example\n * ```typescript\n * // white {@link SpotLight} shining from the side, modulated by a texture, casting a shadow\n * const {@link SpotLight} = new THREE.SpotLight(0xffffff);\n * spotLight.position.set(100, 1000, 100);\n * spotLight.map = new THREE.TextureLoader().load(url);\n * spotLight.castShadow = true;\n * spotLight.shadow.mapSize.width = 1024;\n * spotLight.shadow.mapSize.height = 1024;\n * spotLight.shadow.camera.near = 500;\n * spotLight.shadow.camera.far = 4000;\n * spotLight.shadow.camera.fov = 30;\n * scene.add(spotLight);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_lights_spotlight | lights / {@link SpotLight} }\n * @see Example: {@link https://threejs.org/examples/#webgl_lights_spotlights | lights / spotlights }\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/SpotLight | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/SpotLight.js | Source}\n */\nexport class SpotLight extends Light<SpotLightShadow> {\n    /**\n     * Creates a new SpotLight.\n     * @param color Hexadecimal color of the light. Default `0xffffff` _(white)_.\n     * @param intensity Numeric value of the light's strength/intensity. Expects a `Float`. Default `1`.\n     * @param distance Maximum range of the light. Default is 0 (no limit). Expects a `Float`.\n     * @param angle Maximum angle of light dispersion from its direction whose upper bound is Math.PI/2.\n     * @param penumbra Percent of the {@link SpotLight} cone that is attenuated due to penumbra. Takes values between zero and 1. Expects a `Float`. Default `0`.\n     * @param decay The amount the light dims along the distance of the light. Expects a `Float`. Default `2`.\n     */\n    constructor(\n        color?: ColorRepresentation,\n        intensity?: number,\n        distance?: number,\n        angle?: number,\n        penumbra?: number,\n        decay?: number,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link SpotLight}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSpotLight: true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `SpotLight`\n     */\n    override readonly type: string | \"SpotLight\";\n\n    /**\n     * This is set equal to {@link THREE.Object3D.DEFAULT_UP | Object3D.DEFAULT_UP} (0, 1, 0), so that the light shines from the top down.\n     * @defaultValue `{@link Object3D.DEFAULT_UP}`\n     */\n    readonly position: Vector3;\n\n    /**\n     * The {@link SpotLight} points from its {@link SpotLight.position | position} to target.position.\n     * @remarks\n     * **Note**: For the target's position to be changed to anything other than the default,\n     * it must be added to the {@link Scene | scene} using\n     *\n     * ```typescript\n     * scene.add( light.target );\n     * ```\n     *\n     * This is so that the target's {@link Object3D.matrixWorld | matrixWorld} gets automatically updated each frame.\n     * It is also possible to set the target to be another object in the scene (anything with a {@link THREE.Object3D.position | position} property), like so:\n     * ```typescript\n     * const targetObject = new THREE.Object3D();\n     * scene.add(targetObject);\n     * light.target = targetObject;\n     * ```\n     * The {@link SpotLight} will now track the target object.\n     * @defaultValue `new THREE.Object3D()` _The default position of the target is *(0, 0, 0)*._\n     */\n    target: Object3D;\n\n    /**\n     * If set to `true` light will cast dynamic shadows.\n     * @remarks  **Warning**: This is expensive and requires tweaking to get shadows looking right. the {@link THREE.SpotLightShadow | SpotLightShadow} for details.\n     * @defaultValue `false`\n     */\n    override castShadow: boolean;\n\n    /**\n     * The light's intensity.\n     * @remarks Changing the intensity will also change the light's power.\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** — intensity is the luminous intensity of the light measured in candela (cd).\n     * @remarks Expects a `Float`\n     * @defaultValue `1`\n     */\n    intensity: number;\n\n    /**\n     * When **Default mode** — When distance is zero, light does not attenuate. When distance is non-zero,\n     * light will attenuate linearly from maximum intensity at the light's position down to zero at this distance from the light.\n     *\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** — When distance is zero,\n     * light will attenuate according to inverse-square law to infinite distance.\n     * When distance is non-zero, light will attenuate according to inverse-square law until near the distance cutoff,\n     * where it will then attenuate quickly and smoothly to `0`. Inherently, cutoffs are not physically correct.\n     * @remarks Expects a `Float`\n     * @defaultValue `0.0`\n     */\n    distance: number;\n\n    /**\n     * Maximum extent of the spotlight, in radians, from its direction.\n     * @remarks Should be no more than `Math.PI/2`.\n     * @remarks Expects a `Float`\n     * @defaultValue `Math.PI / 3`\n     */\n    angle: number;\n\n    /**\n     * The amount the light dims along the distance of the light.\n     * In context of physically-correct rendering the default value should not be changed.\n     * @remarks Expects a `Float`\n     * @defaultValue `2`\n     */\n    decay: number;\n\n    /**\n     * A {@link THREE.SpotLightShadow | SpotLightShadow} used to calculate shadows for this light.\n     * @defaultValue `new THREE.SpotLightShadow()`\n     */\n    shadow: SpotLightShadow;\n\n    /**\n     * The light's power.\n     * @remarks Changing the power will also change the light's intensity.\n     * When **{@link WebGLRenderer.useLegacyLights | legacy lighting mode} is disabled** —  power is the luminous power of the light measured in lumens (lm).\n     * @remarks Expects a `Float`\n     */\n    power: number;\n\n    /**\n     * Percent of the {@link SpotLight} cone that is attenuated due to penumbra.\n     * @remarks Takes values between zero and 1.\n     * @remarks Expects a `Float`\n     * @defaultValue `0.0`\n     */\n    penumbra: number;\n\n    /**\n     * A {@link THREE.Texture | Texture} used to modulate the color of the light.\n     * The spot light color is mixed with the _RGB_ value of this texture, with a ratio corresponding to its alpha value.\n     * The cookie-like masking effect is reproduced using pixel values (0, 0, 0, 1-cookie_value).\n     * @remarks **Warning**: {@link SpotLight.map} is disabled if {@link SpotLight.castShadow} is `false`.\n     */\n    map: Texture | null;\n}\n",
      "@types/three@~0/src/lights/SpotLightShadow.d.ts": "import { PerspectiveCamera } from \"../cameras/PerspectiveCamera.d.ts\";\nimport { LightShadow } from \"./LightShadow.d.ts\";\n\n/**\n * This is used internally by {@link SpotLight | SpotLights} for calculating shadows.\n * @example\n * ```typescript\n * //Create a WebGLRenderer and turn on shadows in the renderer\n * const renderer = new THREE.WebGLRenderer();\n * renderer.shadowMap.enabled = true;\n * renderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\n * //Create a SpotLight and turn on shadows for the light\n * const light = new THREE.SpotLight(0xffffff);\n * light.castShadow = true; // default false\n * scene.add(light);\n * //Set up shadow properties for the light\n * light.shadow.mapSize.width = 512; // default\n * light.shadow.mapSize.height = 512; // default\n * light.shadow.camera.near = 0.5; // default\n * light.shadow.camera.far = 500; // default\n * light.shadow.focus = 1; // default\n * //Create a sphere that cast shadows (but does not receive them)\n * const sphereGeometry = new THREE.SphereGeometry(5, 32, 32);\n * const sphereMaterial = new THREE.MeshStandardMaterial({\n *     color: 0xff0000\n * });\n * const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n * sphere.castShadow = true; //default is false\n * sphere.receiveShadow = false; //default\n * scene.add(sphere);\n * //Create a plane that receives shadows (but does not cast them)\n * const planeGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);\n * const planeMaterial = new THREE.MeshStandardMaterial({\n *     color: 0x00ff00\n * })\n * const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n * plane.receiveShadow = true;\n * scene.add(plane);\n * //Create a helper for the shadow camera (optional)\n * const helper = new THREE.CameraHelper(light.shadow.camera);\n * scene.add(helper);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/lights/shadows/SpotLightShadow | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/lights/SpotLightShadow.js | Source}\n */\nexport class SpotLightShadow extends LightShadow<PerspectiveCamera> {\n    /**\n     * Read-only flag to check if a given object is of type {@link SpotLightShadow}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSpotLightShadow: true;\n\n    /**\n     * The light's view of the world.\n     * @remarks This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow.\n     * @remarks\n     * The {@link THREE.PerspectiveCamera.fov | fov} will track the {@link THREE.SpotLight.angle | angle} property\n     * of the owning {@link SpotLight | SpotLight} via the {@link SpotLightShadow.update | update} method.\n     * Similarly, the {@link THREE.PerspectiveCamera.aspect | aspect} property will track the aspect of the {@link LightShadow.mapSize | mapSize}.\n     * If the {@link SpotLight.distance | distance} property of the light is set, the {@link THREE.PerspectiveCamera.far | far} clipping plane will track that, otherwise it defaults to `500`.\n     * @defaultValue is a {@link THREE.PerspectiveCamera | PerspectiveCamera} with {@link THREE.PerspectiveCamera.near | near} clipping plane at `0.5`.\n     */\n    camera: PerspectiveCamera;\n\n    /**\n     * Used to focus the shadow camera.\n     * @remarks The camera's field of view is set as a percentage of the spotlight's field-of-view. Range is `[0, 1]`. 0`.\n     * @defaultValue `1`\n     */\n    focus: number;\n}\n",
      "@types/three@~0/src/loaders/AnimationLoader.d.ts": "import { AnimationClip } from \"../animation/AnimationClip.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class AnimationLoader extends Loader<AnimationClip[]> {\n    constructor(manager?: LoadingManager);\n\n    parse(json: readonly unknown[]): AnimationClip[];\n}\n",
      "@types/three@~0/src/loaders/AudioLoader.d.ts": "import { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class AudioLoader extends Loader<AudioBuffer> {\n    constructor(manager?: LoadingManager);\n}\n",
      "@types/three@~0/src/loaders/BufferGeometryLoader.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { InstancedBufferGeometry } from \"../core/InstancedBufferGeometry.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class BufferGeometryLoader extends Loader<InstancedBufferGeometry | BufferGeometry> {\n    constructor(manager?: LoadingManager);\n\n    parse(json: unknown): InstancedBufferGeometry | BufferGeometry;\n}\n",
      "@types/three@~0/src/loaders/Cache.d.ts": "export namespace Cache {\n    /**\n     * @default false\n     */\n    let enabled: boolean;\n\n    /**\n     * @default {}\n     */\n    let files: any;\n\n    function add(key: string, file: any): void;\n    function get(key: string): any;\n    function remove(key: string): void;\n    function clear(): void;\n}\n",
      "@types/three@~0/src/loaders/CompressedTextureLoader.d.ts": "import { CompressedTexture } from \"../textures/CompressedTexture.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class CompressedTextureLoader extends Loader<CompressedTexture> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad?: (data: CompressedTexture) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): CompressedTexture;\n}\n",
      "@types/three@~0/src/loaders/CubeTextureLoader.d.ts": "import { CubeTexture } from \"../textures/CubeTexture.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class CubeTextureLoader extends Loader<CubeTexture, readonly string[]> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: readonly string[],\n        onLoad?: (data: CubeTexture) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): CubeTexture;\n}\n",
      "@types/three@~0/src/loaders/DataTextureLoader.d.ts": "import { DataTexture } from \"../textures/DataTexture.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class DataTextureLoader extends Loader<DataTexture> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad?: (data: DataTexture, texData: object) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): DataTexture;\n}\n",
      "@types/three@~0/src/loaders/FileLoader.d.ts": "import { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class FileLoader extends Loader<string | ArrayBuffer> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad?: (data: string | ArrayBuffer) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): void;\n\n    mimeType: undefined | MimeType;\n    responseType: undefined | string;\n\n    setMimeType(mimeType: MimeType): FileLoader;\n    setResponseType(responseType: string): FileLoader;\n}\n",
      "@types/three@~0/src/loaders/ImageBitmapLoader.d.ts": "import { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class ImageBitmapLoader extends Loader<ImageBitmap> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad?: (data: ImageBitmap) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): void;\n\n    /**\n     * @default { premultiplyAlpha: 'none' }\n     */\n    options: undefined | object;\n\n    readonly isImageBitmapLoader: true;\n\n    setOptions(options: object): ImageBitmapLoader;\n}\n",
      "@types/three@~0/src/loaders/ImageLoader.d.ts": "import { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\n/**\n * A loader for loading an image.\n * Unlike other loaders, this one emits events instead of using predefined callbacks. So if you're interested in getting notified when things happen, you need to add listeners to the object.\n */\nexport class ImageLoader extends Loader<HTMLImageElement> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad?: (data: HTMLImageElement) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): HTMLImageElement;\n}\n",
      "@types/three@~0/src/loaders/Loader.d.ts": "import { LoadingManager } from \"./LoadingManager.d.ts\";\n\n/**\n * Base class for implementing loaders.\n */\nexport class Loader<TData = unknown, TUrl = string> {\n    constructor(manager?: LoadingManager);\n\n    /**\n     * @default 'anonymous'\n     */\n    crossOrigin: string;\n\n    /**\n     * @default false\n     */\n    withCredentials: boolean;\n\n    /**\n     * @default ''\n     */\n    path: string;\n\n    /**\n     * @default ''\n     */\n    resourcePath: string;\n    manager: LoadingManager;\n\n    /**\n     * @default {}\n     */\n    requestHeader: { [header: string]: string };\n\n    load(\n        url: TUrl,\n        onLoad: (data: TData) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): void;\n    loadAsync(url: TUrl, onProgress?: (event: ProgressEvent) => void): Promise<TData>;\n\n    setCrossOrigin(crossOrigin: string): this;\n    setWithCredentials(value: boolean): this;\n    setPath(path: string): this;\n    setResourcePath(resourcePath: string): this;\n    setRequestHeader(requestHeader: { [header: string]: string }): this;\n\n    static DEFAULT_MATERIAL_NAME: string;\n}\n",
      "@types/three@~0/src/loaders/LoaderUtils.d.ts": "export interface LoaderUtils {\n    decodeText(array: BufferSource): string;\n    extractUrlBase(url: string): string;\n    resolveURL(url: string, path: string): string;\n}\n\nexport const LoaderUtils: LoaderUtils;\n",
      "@types/three@~0/src/loaders/LoadingManager.d.ts": "import { Loader } from \"./Loader.d.ts\";\n\nexport const DefaultLoadingManager: LoadingManager;\n\n/**\n * Handles and keeps track of loaded and pending data.\n */\nexport class LoadingManager {\n    constructor(\n        onLoad?: () => void,\n        onProgress?: (url: string, loaded: number, total: number) => void,\n        onError?: (url: string) => void,\n    );\n\n    /**\n     * Will be called when loading of an item starts.\n     * @param url The url of the item that started loading.\n     * @param loaded The number of items already loaded so far.\n     * @param total The total amount of items to be loaded.\n     */\n    onStart?: ((url: string, loaded: number, total: number) => void) | undefined;\n\n    /**\n     * Will be called when all items finish loading.\n     * The default is a function with empty body.\n     */\n    onLoad: () => void;\n\n    /**\n     * Will be called for each loaded item.\n     * The default is a function with empty body.\n     * @param url The url of the item just loaded.\n     * @param loaded The number of items already loaded so far.\n     * @param total The total amount of items to be loaded.\n     */\n    onProgress: (url: string, loaded: number, total: number) => void;\n\n    /**\n     * Will be called when item loading fails.\n     * The default is a function with empty body.\n     * @param url The url of the item that errored.\n     */\n    onError: (url: string) => void;\n\n    /**\n     * If provided, the callback will be passed each resource URL before a request is sent.\n     * The callback may return the original URL, or a new URL to override loading behavior.\n     * This behavior can be used to load assets from .ZIP files, drag-and-drop APIs, and Data URIs.\n     * @param callback URL modifier callback. Called with url argument, and must return resolvedURL.\n     */\n    setURLModifier(callback?: (url: string) => string): this;\n\n    /**\n     * Given a URL, uses the URL modifier callback (if any) and returns a resolved URL.\n     * If no URL modifier is set, returns the original URL.\n     * @param url the url to load\n     */\n    resolveURL(url: string): string;\n\n    itemStart(url: string): void;\n    itemEnd(url: string): void;\n    itemError(url: string): void;\n\n    // handlers\n\n    addHandler(regex: RegExp, loader: Loader): this;\n    removeHandler(regex: RegExp): this;\n    getHandler(file: string): Loader | null;\n}\n",
      "@types/three@~0/src/loaders/MaterialLoader.d.ts": "import { Material } from \"../materials/Material.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class MaterialLoader extends Loader<Material> {\n    /**\n     * @default {}\n     */\n    textures: { [key: string]: Texture };\n\n    constructor(manager?: LoadingManager);\n\n    parse(json: unknown): Material;\n\n    setTextures(textures: { [key: string]: Texture }): this;\n\n    static createMaterialFromType(type: string): Material;\n}\n",
      "@types/three@~0/src/loaders/ObjectLoader.d.ts": "import { AnimationClip } from \"../animation/AnimationClip.d.ts\";\nimport { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { InstancedBufferGeometry } from \"../core/InstancedBufferGeometry.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Source } from \"../textures/Source.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\nexport class ObjectLoader extends Loader<Object3D> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad?: (data: Object3D) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): void;\n\n    parse(json: unknown, onLoad?: (object: Object3D) => void): Object3D;\n    parseAsync(json: unknown): Promise<Object3D>;\n    parseGeometries(json: unknown): { [key: string]: InstancedBufferGeometry | BufferGeometry };\n    parseMaterials(json: unknown, textures: { [key: string]: Texture }): { [key: string]: Material };\n    parseAnimations(json: unknown): { [key: string]: AnimationClip };\n    parseImages(json: unknown, onLoad?: () => void): { [key: string]: Source };\n    parseImagesAsync(json: unknown): Promise<{ [key: string]: Source }>;\n    parseTextures(json: unknown, images: { [key: string]: Source }): { [key: string]: Texture };\n    parseObject(\n        data: unknown,\n        geometries: { [key: string]: InstancedBufferGeometry | BufferGeometry },\n        materials: { [key: string]: Material },\n        animations: { [key: string]: AnimationClip },\n    ): Object3D;\n}\n",
      "@types/three@~0/src/loaders/TextureLoader.d.ts": "import { Texture } from \"../textures/Texture.d.ts\";\nimport { Loader } from \"./Loader.d.ts\";\nimport { LoadingManager } from \"./LoadingManager.d.ts\";\n\n/**\n * Class for loading a texture.\n * Unlike other loaders, this one emits events instead of using predefined callbacks. So if you're interested in getting notified when things happen, you need to add listeners to the object.\n */\nexport class TextureLoader extends Loader<Texture> {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad?: (data: Texture) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (err: unknown) => void,\n    ): Texture;\n}\n",
      "@types/three@~0/src/materials/Materials.d.ts": "export * from \"./LineBasicMaterial.d.ts\";\nexport * from \"./LineDashedMaterial.d.ts\";\nexport * from \"./Material.d.ts\";\nexport * from \"./MeshBasicMaterial.d.ts\";\nexport * from \"./MeshDepthMaterial.d.ts\";\nexport * from \"./MeshDistanceMaterial.d.ts\";\nexport * from \"./MeshLambertMaterial.d.ts\";\nexport * from \"./MeshMatcapMaterial.d.ts\";\nexport * from \"./MeshNormalMaterial.d.ts\";\nexport * from \"./MeshPhongMaterial.d.ts\";\nexport * from \"./MeshPhysicalMaterial.d.ts\";\nexport * from \"./MeshStandardMaterial.d.ts\";\nexport * from \"./MeshToonMaterial.d.ts\";\nexport * from \"./PointsMaterial.d.ts\";\nexport * from \"./RawShaderMaterial.d.ts\";\nexport * from \"./ShaderMaterial.d.ts\";\nexport * from \"./ShadowMaterial.d.ts\";\nexport * from \"./SpriteMaterial.d.ts\";\n",
      "@types/three@~0/src/math/Box2.d.ts": "import { Vector2 } from \"./Vector2.d.ts\";\n\n// Math //////////////////////////////////////////////////////////////////////////////////\n\nexport class Box2 {\n    constructor(min?: Vector2, max?: Vector2);\n\n    /**\n     * @default new THREE.Vector2( + Infinity, + Infinity )\n     */\n    min: Vector2;\n\n    /**\n     * @default new THREE.Vector2( - Infinity, - Infinity )\n     */\n    max: Vector2;\n\n    set(min: Vector2, max: Vector2): Box2;\n    setFromPoints(points: Vector2[]): Box2;\n    setFromCenterAndSize(center: Vector2, size: Vector2): Box2;\n    clone(): this;\n    copy(box: Box2): this;\n    makeEmpty(): Box2;\n    isEmpty(): boolean;\n    getCenter(target: Vector2): Vector2;\n    getSize(target: Vector2): Vector2;\n    expandByPoint(point: Vector2): Box2;\n    expandByVector(vector: Vector2): Box2;\n    expandByScalar(scalar: number): Box2;\n    containsPoint(point: Vector2): boolean;\n    containsBox(box: Box2): boolean;\n    getParameter(point: Vector2, target: Vector2): Vector2;\n    intersectsBox(box: Box2): boolean;\n    clampPoint(point: Vector2, target: Vector2): Vector2;\n    distanceToPoint(point: Vector2): number;\n    intersect(box: Box2): Box2;\n    union(box: Box2): Box2;\n    translate(offset: Vector2): Box2;\n    equals(box: Box2): boolean;\n    /**\n     * @deprecated Use {@link Box2#isEmpty .isEmpty()} instead.\n     */\n    empty(): any;\n    /**\n     * @deprecated Use {@link Box2#intersectsBox .intersectsBox()} instead.\n     */\n    isIntersectionBox(b: any): any;\n}\n",
      "@types/three@~0/src/math/Box3.d.ts": "import { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Plane } from \"./Plane.d.ts\";\nimport { Sphere } from \"./Sphere.d.ts\";\nimport { Triangle } from \"./Triangle.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport class Box3 {\n    constructor(min?: Vector3, max?: Vector3);\n\n    /**\n     * @default new THREE.Vector3( + Infinity, + Infinity, + Infinity )\n     */\n    min: Vector3;\n\n    /**\n     * @default new THREE.Vector3( - Infinity, - Infinity, - Infinity )\n     */\n    max: Vector3;\n    readonly isBox3: true;\n\n    set(min: Vector3, max: Vector3): this;\n    setFromArray(array: ArrayLike<number>): this;\n    setFromBufferAttribute(bufferAttribute: BufferAttribute): this;\n    setFromPoints(points: Vector3[]): this;\n    setFromCenterAndSize(center: Vector3, size: Vector3): this;\n    setFromObject(object: Object3D, precise?: boolean): this;\n    clone(): this;\n    copy(box: Box3): this;\n    makeEmpty(): this;\n    isEmpty(): boolean;\n    getCenter(target: Vector3): Vector3;\n    getSize(target: Vector3): Vector3;\n    expandByPoint(point: Vector3): this;\n    expandByVector(vector: Vector3): this;\n    expandByScalar(scalar: number): this;\n    expandByObject(object: Object3D, precise?: boolean): this;\n    containsPoint(point: Vector3): boolean;\n    containsBox(box: Box3): boolean;\n    getParameter(point: Vector3, target: Vector3): Vector3;\n    intersectsBox(box: Box3): boolean;\n    intersectsSphere(sphere: Sphere): boolean;\n    intersectsPlane(plane: Plane): boolean;\n    intersectsTriangle(triangle: Triangle): boolean;\n    clampPoint(point: Vector3, target: Vector3): Vector3;\n    distanceToPoint(point: Vector3): number;\n    getBoundingSphere(target: Sphere): Sphere;\n    intersect(box: Box3): this;\n    union(box: Box3): this;\n    applyMatrix4(matrix: Matrix4): this;\n    translate(offset: Vector3): this;\n    equals(box: Box3): boolean;\n    /**\n     * @deprecated Use {@link Box3#isEmpty .isEmpty()} instead.\n     */\n    empty(): any;\n    /**\n     * @deprecated Use {@link Box3#intersectsBox .intersectsBox()} instead.\n     */\n    isIntersectionBox(b: any): any;\n    /**\n     * @deprecated Use {@link Box3#intersectsSphere .intersectsSphere()} instead.\n     */\n    isIntersectionSphere(s: any): any;\n}\n",
      "@types/three@~0/src/math/Color.d.ts": "import { ColorSpace } from \"../constants.d.ts\";\nimport { Matrix3 } from \"./Matrix3.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nimport { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"../core/InterleavedBufferAttribute.d.ts\";\n\nexport { SRGBToLinear } from \"./ColorManagement.d.ts\";\n\ndeclare const _colorKeywords: {\n    aliceblue: 0xf0f8ff;\n    antiquewhite: 0xfaebd7;\n    aqua: 0x00ffff;\n    aquamarine: 0x7fffd4;\n    azure: 0xf0ffff;\n    beige: 0xf5f5dc;\n    bisque: 0xffe4c4;\n    black: 0x000000;\n    blanchedalmond: 0xffebcd;\n    blue: 0x0000ff;\n    blueviolet: 0x8a2be2;\n    brown: 0xa52a2a;\n    burlywood: 0xdeb887;\n    cadetblue: 0x5f9ea0;\n    chartreuse: 0x7fff00;\n    chocolate: 0xd2691e;\n    coral: 0xff7f50;\n    cornflowerblue: 0x6495ed;\n    cornsilk: 0xfff8dc;\n    crimson: 0xdc143c;\n    cyan: 0x00ffff;\n    darkblue: 0x00008b;\n    darkcyan: 0x008b8b;\n    darkgoldenrod: 0xb8860b;\n    darkgray: 0xa9a9a9;\n    darkgreen: 0x006400;\n    darkgrey: 0xa9a9a9;\n    darkkhaki: 0xbdb76b;\n    darkmagenta: 0x8b008b;\n    darkolivegreen: 0x556b2f;\n    darkorange: 0xff8c00;\n    darkorchid: 0x9932cc;\n    darkred: 0x8b0000;\n    darksalmon: 0xe9967a;\n    darkseagreen: 0x8fbc8f;\n    darkslateblue: 0x483d8b;\n    darkslategray: 0x2f4f4f;\n    darkslategrey: 0x2f4f4f;\n    darkturquoise: 0x00ced1;\n    darkviolet: 0x9400d3;\n    deeppink: 0xff1493;\n    deepskyblue: 0x00bfff;\n    dimgray: 0x696969;\n    dimgrey: 0x696969;\n    dodgerblue: 0x1e90ff;\n    firebrick: 0xb22222;\n    floralwhite: 0xfffaf0;\n    forestgreen: 0x228b22;\n    fuchsia: 0xff00ff;\n    gainsboro: 0xdcdcdc;\n    ghostwhite: 0xf8f8ff;\n    gold: 0xffd700;\n    goldenrod: 0xdaa520;\n    gray: 0x808080;\n    green: 0x008000;\n    greenyellow: 0xadff2f;\n    grey: 0x808080;\n    honeydew: 0xf0fff0;\n    hotpink: 0xff69b4;\n    indianred: 0xcd5c5c;\n    indigo: 0x4b0082;\n    ivory: 0xfffff0;\n    khaki: 0xf0e68c;\n    lavender: 0xe6e6fa;\n    lavenderblush: 0xfff0f5;\n    lawngreen: 0x7cfc00;\n    lemonchiffon: 0xfffacd;\n    lightblue: 0xadd8e6;\n    lightcoral: 0xf08080;\n    lightcyan: 0xe0ffff;\n    lightgoldenrodyellow: 0xfafad2;\n    lightgray: 0xd3d3d3;\n    lightgreen: 0x90ee90;\n    lightgrey: 0xd3d3d3;\n    lightpink: 0xffb6c1;\n    lightsalmon: 0xffa07a;\n    lightseagreen: 0x20b2aa;\n    lightskyblue: 0x87cefa;\n    lightslategray: 0x778899;\n    lightslategrey: 0x778899;\n    lightsteelblue: 0xb0c4de;\n    lightyellow: 0xffffe0;\n    lime: 0x00ff00;\n    limegreen: 0x32cd32;\n    linen: 0xfaf0e6;\n    magenta: 0xff00ff;\n    maroon: 0x800000;\n    mediumaquamarine: 0x66cdaa;\n    mediumblue: 0x0000cd;\n    mediumorchid: 0xba55d3;\n    mediumpurple: 0x9370db;\n    mediumseagreen: 0x3cb371;\n    mediumslateblue: 0x7b68ee;\n    mediumspringgreen: 0x00fa9a;\n    mediumturquoise: 0x48d1cc;\n    mediumvioletred: 0xc71585;\n    midnightblue: 0x191970;\n    mintcream: 0xf5fffa;\n    mistyrose: 0xffe4e1;\n    moccasin: 0xffe4b5;\n    navajowhite: 0xffdead;\n    navy: 0x000080;\n    oldlace: 0xfdf5e6;\n    olive: 0x808000;\n    olivedrab: 0x6b8e23;\n    orange: 0xffa500;\n    orangered: 0xff4500;\n    orchid: 0xda70d6;\n    palegoldenrod: 0xeee8aa;\n    palegreen: 0x98fb98;\n    paleturquoise: 0xafeeee;\n    palevioletred: 0xdb7093;\n    papayawhip: 0xffefd5;\n    peachpuff: 0xffdab9;\n    peru: 0xcd853f;\n    pink: 0xffc0cb;\n    plum: 0xdda0dd;\n    powderblue: 0xb0e0e6;\n    purple: 0x800080;\n    rebeccapurple: 0x663399;\n    red: 0xff0000;\n    rosybrown: 0xbc8f8f;\n    royalblue: 0x4169e1;\n    saddlebrown: 0x8b4513;\n    salmon: 0xfa8072;\n    sandybrown: 0xf4a460;\n    seagreen: 0x2e8b57;\n    seashell: 0xfff5ee;\n    sienna: 0xa0522d;\n    silver: 0xc0c0c0;\n    skyblue: 0x87ceeb;\n    slateblue: 0x6a5acd;\n    slategray: 0x708090;\n    slategrey: 0x708090;\n    snow: 0xfffafa;\n    springgreen: 0x00ff7f;\n    steelblue: 0x4682b4;\n    tan: 0xd2b48c;\n    teal: 0x008080;\n    thistle: 0xd8bfd8;\n    tomato: 0xff6347;\n    turquoise: 0x40e0d0;\n    violet: 0xee82ee;\n    wheat: 0xf5deb3;\n    white: 0xffffff;\n    whitesmoke: 0xf5f5f5;\n    yellow: 0xffff00;\n    yellowgreen: 0x9acd32;\n};\n\nexport type ColorRepresentation = Color | string | number;\n\nexport interface HSL {\n    h: number;\n    s: number;\n    l: number;\n}\n\nexport interface RGB {\n    r: number;\n    g: number;\n    b: number;\n}\n\n/**\n * Represents a color. See also {@link ColorUtils}.\n *\n * see {@link https://github.com/mrdoob/three.js/blob/master/src/math/Color.js|src/math/Color.js}\n *\n * @example\n * const color = new THREE.Color( 0xff0000 );\n */\nexport class Color {\n    constructor(color?: ColorRepresentation);\n    constructor(r: number, g: number, b: number);\n\n    readonly isColor: true;\n\n    /**\n     * Red channel value between 0 and 1. Default is 1.\n     * @default 1\n     */\n    r: number;\n\n    /**\n     * Green channel value between 0 and 1. Default is 1.\n     * @default 1\n     */\n    g: number;\n\n    /**\n     * Blue channel value between 0 and 1. Default is 1.\n     * @default 1\n     */\n    b: number;\n\n    set(...args: [color: ColorRepresentation] | [r: number, g: number, b: number]): this;\n\n    /**\n     * Sets this color's {@link r}, {@link g} and {@link b} components from the x, y, and z components of the specified\n     * {@link Vector3 | vector}.\n     */\n    setFromVector3(vector: Vector3): this;\n\n    setScalar(scalar: number): Color;\n    setHex(hex: number, colorSpace?: ColorSpace): Color;\n\n    /**\n     * Sets this color from RGB values.\n     * @param r Red channel value between 0 and 1.\n     * @param g Green channel value between 0 and 1.\n     * @param b Blue channel value between 0 and 1.\n     */\n    setRGB(r: number, g: number, b: number, colorSpace?: ColorSpace): Color;\n\n    /**\n     * Sets this color from HSL values.\n     * Based on MochiKit implementation by Bob Ippolito.\n     *\n     * @param h Hue channel value between 0 and 1.\n     * @param s Saturation value channel between 0 and 1.\n     * @param l Value channel value between 0 and 1.\n     */\n    setHSL(h: number, s: number, l: number, colorSpace?: ColorSpace): Color;\n\n    /**\n     * Sets this color from a CSS context style string.\n     * @param contextStyle Color in CSS context style format.\n     */\n    setStyle(style: string, colorSpace?: ColorSpace): Color;\n\n    /**\n     * Sets this color from a color name.\n     * Faster than {@link Color#setStyle .setStyle()} method if you don't need the other CSS-style formats.\n     * @param style Color name in X11 format.\n     */\n    setColorName(style: string, colorSpace?: ColorSpace): Color;\n\n    /**\n     * Clones this color.\n     */\n    clone(): this;\n\n    /**\n     * Copies given color.\n     * @param color Color to copy.\n     */\n    copy(color: this): this;\n\n    /**\n     * Copies given color making conversion from sRGB to linear space.\n     * @param color Color to copy.\n     */\n    copySRGBToLinear(color: Color): Color;\n\n    /**\n     * Copies given color making conversion from linear to sRGB space.\n     * @param color Color to copy.\n     */\n    copyLinearToSRGB(color: Color): Color;\n\n    /**\n     * Converts this color from sRGB to linear space.\n     */\n    convertSRGBToLinear(): Color;\n\n    /**\n     * Converts this color from linear to sRGB space.\n     */\n    convertLinearToSRGB(): Color;\n\n    /**\n     * Returns the hexadecimal value of this color.\n     */\n    getHex(colorSpace?: ColorSpace): number;\n\n    /**\n     * Returns the string formated hexadecimal value of this color.\n     */\n    getHexString(colorSpace?: ColorSpace): string;\n\n    getHSL(target: HSL, colorSpace?: ColorSpace): HSL;\n\n    getRGB(target: RGB, colorSpace?: ColorSpace): RGB;\n\n    /**\n     * Returns the value of this color in CSS context style.\n     * Example: rgb(r, g, b)\n     */\n    getStyle(colorSpace?: ColorSpace): string;\n\n    offsetHSL(h: number, s: number, l: number): this;\n\n    add(color: Color): this;\n    addColors(color1: Color, color2: Color): this;\n    addScalar(s: number): this;\n\n    /**\n     * Applies the transform {@link Matrix3 | m} to this color's RGB components.\n     */\n    applyMatrix3(m: Matrix3): this;\n\n    sub(color: Color): this;\n    multiply(color: Color): this;\n    multiplyScalar(s: number): this;\n    lerp(color: Color, alpha: number): this;\n    lerpColors(color1: Color, color2: Color, alpha: number): this;\n    lerpHSL(color: Color, alpha: number): this;\n    equals(color: Color): boolean;\n\n    /**\n     * Sets this color's red, green and blue value from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array-like. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;\n\n    /**\n     * Returns an array [red, green, blue], or copies red, green and blue into the provided array.\n     * @param array (optional) array to store the color to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n\n    /**\n     * Copies red, green and blue into the provided array-like.\n     * @param array array-like to store the color to.\n     * @param offset (optional) optional offset into the array-like.\n     * @return The provided array-like.\n     */\n    toArray(xyz: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    /**\n     * This method defines the serialization result of Color.\n     * @return The color as a hexadecimal value.\n     */\n    toJSON(): number;\n\n    fromBufferAttribute(attribute: BufferAttribute | InterleavedBufferAttribute, index: number): this;\n\n    [Symbol.iterator](): Generator<number, void>;\n\n    /**\n     * List of X11 color names.\n     */\n    static NAMES: typeof _colorKeywords;\n}\n",
      "@types/three@~0/src/math/ColorManagement.d.ts": "import {\n    ColorSpace,\n    ColorSpacePrimaries,\n    ColorSpaceTransfer,\n    DisplayP3ColorSpace,\n    LinearDisplayP3ColorSpace,\n    LinearSRGBColorSpace,\n    SRGBColorSpace,\n} from \"../constants.d.ts\";\nimport { Color } from \"./Color.d.ts\";\n\nexport type WorkingColorSpace = typeof LinearSRGBColorSpace | typeof LinearDisplayP3ColorSpace;\nexport type DefinedColorSpace =\n    | typeof LinearSRGBColorSpace\n    | typeof SRGBColorSpace\n    | typeof LinearDisplayP3ColorSpace\n    | typeof DisplayP3ColorSpace;\n\nexport interface ColorManagement {\n    /**\n     * @default false\n     */\n    enabled: boolean;\n\n    /**\n     * @default LinearSRGBColorSpace\n     */\n    get workingColorSpace(): WorkingColorSpace;\n    set workingColorSpace(colorSpace: WorkingColorSpace);\n\n    convert: (color: Color, sourceColorSpace: DefinedColorSpace, targetColorSpace: DefinedColorSpace) => Color;\n\n    fromWorkingColorSpace: (color: Color, targetColorSpace: DefinedColorSpace) => Color;\n\n    toWorkingColorSpace: (color: Color, sourceColorSpace: DefinedColorSpace) => Color;\n\n    getPrimaries: (colorSpace: DefinedColorSpace) => ColorSpacePrimaries;\n\n    getTransfer: (colorSpace: ColorSpace) => ColorSpaceTransfer;\n}\n\nexport const ColorManagement: ColorManagement;\n\nexport function SRGBToLinear(c: number): number;\n\nexport function LinearToSRGB(c: number): number;\n",
      "@types/three@~0/src/math/Cylindrical.d.ts": "import { Vector3 } from \"./Vector3.d.ts\";\n\nexport class Cylindrical {\n    constructor(radius?: number, theta?: number, y?: number);\n\n    /**\n     * @default 1\n     */\n    radius: number;\n\n    /**\n     * @default 0\n     */\n    theta: number;\n\n    /**\n     * @default 0\n     */\n    y: number;\n\n    clone(): this;\n    copy(other: Cylindrical): this;\n    set(radius: number, theta: number, y: number): this;\n    setFromVector3(vec3: Vector3): this;\n    setFromCartesianCoords(x: number, y: number, z: number): this;\n}\n",
      "@types/three@~0/src/math/Euler.d.ts": "import { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Quaternion } from \"./Quaternion.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport type EulerOrder = \"XYZ\" | \"YXZ\" | \"ZXY\" | \"ZYX\" | \"YZX\" | \"XZY\";\n\nexport class Euler {\n    constructor(x?: number, y?: number, z?: number, order?: EulerOrder);\n\n    /**\n     * @default 0\n     */\n    x: number;\n\n    /**\n     * @default 0\n     */\n    y: number;\n\n    /**\n     * @default 0\n     */\n    z: number;\n\n    /**\n     * @default THREE.Euler.DEFAULT_ORDER\n     */\n    order: EulerOrder;\n    readonly isEuler: true;\n\n    _onChangeCallback: () => void;\n\n    set(x: number, y: number, z: number, order?: EulerOrder): Euler;\n    clone(): this;\n    copy(euler: Euler): this;\n    setFromRotationMatrix(m: Matrix4, order?: EulerOrder, update?: boolean): Euler;\n    setFromQuaternion(q: Quaternion, order?: EulerOrder, update?: boolean): Euler;\n    setFromVector3(v: Vector3, order?: EulerOrder): Euler;\n    reorder(newOrder: EulerOrder): Euler;\n    equals(euler: Euler): boolean;\n    fromArray(xyzo: [number, number, number, EulerOrder?, ...any[]]): Euler;\n    toArray(array?: Array<number | string | undefined>, offset?: number): Array<number | string | undefined>;\n    _onChange(callback: () => void): this;\n\n    static DEFAULT_ORDER: \"XYZ\";\n\n    [Symbol.iterator](): Generator<string | number, void>;\n}\n",
      "@types/three@~0/src/math/Frustum.d.ts": "import { CoordinateSystem } from \"../constants.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { Sprite } from \"../objects/Sprite.d.ts\";\nimport { Box3 } from \"./Box3.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Plane } from \"./Plane.d.ts\";\nimport { Sphere } from \"./Sphere.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\n/**\n * Frustums are used to determine what is inside the camera's field of view. They help speed up the rendering process.\n */\nexport class Frustum {\n    constructor(p0?: Plane, p1?: Plane, p2?: Plane, p3?: Plane, p4?: Plane, p5?: Plane);\n\n    /**\n     * Array of 6 vectors.\n     */\n    planes: Plane[];\n\n    set(p0: Plane, p1: Plane, p2: Plane, p3: Plane, p4: Plane, p5: Plane): Frustum;\n    clone(): this;\n    copy(frustum: Frustum): this;\n    setFromProjectionMatrix(m: Matrix4, coordinateSystem?: CoordinateSystem): this;\n    intersectsObject(object: Object3D): boolean;\n    intersectsSprite(sprite: Sprite): boolean;\n    intersectsSphere(sphere: Sphere): boolean;\n    intersectsBox(box: Box3): boolean;\n    containsPoint(point: Vector3): boolean;\n}\n",
      "@types/three@~0/src/math/Interpolant.d.ts": "export abstract class Interpolant {\n    constructor(parameterPositions: any, sampleValues: any, sampleSize: number, resultBuffer?: any);\n\n    parameterPositions: any;\n    sampleValues: any;\n    valueSize: number;\n    resultBuffer: any;\n\n    evaluate(time: number): any;\n}\n",
      "@types/three@~0/src/math/interpolants/CubicInterpolant.d.ts": "import { Interpolant } from \"../Interpolant.d.ts\";\n\nexport class CubicInterpolant extends Interpolant {\n    constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer?: any);\n\n    interpolate_(i1: number, t0: number, t: number, t1: number): any;\n}\n",
      "@types/three@~0/src/math/interpolants/DiscreteInterpolant.d.ts": "import { Interpolant } from \"../Interpolant.d.ts\";\n\nexport class DiscreteInterpolant extends Interpolant {\n    constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer?: any);\n\n    interpolate_(i1: number, t0: number, t: number, t1: number): any;\n}\n",
      "@types/three@~0/src/math/interpolants/LinearInterpolant.d.ts": "import { Interpolant } from \"../Interpolant.d.ts\";\n\nexport class LinearInterpolant extends Interpolant {\n    constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer?: any);\n\n    interpolate_(i1: number, t0: number, t: number, t1: number): any;\n}\n",
      "@types/three@~0/src/math/interpolants/QuaternionLinearInterpolant.d.ts": "import { Interpolant } from \"../Interpolant.d.ts\";\n\nexport class QuaternionLinearInterpolant extends Interpolant {\n    constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer?: any);\n\n    interpolate_(i1: number, t0: number, t: number, t1: number): any;\n}\n",
      "@types/three@~0/src/math/Line3.d.ts": "import { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport class Line3 {\n    constructor(start?: Vector3, end?: Vector3);\n\n    /**\n     * @default new THREE.Vector3()\n     */\n    start: Vector3;\n\n    /**\n     * @default new THREE.Vector3()\n     */\n    end: Vector3;\n\n    set(start?: Vector3, end?: Vector3): Line3;\n    clone(): this;\n    copy(line: Line3): this;\n    getCenter(target: Vector3): Vector3;\n    delta(target: Vector3): Vector3;\n    distanceSq(): number;\n    distance(): number;\n    at(t: number, target: Vector3): Vector3;\n    closestPointToPointParameter(point: Vector3, clampToLine?: boolean): number;\n    closestPointToPoint(point: Vector3, clampToLine: boolean, target: Vector3): Vector3;\n    applyMatrix4(matrix: Matrix4): Line3;\n    equals(line: Line3): boolean;\n}\n",
      "@types/three@~0/src/math/Matrix3.d.ts": "// https://threejs.org/docs/#api/en/math/Matrix3\n\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Vector2 } from \"./Vector2.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport type Matrix3Tuple = [number, number, number, number, number, number, number, number, number];\n\n/**\n * ( interface Matrix<T> )\n */\nexport interface Matrix {\n    /**\n     * Array with matrix values.\n     */\n    elements: number[];\n\n    /**\n     * identity():T;\n     */\n    identity(): Matrix;\n\n    /**\n     * copy(m:T):T;\n     */\n    copy(m: this): this;\n\n    /**\n     * multiplyScalar(s:number):T;\n     */\n    multiplyScalar(s: number): Matrix;\n\n    determinant(): number;\n\n    /**\n     * transpose():T;\n     */\n    transpose(): Matrix;\n\n    /**\n     * invert():T;\n     */\n    invert(): Matrix;\n\n    /**\n     * clone():T;\n     */\n    clone(): Matrix;\n}\n\n/**\n * ( class Matrix3 implements Matrix<Matrix3> )\n */\nexport class Matrix3 implements Matrix {\n    /**\n     * Creates an identity matrix.\n     */\n    constructor();\n    /**\n     * Creates a 3x3 matrix with the given arguments in row-major order.\n     */\n    constructor(\n        n11: number,\n        n12: number,\n        n13: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n31: number,\n        n32: number,\n        n33: number,\n    );\n\n    /**\n     * Array with matrix values.\n     * @default [1, 0, 0, 0, 1, 0, 0, 0, 1]\n     */\n    elements: number[];\n\n    set(\n        n11: number,\n        n12: number,\n        n13: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n31: number,\n        n32: number,\n        n33: number,\n    ): Matrix3;\n    identity(): Matrix3;\n    clone(): this;\n    copy(m: Matrix3): this;\n    extractBasis(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3): Matrix3;\n    setFromMatrix4(m: Matrix4): Matrix3;\n    multiplyScalar(s: number): Matrix3;\n    determinant(): number;\n\n    /**\n     * Inverts this matrix in place.\n     */\n    invert(): Matrix3;\n\n    /**\n     * Transposes this matrix in place.\n     */\n    transpose(): Matrix3;\n    getNormalMatrix(matrix4: Matrix4): Matrix3;\n\n    /**\n     * Transposes this matrix into the supplied array r, and returns itself.\n     */\n    transposeIntoArray(r: number[]): Matrix3;\n\n    setUvTransform(tx: number, ty: number, sx: number, sy: number, rotation: number, cx: number, cy: number): Matrix3;\n\n    scale(sx: number, sy: number): Matrix3;\n\n    /**\n     * Sets this matrix as a 2D translation transform:\n     *\n     * ```\n     * 1, 0, x,\n     * 0, 1, y,\n     * 0, 0, 1\n     * ```\n     *\n     * @param x the amount to translate in the X axis.\n     * @param y the amount to translate in the Y axis.\n     */\n    makeTranslation(v: Vector2): this;\n    makeTranslation(x: number, y: number): this;\n\n    /**\n     * Sets this matrix as a 2D rotational transformation by theta radians. The resulting matrix will be:\n     *\n     * ```\n     * cos(θ) -sin(θ) 0\n     * sin(θ) cos(θ)  0\n     * 0      0       1\n     * ```\n     *\n     * @param theta Rotation angle in radians. Positive values rotate counterclockwise.\n     */\n    makeRotation(theta: number): this;\n    makeRotation(theta: number): Matrix3;\n\n    /**\n     * Sets this matrix as a 2D scale transform:\n     *\n     * ```\n     * x, 0, 0,\n     * 0, y, 0,\n     * 0, 0, 1\n     * ```\n     *\n     * @param x the amount to scale in the X axis.\n     * @param y the amount to scale in the Y axis.\n     */\n    makeScale(x: number, y: number): this;\n    makeScale(x: number, y: number): Matrix3;\n\n    rotate(theta: number): Matrix3;\n\n    translate(tx: number, ty: number): Matrix3;\n\n    equals(matrix: Matrix3): boolean;\n\n    /**\n     * Sets the values of this matrix from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array-like. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): Matrix3;\n\n    /**\n     * Returns an array with the values of this matrix, or copies them into the provided array.\n     * @param array (optional) array to store the matrix to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n    toArray(array?: Matrix3Tuple, offset?: 0): Matrix3Tuple;\n\n    /**\n     * Copies he values of this matrix into the provided array-like.\n     * @param array array-like to store the matrix to.\n     * @param offset (optional) optional offset into the array-like.\n     * @return The provided array-like.\n     */\n    toArray(array?: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    /**\n     * Multiplies this matrix by m.\n     */\n    multiply(m: Matrix3): Matrix3;\n\n    premultiply(m: Matrix3): Matrix3;\n\n    /**\n     * Sets this matrix to a x b.\n     */\n    multiplyMatrices(a: Matrix3, b: Matrix3): Matrix3;\n\n    /**\n     * @deprecated Use {@link Vector3.applyMatrix3 vector.applyMatrix3( matrix )} instead.\n     */\n    multiplyVector3(vector: Vector3): any;\n\n    /**\n     * @deprecated This method has been removed completely.\n     */\n    multiplyVector3Array(a: any): any;\n\n    /**\n     * @deprecated Use {@link Matrix3#invert .invert()} instead.\n     */\n    getInverse(matrix: Matrix4, throwOnDegenerate?: boolean): Matrix3;\n    getInverse(matrix: Matrix): Matrix;\n\n    /**\n     * @deprecated Use {@link Matrix3#toArray .toArray()} instead.\n     */\n    flattenToArrayOffset(array: number[], offset: number): number[];\n}\n",
      "@types/three@~0/src/math/Matrix4.d.ts": "import { CoordinateSystem } from \"../constants.d.ts\";\nimport { Euler } from \"./Euler.d.ts\";\nimport { Matrix, Matrix3 } from \"./Matrix3.d.ts\";\nimport { Quaternion } from \"./Quaternion.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport type Matrix4Tuple = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n];\n\n/**\n * A 4x4 Matrix.\n *\n * @example\n * // Simple rig for rotating around 3 axes\n * const m = new THREE.Matrix4();\n * const m1 = new THREE.Matrix4();\n * const m2 = new THREE.Matrix4();\n * const m3 = new THREE.Matrix4();\n * const alpha = 0;\n * const beta = Math.PI;\n * const gamma = Math.PI/2;\n * m1.makeRotationX( alpha );\n * m2.makeRotationY( beta );\n * m3.makeRotationZ( gamma );\n * m.multiplyMatrices( m1, m2 );\n * m.multiply( m3 );\n */\nexport class Matrix4 implements Matrix {\n    /**\n     * Creates an identity matrix.\n     */\n    constructor();\n    /**\n     * Creates a 4x4 matrix with the given arguments in row-major order.\n     */\n    constructor(\n        n11: number,\n        n12: number,\n        n13: number,\n        n14: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n24: number,\n        n31: number,\n        n32: number,\n        n33: number,\n        n34: number,\n        n41: number,\n        n42: number,\n        n43: number,\n        n44: number,\n    );\n\n    /**\n     * Array with matrix values.\n     * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     */\n    elements: number[];\n\n    /**\n     * Sets all fields of this matrix.\n     */\n    set(\n        n11: number,\n        n12: number,\n        n13: number,\n        n14: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n24: number,\n        n31: number,\n        n32: number,\n        n33: number,\n        n34: number,\n        n41: number,\n        n42: number,\n        n43: number,\n        n44: number,\n    ): this;\n\n    /**\n     * Resets this matrix to identity.\n     */\n    identity(): this;\n    clone(): Matrix4;\n    copy(m: Matrix4): this;\n    copyPosition(m: Matrix4): this;\n    extractBasis(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3): this;\n    makeBasis(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3): this;\n\n    /**\n     * Copies the rotation component of the supplied matrix m into this matrix rotation component.\n     */\n    extractRotation(m: Matrix4): this;\n    makeRotationFromEuler(euler: Euler): this;\n    makeRotationFromQuaternion(q: Quaternion): this;\n    /**\n     * Constructs a rotation matrix, looking from eye towards center with defined up vector.\n     */\n    lookAt(eye: Vector3, target: Vector3, up: Vector3): this;\n\n    /**\n     * Multiplies this matrix by m.\n     */\n    multiply(m: Matrix4): this;\n\n    premultiply(m: Matrix4): this;\n\n    /**\n     * Sets this matrix to a x b.\n     */\n    multiplyMatrices(a: Matrix4, b: Matrix4): this;\n\n    /**\n     * Sets this matrix to a x b and stores the result into the flat array r.\n     * r can be either a regular Array or a TypedArray.\n     *\n     * @deprecated This method has been removed completely.\n     */\n    multiplyToArray(a: Matrix4, b: Matrix4, r: number[]): Matrix4;\n\n    /**\n     * Multiplies this matrix by s.\n     */\n    multiplyScalar(s: number): this;\n\n    /**\n     * Computes determinant of this matrix.\n     * Based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     */\n    determinant(): number;\n\n    /**\n     * Transposes this matrix.\n     */\n    transpose(): this;\n\n    /**\n     * Sets the position component for this matrix from vector v.\n     */\n    setPosition(v: Vector3): this;\n    setPosition(x: number, y: number, z: number): this;\n\n    /**\n     * Inverts this matrix.\n     */\n    invert(): this;\n\n    /**\n     * Multiplies the columns of this matrix by vector v.\n     */\n    scale(v: Vector3): this;\n\n    getMaxScaleOnAxis(): number;\n    /**\n     * Sets this matrix as translation transform.\n     */\n    makeTranslation(v: Vector3): this;\n    makeTranslation(x: number, y: number, z: number): this;\n\n    /**\n     * Sets this matrix as rotation transform around x axis by theta radians.\n     *\n     * @param theta Rotation angle in radians.\n     */\n    makeRotationX(theta: number): this;\n\n    /**\n     * Sets this matrix as rotation transform around y axis by theta radians.\n     *\n     * @param theta Rotation angle in radians.\n     */\n    makeRotationY(theta: number): this;\n\n    /**\n     * Sets this matrix as rotation transform around z axis by theta radians.\n     *\n     * @param theta Rotation angle in radians.\n     */\n    makeRotationZ(theta: number): this;\n\n    /**\n     * Sets this matrix as rotation transform around axis by angle radians.\n     * Based on http://www.gamedev.net/reference/articles/article1199.asp.\n     *\n     * @param axis Rotation axis.\n     * @param theta Rotation angle in radians.\n     */\n    makeRotationAxis(axis: Vector3, angle: number): this;\n\n    /**\n     * Sets this matrix as scale transform.\n     */\n    makeScale(x: number, y: number, z: number): this;\n\n    /**\n     * Sets this matrix as shear transform.\n     */\n    makeShear(xy: number, xz: number, yx: number, yz: number, zx: number, zy: number): this;\n\n    /**\n     * Sets this matrix to the transformation composed of translation, rotation and scale.\n     */\n    compose(translation: Vector3, rotation: Quaternion, scale: Vector3): this;\n\n    /**\n     * Decomposes this matrix into it's position, quaternion and scale components.\n     */\n    decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): this;\n\n    /**\n     * Creates a perspective projection matrix.\n     */\n    makePerspective(\n        left: number,\n        right: number,\n        top: number,\n        bottom: number,\n        near: number,\n        far: number,\n        coordinateSystem?: CoordinateSystem,\n    ): this;\n\n    /**\n     * Creates an orthographic projection matrix.\n     */\n    makeOrthographic(\n        left: number,\n        right: number,\n        top: number,\n        bottom: number,\n        near: number,\n        far: number,\n        coordinateSystem?: CoordinateSystem,\n    ): this;\n    equals(matrix: Matrix4): boolean;\n\n    /**\n     * Sets the values of this matrix from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array-like. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;\n\n    /**\n     * Returns an array with the values of this matrix, or copies them into the provided array.\n     * @param array (optional) array to store the matrix to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n    toArray(array?: Matrix4Tuple, offset?: 0): Matrix4Tuple;\n\n    /**\n     * Copies he values of this matrix into the provided array-like.\n     * @param array array-like to store the matrix to.\n     * @param offset (optional) optional offset into the array-like.\n     * @return The provided array-like.\n     */\n    toArray(array?: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    /**\n     * Set the upper 3x3 elements of this matrix to the values of the Matrix3 m.\n     */\n    setFromMatrix3(m: Matrix3): this;\n\n    /**\n     * @deprecated Use {@link Matrix4#copyPosition .copyPosition()} instead.\n     */\n    extractPosition(m: Matrix4): Matrix4;\n\n    /**\n     * @deprecated Use {@link Matrix4#makeRotationFromQuaternion .makeRotationFromQuaternion()} instead.\n     */\n    setRotationFromQuaternion(q: Quaternion): Matrix4;\n\n    /**\n     * @deprecated Use {@link Vector3#applyMatrix4 vector.applyMatrix4( matrix )} instead.\n     */\n    multiplyVector3(v: any): any;\n\n    /**\n     * @deprecated Use {@link Vector4#applyMatrix4 vector.applyMatrix4( matrix )} instead.\n     */\n    multiplyVector4(v: any): any;\n\n    /**\n     * @deprecated This method has been removed completely.\n     */\n    multiplyVector3Array(array: number[]): number[];\n\n    /**\n     * @deprecated Use {@link Vector3#transformDirection Vector3.transformDirection( matrix )} instead.\n     */\n    rotateAxis(v: any): void;\n\n    /**\n     * @deprecated Use {@link Vector3#applyMatrix4 vector.applyMatrix4( matrix )} instead.\n     */\n    crossVector(v: any): void;\n\n    /**\n     * @deprecated Use {@link Matrix4#toArray .toArray()} instead.\n     */\n    flattenToArrayOffset(array: number[], offset: number): number[];\n\n    /**\n     * @deprecated Use {@link Matrix4#invert .invert()} instead.\n     */\n    getInverse(matrix: Matrix): Matrix;\n}\n",
      "@types/three@~0/src/math/Plane.d.ts": "import { Box3 } from \"./Box3.d.ts\";\nimport { Line3 } from \"./Line3.d.ts\";\nimport { Matrix3 } from \"./Matrix3.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Sphere } from \"./Sphere.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport class Plane {\n    constructor(normal?: Vector3, constant?: number);\n\n    /**\n     * @default new THREE.Vector3( 1, 0, 0 )\n     */\n    normal: Vector3;\n\n    /**\n     * @default 0\n     */\n    constant: number;\n\n    readonly isPlane: true;\n\n    set(normal: Vector3, constant: number): Plane;\n    setComponents(x: number, y: number, z: number, w: number): Plane;\n    setFromNormalAndCoplanarPoint(normal: Vector3, point: Vector3): Plane;\n    setFromCoplanarPoints(a: Vector3, b: Vector3, c: Vector3): Plane;\n    clone(): this;\n    copy(plane: Plane): this;\n    normalize(): Plane;\n    negate(): Plane;\n    distanceToPoint(point: Vector3): number;\n    distanceToSphere(sphere: Sphere): number;\n    projectPoint(point: Vector3, target: Vector3): Vector3;\n    intersectLine(line: Line3, target: Vector3): Vector3 | null;\n    intersectsLine(line: Line3): boolean;\n    intersectsBox(box: Box3): boolean;\n    intersectsSphere(sphere: Sphere): boolean;\n    coplanarPoint(target: Vector3): Vector3;\n    applyMatrix4(matrix: Matrix4, optionalNormalMatrix?: Matrix3): Plane;\n    translate(offset: Vector3): Plane;\n    equals(plane: Plane): boolean;\n\n    /**\n     * @deprecated Use {@link Plane#intersectsLine .intersectsLine()} instead.\n     */\n    isIntersectionLine(l: any): any;\n}\n",
      "@types/three@~0/src/math/Quaternion.d.ts": "import { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"../core/InterleavedBufferAttribute.d.ts\";\nimport { Euler } from \"./Euler.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Vector3, Vector3Like } from \"./Vector3.d.ts\";\n\nexport interface QuaternionLike {\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    readonly w: number;\n}\n\n/**\n * Implementation of a quaternion. This is used for rotating things without incurring in the dreaded gimbal lock issue, amongst other advantages.\n *\n * @example\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n */\nexport class Quaternion {\n    /**\n     * @param x x coordinate\n     * @param y y coordinate\n     * @param z z coordinate\n     * @param w w coordinate\n     */\n    constructor(x?: number, y?: number, z?: number, w?: number);\n\n    /**\n     * @default 0\n     */\n    x: number;\n\n    /**\n     * @default 0\n     */\n    y: number;\n\n    /**\n     * @default 0\n     */\n    z: number;\n\n    /**\n     * @default 1\n     */\n    w: number;\n    readonly isQuaternion: true;\n\n    /**\n     * Sets values of this quaternion.\n     */\n    set(x: number, y: number, z: number, w: number): this;\n\n    /**\n     * Clones this quaternion.\n     */\n    clone(): this;\n\n    /**\n     * Copies values of q to this quaternion.\n     */\n    copy(q: QuaternionLike): this;\n\n    /**\n     * Sets this quaternion from rotation specified by Euler angles.\n     */\n    setFromEuler(euler: Euler, update?: boolean): this;\n\n    /**\n     * Sets this quaternion from rotation specified by axis and angle.\n     * Adapted from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm.\n     * Axis have to be normalized, angle is in radians.\n     */\n    setFromAxisAngle(axis: Vector3Like, angle: number): this;\n\n    /**\n     * Sets this quaternion from rotation component of m. Adapted from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm.\n     */\n    setFromRotationMatrix(m: Matrix4): this;\n    setFromUnitVectors(vFrom: Vector3, vTo: Vector3Like): this;\n    angleTo(q: Quaternion): number;\n    rotateTowards(q: Quaternion, step: number): this;\n\n    identity(): this;\n\n    /**\n     * Inverts this quaternion.\n     */\n    invert(): this;\n\n    conjugate(): this;\n    dot(v: Quaternion): number;\n    lengthSq(): number;\n\n    /**\n     * Computes length of this quaternion.\n     */\n    length(): number;\n\n    /**\n     * Normalizes this quaternion.\n     */\n    normalize(): this;\n\n    /**\n     * Multiplies this quaternion by b.\n     */\n    multiply(q: Quaternion): this;\n    premultiply(q: Quaternion): this;\n\n    /**\n     * Sets this quaternion to a x b\n     * Adapted from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm.\n     */\n    multiplyQuaternions(a: Quaternion, b: Quaternion): this;\n\n    slerp(qb: Quaternion, t: number): this;\n    slerpQuaternions(qa: Quaternion, qb: Quaternion, t: number): this;\n    equals(v: Quaternion): boolean;\n\n    /**\n     * Sets this quaternion's x, y, z and w value from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;\n\n    /**\n     * Returns an array [x, y, z, w], or copies x, y, z and w into the provided array.\n     * @param array (optional) array to store the quaternion to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n\n    /**\n     * Copies x, y, z and w into the provided array-like.\n     * @param array array-like to store the quaternion to.\n     * @param offset (optional) optional offset into the array.\n     * @return The provided array-like.\n     */\n    toArray(array: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    /**\n     * This method defines the serialization result of Quaternion.\n     * @return The numerical elements of this quaternion in an array of format [x, y, z, w].\n     */\n    toJSON(): [number, number, number, number];\n\n    /**\n     * Sets x, y, z, w properties of this quaternion from the attribute.\n     * @param attribute the source attribute.\n     * @param index index in the attribute.\n     */\n    fromBufferAttribute(attribute: BufferAttribute | InterleavedBufferAttribute, index: number): this;\n\n    _onChange(callback: () => void): this;\n    _onChangeCallback: () => void;\n\n    static slerpFlat(\n        dst: number[],\n        dstOffset: number,\n        src0: number[],\n        srcOffset: number,\n        src1: number[],\n        stcOffset1: number,\n        t: number,\n    ): void;\n\n    static multiplyQuaternionsFlat(\n        dst: number[],\n        dstOffset: number,\n        src0: number[],\n        srcOffset: number,\n        src1: number[],\n        stcOffset1: number,\n    ): number[];\n\n    random(): this;\n\n    [Symbol.iterator](): Generator<number, void>;\n}\n",
      "@types/three@~0/src/math/Ray.d.ts": "import { Box3 } from \"./Box3.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Plane } from \"./Plane.d.ts\";\nimport { Sphere } from \"./Sphere.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport class Ray {\n    constructor(origin?: Vector3, direction?: Vector3);\n\n    /**\n     * @default new THREE.Vector3()\n     */\n    origin: Vector3;\n\n    /**\n     * @default new THREE.Vector3( 0, 0, - 1 )\n     */\n    direction: Vector3;\n\n    set(origin: Vector3, direction: Vector3): Ray;\n    clone(): this;\n    copy(ray: Ray): this;\n    at(t: number, target: Vector3): Vector3;\n    lookAt(v: Vector3): Ray;\n    recast(t: number): Ray;\n    closestPointToPoint(point: Vector3, target: Vector3): Vector3;\n    distanceToPoint(point: Vector3): number;\n    distanceSqToPoint(point: Vector3): number;\n    distanceSqToSegment(\n        v0: Vector3,\n        v1: Vector3,\n        optionalPointOnRay?: Vector3,\n        optionalPointOnSegment?: Vector3,\n    ): number;\n    intersectSphere(sphere: Sphere, target: Vector3): Vector3 | null;\n    intersectsSphere(sphere: Sphere): boolean;\n    distanceToPlane(plane: Plane): number;\n    intersectPlane(plane: Plane, target: Vector3): Vector3 | null;\n    intersectsPlane(plane: Plane): boolean;\n    intersectBox(box: Box3, target: Vector3): Vector3 | null;\n    intersectsBox(box: Box3): boolean;\n    intersectTriangle(a: Vector3, b: Vector3, c: Vector3, backfaceCulling: boolean, target: Vector3): Vector3 | null;\n    applyMatrix4(matrix4: Matrix4): Ray;\n    equals(ray: Ray): boolean;\n\n    /**\n     * @deprecated Use {@link Ray#intersectsBox .intersectsBox()} instead.\n     */\n    isIntersectionBox(b: any): any;\n\n    /**\n     * @deprecated Use {@link Ray#intersectsPlane .intersectsPlane()} instead.\n     */\n    isIntersectionPlane(p: any): any;\n\n    /**\n     * @deprecated Use {@link Ray#intersectsSphere .intersectsSphere()} instead.\n     */\n    isIntersectionSphere(s: any): any;\n}\n",
      "@types/three@~0/src/math/Sphere.d.ts": "import { Box3 } from \"./Box3.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { Plane } from \"./Plane.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\n\nexport class Sphere {\n    constructor(center?: Vector3, radius?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Sphere}.\n     */\n    readonly isSphere: true;\n\n    /**\n     * @default new Vector3()\n     */\n    center: Vector3;\n\n    /**\n     * @default 1\n     */\n    radius: number;\n\n    set(center: Vector3, radius: number): Sphere;\n    setFromPoints(points: Vector3[], optionalCenter?: Vector3): Sphere;\n    clone(): this;\n    copy(sphere: Sphere): this;\n    expandByPoint(point: Vector3): this;\n    isEmpty(): boolean;\n    makeEmpty(): this;\n    containsPoint(point: Vector3): boolean;\n    distanceToPoint(point: Vector3): number;\n    intersectsSphere(sphere: Sphere): boolean;\n    intersectsBox(box: Box3): boolean;\n    intersectsPlane(plane: Plane): boolean;\n    clampPoint(point: Vector3, target: Vector3): Vector3;\n    getBoundingBox(target: Box3): Box3;\n    applyMatrix4(matrix: Matrix4): Sphere;\n    translate(offset: Vector3): Sphere;\n    equals(sphere: Sphere): boolean;\n    union(sphere: Sphere): this;\n\n    /**\n     * @deprecated Use {@link Sphere#isEmpty .isEmpty()} instead.\n     */\n    empty(): any;\n}\n",
      "@types/three@~0/src/math/Spherical.d.ts": "import { Vector3 } from \"./Vector3.d.ts\";\n\nexport class Spherical {\n    constructor(radius?: number, phi?: number, theta?: number);\n\n    /**\n     * @default 1\n     */\n    radius: number;\n\n    /**\n     * @default 0\n     */\n    phi: number;\n\n    /**\n     * @default 0\n     */\n    theta: number;\n\n    set(radius: number, phi: number, theta: number): this;\n    clone(): this;\n    copy(other: Spherical): this;\n    makeSafe(): this;\n    setFromVector3(v: Vector3): this;\n    setFromCartesianCoords(x: number, y: number, z: number): this;\n}\n",
      "@types/three@~0/src/math/SphericalHarmonics3.d.ts": "import { Vector3 } from \"./Vector3.d.ts\";\n\nexport class SphericalHarmonics3 {\n    constructor();\n\n    /**\n     * @default [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(),\n     * new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()]\n     */\n    coefficients: Vector3[];\n    readonly isSphericalHarmonics3: true;\n\n    set(coefficients: Vector3[]): SphericalHarmonics3;\n    zero(): SphericalHarmonics3;\n    add(sh: SphericalHarmonics3): SphericalHarmonics3;\n    addScaledSH(sh: SphericalHarmonics3, s: number): SphericalHarmonics3;\n    scale(s: number): SphericalHarmonics3;\n    lerp(sh: SphericalHarmonics3, alpha: number): SphericalHarmonics3;\n    equals(sh: SphericalHarmonics3): boolean;\n    copy(sh: SphericalHarmonics3): SphericalHarmonics3;\n    clone(): this;\n\n    /**\n     * Sets the values of this spherical harmonics from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;\n\n    /**\n     * Returns an array with the values of this spherical harmonics, or copies them into the provided array.\n     * @param array (optional) array to store the spherical harmonics to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n\n    /**\n     * Returns an array with the values of this spherical harmonics, or copies them into the provided array-like.\n     * @param array array-like to store the spherical harmonics to.\n     * @param offset (optional) optional offset into the array-like.\n     * @return The provided array-like.\n     */\n    toArray(array: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    getAt(normal: Vector3, target: Vector3): Vector3;\n    getIrradianceAt(normal: Vector3, target: Vector3): Vector3;\n\n    static getBasisAt(normal: Vector3, shBasis: number[]): void;\n}\n",
      "@types/three@~0/src/math/Triangle.d.ts": "import { Box3 } from \"./Box3.d.ts\";\nimport { Plane } from \"./Plane.d.ts\";\nimport { Vector2 } from \"./Vector2.d.ts\";\nimport { Vector3 } from \"./Vector3.d.ts\";\nimport { Vector4 } from \"./Vector4.d.ts\";\n\nimport { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"../core/InterleavedBufferAttribute.d.ts\";\n\nexport class Triangle {\n    constructor(a?: Vector3, b?: Vector3, c?: Vector3);\n\n    /**\n     * @default new THREE.Vector3()\n     */\n    a: Vector3;\n\n    /**\n     * @default new THREE.Vector3()\n     */\n    b: Vector3;\n\n    /**\n     * @default new THREE.Vector3()\n     */\n    c: Vector3;\n\n    set(a: Vector3, b: Vector3, c: Vector3): Triangle;\n    setFromPointsAndIndices(points: Vector3[], i0: number, i1: number, i2: number): this;\n    setFromAttributeAndIndices(\n        attribute: BufferAttribute | InterleavedBufferAttribute,\n        i0: number,\n        i1: number,\n        i2: number,\n    ): this;\n    clone(): this;\n    copy(triangle: Triangle): this;\n    getArea(): number;\n    getMidpoint(target: Vector3): Vector3;\n    getNormal(target: Vector3): Vector3;\n    getPlane(target: Plane): Plane;\n    getBarycoord(point: Vector3, target: Vector3): Vector3 | null;\n    getInterpolation(point: Vector3, v1: Vector2, v2: Vector2, v3: Vector2, target: Vector2): Vector2 | null;\n    getInterpolation(point: Vector3, v1: Vector3, v2: Vector3, v3: Vector3, target: Vector3): Vector3 | null;\n    getInterpolation(point: Vector3, v1: Vector4, v2: Vector4, v3: Vector4, target: Vector4): Vector4 | null;\n    containsPoint(point: Vector3): boolean;\n    intersectsBox(box: Box3): boolean;\n    isFrontFacing(direction: Vector3): boolean;\n    closestPointToPoint(point: Vector3, target: Vector3): Vector3;\n    equals(triangle: Triangle): boolean;\n\n    static getNormal(a: Vector3, b: Vector3, c: Vector3, target: Vector3): Vector3;\n    static getBarycoord(point: Vector3, a: Vector3, b: Vector3, c: Vector3, target: Vector3): Vector3 | null;\n    static containsPoint(point: Vector3, a: Vector3, b: Vector3, c: Vector3): boolean;\n    static getInterpolation(\n        point: Vector3,\n        p1: Vector3,\n        p2: Vector3,\n        p3: Vector3,\n        v1: Vector2,\n        v2: Vector2,\n        v3: Vector2,\n        target: Vector2,\n    ): Vector2 | null;\n    static getInterpolation(\n        point: Vector3,\n        p1: Vector3,\n        p2: Vector3,\n        p3: Vector3,\n        v1: Vector3,\n        v2: Vector3,\n        v3: Vector3,\n        target: Vector3,\n    ): Vector3 | null;\n    static getInterpolation(\n        point: Vector3,\n        p1: Vector3,\n        p2: Vector3,\n        p3: Vector3,\n        v1: Vector4,\n        v2: Vector4,\n        v3: Vector4,\n        target: Vector4,\n    ): Vector4 | null;\n    static isFrontFacing(a: Vector3, b: Vector3, c: Vector3, direction: Vector3): boolean;\n}\n",
      "@types/three@~0/src/math/Vector2.d.ts": "import { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { Matrix3 } from \"./Matrix3.d.ts\";\n\nexport type Vector2Tuple = [number, number];\n\nexport interface Vector2Like {\n    readonly x: number;\n    readonly y: number;\n}\n\n/**\n * 2D vector.\n */\nexport class Vector2 {\n    constructor(x?: number, y?: number);\n\n    /**\n     * @default 0\n     */\n    x: number;\n\n    /**\n     * @default 0\n     */\n    y: number;\n    width: number;\n    height: number;\n    readonly isVector2: true;\n\n    /**\n     * Sets value of this vector.\n     */\n    set(x: number, y: number): this;\n\n    /**\n     * Sets the x and y values of this vector both equal to scalar.\n     */\n    setScalar(scalar: number): this;\n\n    /**\n     * Sets X component of this vector.\n     */\n    setX(x: number): this;\n\n    /**\n     * Sets Y component of this vector.\n     */\n    setY(y: number): this;\n\n    /**\n     * Sets a component of this vector.\n     */\n    setComponent(index: number, value: number): this;\n\n    /**\n     * Gets a component of this vector.\n     */\n    getComponent(index: number): number;\n\n    /**\n     * Returns a new Vector2 instance with the same `x` and `y` values.\n     */\n    clone(): this;\n\n    /**\n     * Copies value of v to this vector.\n     */\n    copy(v: Vector2Like): this;\n\n    /**\n     * Adds v to this vector.\n     */\n    add(v: Vector2Like): this;\n\n    /**\n     * Adds the scalar value s to this vector's x and y values.\n     */\n    addScalar(s: number): this;\n\n    /**\n     * Sets this vector to a + b.\n     */\n    addVectors(a: Vector2Like, b: Vector2Like): this;\n\n    /**\n     * Adds the multiple of v and s to this vector.\n     */\n    addScaledVector(v: Vector2Like, s: number): this;\n\n    /**\n     * Subtracts v from this vector.\n     */\n    sub(v: Vector2Like): this;\n\n    /**\n     * Subtracts s from this vector's x and y components.\n     */\n    subScalar(s: number): this;\n\n    /**\n     * Sets this vector to a - b.\n     */\n    subVectors(a: Vector2Like, b: Vector2Like): this;\n\n    /**\n     * Multiplies this vector by v.\n     */\n    multiply(v: Vector2Like): this;\n\n    /**\n     * Multiplies this vector by scalar s.\n     */\n    multiplyScalar(scalar: number): this;\n\n    /**\n     * Divides this vector by v.\n     */\n    divide(v: Vector2Like): this;\n\n    /**\n     * Divides this vector by scalar s.\n     * Set vector to ( 0, 0 ) if s == 0.\n     */\n    divideScalar(s: number): this;\n\n    /**\n     * Multiplies this vector (with an implicit 1 as the 3rd component) by m.\n     */\n    applyMatrix3(m: Matrix3): this;\n\n    /**\n     * If this vector's x or y value is greater than v's x or y value, replace that value with the corresponding min value.\n     */\n    min(v: Vector2Like): this;\n\n    /**\n     * If this vector's x or y value is less than v's x or y value, replace that value with the corresponding max value.\n     */\n    max(v: Vector2Like): this;\n\n    /**\n     * If this vector's x or y value is greater than the max vector's x or y value, it is replaced by the corresponding value.\n     * If this vector's x or y value is less than the min vector's x or y value, it is replaced by the corresponding value.\n     * @param min the minimum x and y values.\n     * @param max the maximum x and y values in the desired range.\n     */\n    clamp(min: Vector2Like, max: Vector2Like): this;\n\n    /**\n     * If this vector's x or y values are greater than the max value, they are replaced by the max value.\n     * If this vector's x or y values are less than the min value, they are replaced by the min value.\n     * @param min the minimum value the components will be clamped to.\n     * @param max the maximum value the components will be clamped to.\n     */\n    clampScalar(min: number, max: number): this;\n\n    /**\n     * If this vector's length is greater than the max value, it is replaced by the max value.\n     * If this vector's length is less than the min value, it is replaced by the min value.\n     * @param min the minimum value the length will be clamped to.\n     * @param max the maximum value the length will be clamped to.\n     */\n    clampLength(min: number, max: number): this;\n\n    /**\n     * The components of the vector are rounded down to the nearest integer value.\n     */\n    floor(): this;\n\n    /**\n     * The x and y components of the vector are rounded up to the nearest integer value.\n     */\n    ceil(): this;\n\n    /**\n     * The components of the vector are rounded to the nearest integer value.\n     */\n    round(): this;\n\n    /**\n     * The components of the vector are rounded towards zero (up if negative, down if positive) to an integer value.\n     */\n    roundToZero(): this;\n\n    /**\n     * Inverts this vector.\n     */\n    negate(): this;\n\n    /**\n     * Computes dot product of this vector and v.\n     */\n    dot(v: Vector2Like): number;\n\n    /**\n     * Computes cross product of this vector and v.\n     */\n    cross(v: Vector2Like): number;\n\n    /**\n     * Computes squared length of this vector.\n     */\n    lengthSq(): number;\n\n    /**\n     * Computes length of this vector.\n     */\n    length(): number;\n\n    /**\n     * Computes the Manhattan length of this vector.\n     *\n     * see {@link http://en.wikipedia.org/wiki/Taxicab_geometry|Wikipedia: Taxicab Geometry}\n     */\n    manhattanLength(): number;\n\n    /**\n     * Normalizes this vector.\n     */\n    normalize(): this;\n\n    /**\n     * computes the angle in radians with respect to the positive x-axis\n     */\n    angle(): number;\n\n    /**\n     * Returns the angle between this vector and vector {@link Vector2 | v} in radians.\n     */\n    angleTo(v: Vector2): number;\n\n    /**\n     * Computes distance of this vector to v.\n     */\n    distanceTo(v: Vector2Like): number;\n\n    /**\n     * Computes squared distance of this vector to v.\n     */\n    distanceToSquared(v: Vector2Like): number;\n\n    /**\n     * Computes the Manhattan length (distance) from this vector to the given vector v\n     *\n     * see {@link http://en.wikipedia.org/wiki/Taxicab_geometry|Wikipedia: Taxicab Geometry}\n     */\n    manhattanDistanceTo(v: Vector2Like): number;\n\n    /**\n     * Normalizes this vector and multiplies it by l.\n     */\n    setLength(length: number): this;\n\n    /**\n     * Linearly interpolates between this vector and v, where alpha is the distance along the line - alpha = 0 will be this vector, and alpha = 1 will be v.\n     * @param v vector to interpolate towards.\n     * @param alpha interpolation factor in the closed interval [0, 1].\n     */\n    lerp(v: Vector2Like, alpha: number): this;\n\n    /**\n     * Sets this vector to be the vector linearly interpolated between v1 and v2 where alpha is the distance along the line connecting the two vectors - alpha = 0 will be v1, and alpha = 1 will be v2.\n     * @param v1 the starting vector.\n     * @param v2 vector to interpolate towards.\n     * @param alpha interpolation factor in the closed interval [0, 1].\n     */\n    lerpVectors(v1: Vector2Like, v2: Vector2Like, alpha: number): this;\n\n    /**\n     * Checks for strict equality of this vector and v.\n     */\n    equals(v: Vector2Like): boolean;\n\n    /**\n     * Sets this vector's x and y value from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;\n\n    /**\n     * Returns an array [x, y], or copies x and y into the provided array.\n     * @param array (optional) array to store the vector to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n    toArray(array?: Vector2Tuple, offset?: 0): Vector2Tuple;\n\n    /**\n     * Copies x and y into the provided array-like.\n     * @param array array-like to store the vector to.\n     * @param offset (optional) optional offset into the array.\n     * @return The provided array-like.\n     */\n    toArray(array: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    /**\n     * Sets this vector's x and y values from the attribute.\n     * @param attribute the source attribute.\n     * @param index index in the attribute.\n     */\n    fromBufferAttribute(attribute: BufferAttribute, index: number): this;\n\n    /**\n     * Rotates the vector around center by angle radians.\n     * @param center the point around which to rotate.\n     * @param angle the angle to rotate, in radians.\n     */\n    rotateAround(center: Vector2Like, angle: number): this;\n\n    /**\n     * Sets this vector's x and y from Math.random\n     */\n    random(): this;\n\n    /**\n     * Iterating through a Vector2 instance will yield its components (x, y) in the corresponding order.\n     */\n    [Symbol.iterator](): Iterator<number>;\n}\n",
      "@types/three@~0/src/math/Vector3.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"../core/InterleavedBufferAttribute.d.ts\";\nimport { RGB } from \"./Color.d.ts\";\nimport { Cylindrical } from \"./Cylindrical.d.ts\";\nimport { Euler } from \"./Euler.d.ts\";\nimport { Matrix3 } from \"./Matrix3.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { QuaternionLike } from \"./Quaternion.d.ts\";\nimport { Spherical } from \"./Spherical.d.ts\";\n\nexport type Vector3Tuple = [number, number, number];\n\nexport interface Vector3Like {\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n}\n\n/**\n * 3D vector.\n *\n * see {@link https://github.com/mrdoob/three.js/blob/master/src/math/Vector3.js}\n *\n * @example\n * const a = new THREE.Vector3( 1, 0, 0 );\n * const b = new THREE.Vector3( 0, 1, 0 );\n * const c = new THREE.Vector3();\n * c.crossVectors( a, b );\n */\nexport class Vector3 {\n    constructor(x?: number, y?: number, z?: number);\n\n    /**\n     * @default 0\n     */\n    x: number;\n\n    /**\n     * @default 0\n     */\n    y: number;\n\n    /**\n     * @default 0\n     */\n    z: number;\n    readonly isVector3: true;\n\n    /**\n     * Sets value of this vector.\n     */\n    set(x: number, y: number, z: number): this;\n\n    /**\n     * Sets all values of this vector.\n     */\n    setScalar(scalar: number): this;\n\n    /**\n     * Sets x value of this vector.\n     */\n    setX(x: number): this;\n\n    /**\n     * Sets y value of this vector.\n     */\n    setY(y: number): this;\n\n    /**\n     * Sets z value of this vector.\n     */\n    setZ(z: number): this;\n\n    setComponent(index: number, value: number): this;\n\n    getComponent(index: number): number;\n\n    /**\n     * Clones this vector.\n     */\n    clone(): this;\n\n    /**\n     * Copies value of v to this vector.\n     */\n    copy(v: Vector3Like): this;\n\n    /**\n     * Adds v to this vector.\n     */\n    add(v: Vector3Like): this;\n\n    addScalar(s: number): this;\n\n    /**\n     * Sets this vector to a + b.\n     */\n    addVectors(a: Vector3Like, b: Vector3Like): this;\n\n    addScaledVector(v: Vector3, s: number): this;\n\n    /**\n     * Subtracts v from this vector.\n     */\n    sub(a: Vector3Like): this;\n\n    subScalar(s: number): this;\n\n    /**\n     * Sets this vector to a - b.\n     */\n    subVectors(a: Vector3Like, b: Vector3Like): this;\n\n    multiply(v: Vector3Like): this;\n\n    /**\n     * Multiplies this vector by scalar s.\n     */\n    multiplyScalar(s: number): this;\n\n    multiplyVectors(a: Vector3Like, b: Vector3Like): this;\n\n    applyEuler(euler: Euler): this;\n\n    applyAxisAngle(axis: Vector3, angle: number): this;\n\n    applyMatrix3(m: Matrix3): this;\n\n    applyNormalMatrix(m: Matrix3): this;\n\n    applyMatrix4(m: Matrix4): this;\n\n    applyQuaternion(q: QuaternionLike): this;\n\n    project(camera: Camera): this;\n\n    unproject(camera: Camera): this;\n\n    transformDirection(m: Matrix4): this;\n\n    divide(v: Vector3Like): this;\n\n    /**\n     * Divides this vector by scalar s.\n     * Set vector to ( 0, 0, 0 ) if s == 0.\n     */\n    divideScalar(s: number): this;\n\n    min(v: Vector3Like): this;\n\n    max(v: Vector3Like): this;\n\n    clamp(min: Vector3Like, max: Vector3Like): this;\n\n    clampScalar(min: number, max: number): this;\n\n    clampLength(min: number, max: number): this;\n\n    floor(): this;\n\n    ceil(): this;\n\n    round(): this;\n\n    roundToZero(): this;\n\n    /**\n     * Inverts this vector.\n     */\n    negate(): this;\n\n    /**\n     * Computes dot product of this vector and v.\n     */\n    dot(v: Vector3Like): number;\n\n    /**\n     * Computes squared length of this vector.\n     */\n    lengthSq(): number;\n\n    /**\n     * Computes length of this vector.\n     */\n    length(): number;\n\n    /**\n     * Computes the Manhattan length of this vector.\n     *\n     * see {@link http://en.wikipedia.org/wiki/Taxicab_geometry|Wikipedia: Taxicab Geometry}\n     */\n    manhattanLength(): number;\n\n    /**\n     * Normalizes this vector.\n     */\n    normalize(): this;\n\n    /**\n     * Normalizes this vector and multiplies it by l.\n     */\n    setLength(l: number): this;\n    lerp(v: Vector3Like, alpha: number): this;\n\n    lerpVectors(v1: Vector3Like, v2: Vector3Like, alpha: number): this;\n\n    /**\n     * Sets this vector to cross product of itself and v.\n     */\n    cross(a: Vector3Like): this;\n\n    /**\n     * Sets this vector to cross product of a and b.\n     */\n    crossVectors(a: Vector3Like, b: Vector3Like): this;\n    projectOnVector(v: Vector3): this;\n    projectOnPlane(planeNormal: Vector3): this;\n    reflect(vector: Vector3Like): this;\n    angleTo(v: Vector3): number;\n\n    /**\n     * Computes distance of this vector to v.\n     */\n    distanceTo(v: Vector3Like): number;\n\n    /**\n     * Computes squared distance of this vector to v.\n     */\n    distanceToSquared(v: Vector3Like): number;\n\n    /**\n     * Computes the Manhattan length (distance) from this vector to the given vector v\n     *\n     * see {@link http://en.wikipedia.org/wiki/Taxicab_geometry|Wikipedia: Taxicab Geometry}\n     */\n    manhattanDistanceTo(v: Vector3Like): number;\n\n    setFromSpherical(s: Spherical): this;\n    setFromSphericalCoords(r: number, phi: number, theta: number): this;\n    setFromCylindrical(s: Cylindrical): this;\n    setFromCylindricalCoords(radius: number, theta: number, y: number): this;\n    setFromMatrixPosition(m: Matrix4): this;\n    setFromMatrixScale(m: Matrix4): this;\n    setFromMatrixColumn(matrix: Matrix4, index: number): this;\n    setFromMatrix3Column(matrix: Matrix3, index: number): this;\n\n    /**\n     * Sets this vector's {@link x}, {@link y} and {@link z} components from the x, y, and z components of the specified {@link Euler Euler Angle}.\n     */\n    setFromEuler(e: Euler): this;\n\n    /**\n     * Sets this vector's {@link x}, {@link y} and {@link z} components from the r, g, and b components of the specified\n     * {@link Color | color}.\n     */\n    setFromColor(color: RGB): this;\n\n    /**\n     * Checks for strict equality of this vector and v.\n     */\n    equals(v: Vector3Like): boolean;\n\n    /**\n     * Sets this vector's x, y and z value from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;\n\n    /**\n     * Returns an array [x, y, z], or copies x, y and z into the provided array.\n     * @param array (optional) array to store the vector to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n    toArray(array?: Vector3Tuple, offset?: 0): Vector3Tuple;\n\n    /**\n     * Copies x, y and z into the provided array-like.\n     * @param array array-like to store the vector to.\n     * @param offset (optional) optional offset into the array-like.\n     * @return The provided array-like.\n     */\n    toArray(array: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    fromBufferAttribute(attribute: BufferAttribute | InterleavedBufferAttribute, index: number): this;\n\n    /**\n     * Sets this vector's x, y and z from Math.random\n     */\n    random(): this;\n\n    randomDirection(): this;\n\n    /**\n     * Iterating through a Vector3 instance will yield its components (x, y, z) in the corresponding order.\n     */\n    [Symbol.iterator](): Iterator<number>;\n}\n",
      "@types/three@~0/src/math/Vector4.d.ts": "import { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { Matrix4 } from \"./Matrix4.d.ts\";\nimport { QuaternionLike } from \"./Quaternion.d.ts\";\n\nexport type Vector4Tuple = [number, number, number, number];\n\nexport interface Vector4Like {\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    readonly w: number;\n}\n\n/**\n * 4D vector.\n */\nexport class Vector4 {\n    constructor(x?: number, y?: number, z?: number, w?: number);\n\n    /**\n     * @default 0\n     */\n    x: number;\n\n    /**\n     * @default 0\n     */\n    y: number;\n\n    /**\n     * @default 0\n     */\n    z: number;\n\n    /**\n     * @default 0\n     */\n    w: number;\n\n    width: number;\n    height: number;\n    readonly isVector4: true;\n\n    /**\n     * Sets value of this vector.\n     */\n    set(x: number, y: number, z: number, w: number): this;\n\n    /**\n     * Sets all values of this vector.\n     */\n    setScalar(scalar: number): this;\n\n    /**\n     * Sets X component of this vector.\n     */\n    setX(x: number): this;\n\n    /**\n     * Sets Y component of this vector.\n     */\n    setY(y: number): this;\n\n    /**\n     * Sets Z component of this vector.\n     */\n    setZ(z: number): this;\n\n    /**\n     * Sets w component of this vector.\n     */\n    setW(w: number): this;\n\n    setComponent(index: number, value: number): this;\n\n    getComponent(index: number): number;\n\n    /**\n     * Clones this vector.\n     */\n    clone(): this;\n\n    /**\n     * Copies value of v to this vector.\n     */\n    copy(v: Vector4Like): this;\n\n    /**\n     * Adds v to this vector.\n     */\n    add(v: Vector4Like): this;\n\n    addScalar(scalar: number): this;\n\n    /**\n     * Sets this vector to a + b.\n     */\n    addVectors(a: Vector4Like, b: Vector4Like): this;\n\n    addScaledVector(v: Vector4Like, s: number): this;\n    /**\n     * Subtracts v from this vector.\n     */\n    sub(v: Vector4Like): this;\n\n    subScalar(s: number): this;\n\n    /**\n     * Sets this vector to a - b.\n     */\n    subVectors(a: Vector4Like, b: Vector4Like): this;\n\n    multiply(v: Vector4Like): this;\n\n    /**\n     * Multiplies this vector by scalar s.\n     */\n    multiplyScalar(s: number): this;\n\n    applyMatrix4(m: Matrix4): this;\n\n    /**\n     * Divides this vector by scalar s.\n     * Set vector to ( 0, 0, 0 ) if s == 0.\n     */\n    divideScalar(s: number): this;\n\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n     * @param q is assumed to be normalized\n     */\n    setAxisAngleFromQuaternion(q: QuaternionLike): this;\n\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n     * @param m assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     */\n    setAxisAngleFromRotationMatrix(m: Matrix4): this;\n\n    min(v: Vector4Like): this;\n    max(v: Vector4Like): this;\n    clamp(min: Vector4Like, max: Vector4Like): this;\n    clampScalar(min: number, max: number): this;\n    floor(): this;\n    ceil(): this;\n    round(): this;\n    roundToZero(): this;\n\n    /**\n     * Inverts this vector.\n     */\n    negate(): this;\n\n    /**\n     * Computes dot product of this vector and v.\n     */\n    dot(v: Vector4Like): number;\n\n    /**\n     * Computes squared length of this vector.\n     */\n    lengthSq(): number;\n\n    /**\n     * Computes length of this vector.\n     */\n    length(): number;\n\n    /**\n     * Computes the Manhattan length of this vector.\n     *\n     * see {@link http://en.wikipedia.org/wiki/Taxicab_geometry|Wikipedia: Taxicab Geometry}\n     */\n    manhattanLength(): number;\n\n    /**\n     * Normalizes this vector.\n     */\n    normalize(): this;\n\n    /**\n     * Normalizes this vector and multiplies it by l.\n     */\n    setLength(length: number): this;\n\n    /**\n     * Linearly interpolate between this vector and v with alpha factor.\n     */\n    lerp(v: Vector4Like, alpha: number): this;\n\n    lerpVectors(v1: Vector4Like, v2: Vector4Like, alpha: number): this;\n\n    /**\n     * Checks for strict equality of this vector and v.\n     */\n    equals(v: Vector4Like): boolean;\n\n    /**\n     * Sets this vector's x, y, z and w value from the provided array or array-like.\n     * @param array the source array or array-like.\n     * @param offset (optional) offset into the array. Default is 0.\n     */\n    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;\n\n    /**\n     * Returns an array [x, y, z, w], or copies x, y, z and w into the provided array.\n     * @param array (optional) array to store the vector to. If this is not provided, a new array will be created.\n     * @param offset (optional) optional offset into the array.\n     * @return The created or provided array.\n     */\n    toArray(array?: number[], offset?: number): number[];\n    toArray(array?: Vector4Tuple, offset?: 0): Vector4Tuple;\n\n    /**\n     * Copies x, y, z and w into the provided array-like.\n     * @param array array-like to store the vector to.\n     * @param offset (optional) optional offset into the array-like.\n     * @return The provided array-like.\n     */\n    toArray(array: ArrayLike<number>, offset?: number): ArrayLike<number>;\n\n    fromBufferAttribute(attribute: BufferAttribute, index: number): this;\n\n    /**\n     * Sets this vector's x, y, z and w from Math.random\n     */\n    random(): this;\n\n    /**\n     * Iterating through a Vector4 instance will yield its components (x, y, z, w) in the corresponding order.\n     */\n    [Symbol.iterator](): Iterator<number>;\n}\n",
      "@types/three@~0/src/math/MathUtils.d.ts": "import { Quaternion } from \"./Quaternion.d.ts\";\n\n/**\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/math/MathUtils.js|src/math/MathUtils.js}\n */\n\nexport const DEG2RAD: number;\n\nexport const RAD2DEG: number;\n\nexport function generateUUID(): string;\n\n/**\n * Clamps the x to be between a and b.\n *\n * @param value Value to be clamped.\n * @param min Minimum value.\n * @param max Maximum value.\n */\nexport function clamp(value: number, min: number, max: number): number;\n\nexport function euclideanModulo(n: number, m: number): number;\n\n/**\n * Linear mapping of x from range [a1, a2] to range [b1, b2].\n *\n * @param x Value to be mapped.\n * @param a1 Minimum value for range A.\n * @param a2 Maximum value for range A.\n * @param b1 Minimum value for range B.\n * @param b2 Maximum value for range B.\n */\nexport function mapLinear(x: number, a1: number, a2: number, b1: number, b2: number): number;\n\nexport function inverseLerp(x: number, y: number, t: number): number;\n\n/**\n * Returns a value linearly interpolated from two known points based\n * on the given interval - t = 0 will return x and t = 1 will return y.\n *\n * @param x Start point.\n * @param y End point.\n * @param t interpolation factor in the closed interval [0, 1]\n */\nexport function lerp(x: number, y: number, t: number): number;\n\n/**\n * Smoothly interpolate a number from x toward y in a spring-like\n * manner using the dt to maintain frame rate independent movement.\n *\n * @param x Current point.\n * @param y Target point.\n * @param lambda A higher lambda value will make the movement more sudden, and a lower value will make the movement more gradual.\n * @param dt Delta time in seconds.\n */\nexport function damp(x: number, y: number, lambda: number, dt: number): number;\n\n/**\n * Returns a value that alternates between 0 and length.\n *\n * @param x The value to pingpong.\n * @param length The positive value the export function will pingpong to. Default is 1.\n */\nexport function pingpong(x: number, length?: number): number;\n\nexport function smoothstep(x: number, min: number, max: number): number;\n\nexport function smootherstep(x: number, min: number, max: number): number;\n\n/**\n * Random integer from low to high interval.\n */\nexport function randInt(low: number, high: number): number;\n\n/**\n * Random float from low to high interval.\n */\nexport function randFloat(low: number, high: number): number;\n\n/**\n * Random float from - range / 2 to range / 2 interval.\n */\nexport function randFloatSpread(range: number): number;\n\n/**\n * Deterministic pseudo-random float in the interval [ 0, 1 ].\n */\nexport function seededRandom(seed?: number): number;\n\nexport function degToRad(degrees: number): number;\n\nexport function radToDeg(radians: number): number;\n\nexport function isPowerOfTwo(value: number): boolean;\n\nexport function ceilPowerOfTwo(value: number): number;\n\nexport function floorPowerOfTwo(value: number): number;\n\nexport function setQuaternionFromProperEuler(q: Quaternion, a: number, b: number, c: number, order: string): void;\n\nexport function denormalize(\n    value: number,\n    array: Float32Array | Uint32Array | Uint16Array | Uint8Array | Int32Array | Int16Array | Int8Array,\n): number;\n\nexport function normalize(\n    value: number,\n    array: Float32Array | Uint32Array | Uint16Array | Uint8Array | Int32Array | Int16Array | Int8Array,\n): number;\n\nexport const MathUtils: {\n    DEG2RAD: typeof DEG2RAD;\n    RAD2DEG: typeof RAD2DEG;\n    generateUUID: typeof generateUUID;\n    clamp: typeof clamp;\n    euclideanModulo: typeof euclideanModulo;\n    mapLinear: typeof mapLinear;\n    inverseLerp: typeof inverseLerp;\n    lerp: typeof lerp;\n    damp: typeof damp;\n    pingpong: typeof pingpong;\n    smoothstep: typeof smoothstep;\n    smootherstep: typeof smootherstep;\n    randInt: typeof randInt;\n    randFloat: typeof randFloat;\n    randFloatSpread: typeof randFloatSpread;\n    seededRandom: typeof seededRandom;\n    degToRad: typeof degToRad;\n    radToDeg: typeof radToDeg;\n    isPowerOfTwo: typeof isPowerOfTwo;\n    ceilPowerOfTwo: typeof ceilPowerOfTwo;\n    floorPowerOfTwo: typeof floorPowerOfTwo;\n    setQuaternionFromProperEuler: typeof setQuaternionFromProperEuler;\n    normalize: typeof normalize;\n    denormalize: typeof denormalize;\n};\n",
      "@types/three@~0/src/objects/BatchedMesh.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Box3 } from \"../math/Box3.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Sphere } from \"../math/Sphere.d.ts\";\nimport { Mesh } from \"./Mesh.d.ts\";\n\n/**\n * A special version of {@link Mesh} with multi draw batch rendering support. Use {@link BatchedMesh} if you have to\n * render a large number of objects with the same material but with different world transformations and geometry. The\n * usage of {@link BatchedMesh} will help you to reduce the number of draw calls and thus improve the overall rendering\n * performance in your application.\n *\n * If the {@link https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw WEBGL_multi_draw extension} is not\n * supported then a less performant callback is used.\n *\n * @example\n * const box = new THREE.BoxGeometry( 1, 1, 1 );\n * const sphere = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n *\n * // initialize and add geometries into the batched mesh\n * const batchedMesh = new BatchedMesh( 10, 5000, 10000, material );\n * const boxId = batchedMesh.addGeometry( box );\n * const sphereId = batchedMesh.addGeometry( sphere );\n *\n * // position the geometries\n * batchedMesh.setMatrixAt( boxId, boxMatrix );\n * batchedMesh.setMatrixAt( sphereId, sphereMatrix );\n *\n * scene.add( batchedMesh );\n *\n * @also Example: {@link https://threejs.org/examples/#webgl_mesh_batch WebGL / mesh / batch}\n */\ndeclare class BatchedMesh extends Mesh<BufferGeometry, Material> {\n    /**\n     * This bounding box encloses all instances of the {@link BatchedMesh}. Can be calculated with\n     * {@link .computeBoundingBox()}.\n     * @default null\n     */\n    boundingBox: Box3 | null;\n\n    /**\n     * This bounding sphere encloses all instances of the {@link BatchedMesh}. Can be calculated with\n     * {@link .computeBoundingSphere()}.\n     * @default null\n     */\n    boundingSphere: Sphere | null;\n\n    customSort: ((this: this, list: Array<{ start: number; count: number; z: number }>, camera: Camera) => void) | null;\n\n    /**\n     * If true then the individual objects within the {@link BatchedMesh} are frustum culled.\n     * @default true\n     */\n    perObjectFrustumCulled: boolean;\n\n    /**\n     * If true then the individual objects within the {@link BatchedMesh} are sorted to improve overdraw-related\n     * artifacts. If the material is marked as \"transparent\" objects are rendered back to front and if not then they are\n     * rendered front to back.\n     * @default true\n     */\n    sortObjects: boolean;\n\n    /**\n     * The maximum number of individual geometries that can be stored in the {@link BatchedMesh}. Read only.\n     */\n    get maxGeometryCount(): number;\n\n    /**\n     * Read-only flag to check if a given object is of type {@link BatchedMesh}.\n     */\n    isBatchedMesh: true;\n\n    /**\n     * @param maxGeometryCount the max number of individual geometries planned to be added.\n     * @param maxVertexCount the max number of vertices to be used by all geometries.\n     * @param maxIndexCount the max number of indices to be used by all geometries.\n     * @param material an instance of [page:Material]. Default is a new {@link MeshBasicMaterial}.\n     */\n    constructor(maxGeometryCount: number, maxVertexCount: number, maxIndexCount?: number, material?: Material);\n\n    /**\n     * Computes the bounding box, updating {@link .boundingBox} attribute.\n     * Bounding boxes aren't computed by default. They need to be explicitly computed, otherwise they are `null`.\n     */\n    computeBoundingBox(): void;\n\n    /**\n     * Computes the bounding sphere, updating {@link .boundingSphere} attribute.\n     * Bounding spheres aren't computed by default. They need to be explicitly computed, otherwise they are `null`.\n     */\n    computeBoundingSphere(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer\n     * used in your app.\n     */\n    dispose(): this;\n\n    /**\n     * Takes a sort a function that is run before render. The function takes a list of items to sort and a camera. The\n     * objects in the list include a \"z\" field to perform a depth-ordered sort with.\n     */\n    setCustomSort(\n        func: ((this: this, list: Array<{ start: number; count: number; z: number }>, camera: Camera) => void) | null,\n    ): this;\n\n    /**\n     * Get the local transformation matrix of the defined instance.\n     * @param index The index of an instance. Values have to be in the range [0, count].\n     * @param matrix This 4x4 matrix will be set to the local transformation matrix of the defined instance.\n     */\n    getMatrixAt(index: number, matrix: Matrix4): Matrix4;\n\n    /**\n     * Get whether the given instance is marked as \"visible\" or not.\n     * @param index The index of an instance. Values have to be in the range [0, count].\n     */\n    getVisibleAt(index: number): boolean;\n\n    /**\n     * Sets the given local transformation matrix to the defined instance. Make sure you set {@link .instanceMatrix}\n     * {@link BufferAttribute.needsUpdate} to true after updating all the matrices.\n     * @param index The index of an instance. Values have to be in the range [0, count].\n     * @param matrix A 4x4 matrix representing the local transformation of a single instance.\n     */\n    setMatrixAt(index: number, matrix: Matrix4): this;\n\n    /**\n     * Sets the visibility of the object at the given index.\n     * @param index The index of an instance. Values have to be in the range [0, count].\n     * @param visible A boolean value indicating the visibility state.\n     */\n    setVisibleAt(index: number, visible: boolean): this;\n\n    /**\n     * Adds the given geometry to the {@link BatchedMesh} and returns the associated index referring to it.\n     * @param geometry The geometry to add into the {@link BatchedMesh}.\n     * @param reservedVertexRange Optional parameter specifying the amount of vertex buffer space to reserve for the\n     * added geometry. This is necessary if it is planned to set a new geometry at this index at a later time that is\n     * larger than the original geometry. Defaults to the length of the given geometry vertex buffer.\n     * @param reservedIndexRange Optional parameter specifying the amount of index buffer space to reserve for the added\n     * geometry. This is necessary if it is planned to set a new geometry at this index at a later time that is larger\n     * than the original geometry. Defaults to the length of the given geometry index buffer.\n     */\n    addGeometry(geometry: BufferGeometry, reservedVertexRange?: number, reservedIndexRange?: number): number;\n\n    /**\n     * Replaces the geometry at `index` with the provided geometry. Throws an error if there is not enough space\n     * reserved for geometry at the index.\n     * @param index Which geometry index to replace with this geometry.\n     * @param geometry The geometry to substitute at the given geometry index.\n     */\n    setGeometryAt(index: number, geometry: BufferGeometry): number;\n\n    /**\n     * Gets the instance count of the geometry at `index`. Returns `null` if instance counts are not configured.\n     * @param index The index of an instance. Values have to be in the range [0, count].\n     */\n    getInstanceCountAt(index: number): number | null;\n\n    /**\n     * Sets an instance count of the geometry at `index`.\n     * @param index Which geometry index to configure an instance count for.\n     * @param instanceCount The number of instances to render of the given geometry index.\n     */\n    setInstanceCountAt(index: number, instanceCount: number): number;\n\n    deleteGeometry(index: number): this;\n\n    getBoundingBoxAt(index: number, target: Box3): Box3 | null;\n    getBoundingSphereAt(index: number, target: Sphere): Sphere | null;\n}\n\nexport { BatchedMesh };\n",
      "@types/three@~0/src/objects/Bone.d.ts": "import { Object3D, Object3DEventMap } from \"../core/Object3D.d.ts\";\n\n/**\n * A {@link Bone} which is part of a {@link THREE.Skeleton | Skeleton}\n * @remarks\n * The skeleton in turn is used by the {@link THREE.SkinnedMesh | SkinnedMesh}\n * Bones are almost identical to a blank {@link THREE.Object3D | Object3D}.\n * @example\n * ```typescript\n * const root = new THREE.Bone();\n * const child = new THREE.Bone();\n * root.add(child);\n * child.position.y = 5;\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/Bone | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/Bone.js | Source}\n */\nexport class Bone<TEventMap extends Object3DEventMap = Object3DEventMap> extends Object3D<TEventMap> {\n    /**\n     * Creates a new {@link Bone}.\n     */\n    constructor();\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Bone}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isBone: true;\n\n    /**\n     * @override\n     * @defaultValue `Bone`\n     */\n    override readonly type: string | \"Bone\";\n}\n",
      "@types/three@~0/src/objects/Group.d.ts": "import { Object3D, Object3DEventMap } from \"../core/Object3D.d.ts\";\n\n/**\n * Its purpose is to make working with groups of objects syntactically clearer.\n * @remarks This is almost identical to an {@link Object3D | Object3D}\n * @example\n * ```typescript\n * const geometry = new THREE.BoxGeometry(1, 1, 1);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0x00ff00\n * });\n * const cubeA = new THREE.Mesh(geometry, material);\n * cubeA.position.set(100, 100, 0);\n * const cubeB = new THREE.Mesh(geometry, material);\n * cubeB.position.set(-100, -100, 0);\n * //create a {@link Group} and add the two cubes\n * //These cubes can now be rotated / scaled etc as a {@link Group}  * const {@link Group} = new THREE.Group();\n * group.add(cubeA);\n * group.add(cubeB);\n * scene.add(group);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/Group | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/Group.js | Source}\n */\nexport class Group<TEventMap extends Object3DEventMap = Object3DEventMap> extends Object3D<TEventMap> {\n    /**\n     * Creates a new {@link Group}.\n     */\n    constructor();\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Group}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isGroup: true;\n\n    /**\n     * @override\n     * @defaultValue `Group`\n     */\n    override readonly type: string | \"Group\";\n}\n",
      "@types/three@~0/src/objects/InstancedMesh.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { InstancedBufferAttribute } from \"../core/InstancedBufferAttribute.d.ts\";\nimport { Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Box3 } from \"../math/Box3.d.ts\";\nimport { Color } from \"../math/Color.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Sphere } from \"../math/Sphere.d.ts\";\nimport { DataTexture } from \"../textures/DataTexture.d.ts\";\nimport { Mesh } from \"./Mesh.d.ts\";\n\nexport interface InstancedMeshEventMap extends Object3DEventMap {\n    dispose: {};\n}\n\n/**\n * A special version of {@link THREE.Mesh | Mesh} with instanced rendering support\n * @remarks\n * Use {@link InstancedMesh} if you have to render a large number of objects with the same geometry and material but with different world transformations\n * @remarks\n * The usage of {@link InstancedMesh} will help you to reduce the number of draw calls and thus improve the overall rendering performance in your application.\n * @see Example: {@link https://threejs.org/examples/#webgl_instancing_dynamic | WebGL / instancing / dynamic}\n * @see Example: {@link https://threejs.org/examples/#webgl_instancing_performance | WebGL / instancing / performance}\n * @see Example: {@link https://threejs.org/examples/#webgl_instancing_scatter | WebGL / instancing / scatter}\n * @see Example: {@link https://threejs.org/examples/#webgl_instancing_raycast | WebGL / instancing / raycast}\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/InstancedMesh | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/InstancedMesh.js | Source}\n */\nexport class InstancedMesh<\n    TGeometry extends BufferGeometry = BufferGeometry,\n    TMaterial extends Material | Material[] = Material | Material[],\n    TEventMap extends InstancedMeshEventMap = InstancedMeshEventMap,\n> extends Mesh<TGeometry, TMaterial, TEventMap> {\n    /**\n     * Create a new instance of {@link InstancedMesh}\n     * @param geometry An instance of {@link THREE.BufferGeometry | BufferGeometry}.\n     * @param material A single or an array of {@link THREE.Material | Material}. Default {@link THREE.MeshBasicMaterial | `new THREE.MeshBasicMaterial()`}.\n     * @param count The **maximum** number of instances of this Mesh. Expects a `Integer`\n     */\n    constructor(geometry: TGeometry | undefined, material: TMaterial | undefined, count: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link InstancedMesh}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isInstancedMesh: true;\n\n    /**\n     * This bounding box encloses all instances of the {@link InstancedMesh},, which can be calculated with {@link computeBoundingBox | .computeBoundingBox()}.\n     * @remarks Bounding boxes aren't computed by default. They need to be explicitly computed, otherwise they are `null`.\n     * @defaultValue `null`\n     */\n    boundingBox: Box3 | null;\n\n    /**\n     * This bounding sphere encloses all instances of the {@link InstancedMesh}, which can be calculated with {@link computeBoundingSphere | .computeBoundingSphere()}.\n     * @remarks bounding spheres aren't computed by default. They need to be explicitly computed, otherwise they are `null`.\n     * @defaultValue `null`\n     */\n    boundingSphere: Sphere | null;\n\n    /**\n     * The number of instances.\n     * @remarks\n     * The `count` value passed into the {@link InstancedMesh | constructor} represents the **maximum** number of instances of this mesh.\n     * You can change the number of instances at runtime to an integer value in the range `[0, count]`.\n     * @remarks If you need more instances than the original `count` value, you have to create a new InstancedMesh.\n     * @remarks Expects a `Integer`\n     */\n    count: number;\n\n    /**\n     * Represents the colors of all instances.\n     * You have to set {@link InstancedBufferAttribute.needsUpdate | .instanceColor.needsUpdate()} flag to `true` if you modify instanced data via {@link setColorAt | .setColorAt()}.\n     * @defaultValue `null`\n     */\n    instanceColor: InstancedBufferAttribute | null;\n\n    /**\n     * Represents the local transformation of all instances.\n     * You have to set {@link InstancedBufferAttribute.needsUpdate | .instanceMatrix.needsUpdate()} flag to `true` if you modify instanced data via {@link setMatrixAt | .setMatrixAt()}.\n     */\n    instanceMatrix: InstancedBufferAttribute;\n\n    /**\n     * Represents the morph target weights of all instances. You have to set its {@link .needsUpdate} flag to true if\n     * you modify instanced data via {@link .setMorphAt}.\n     */\n    morphTexture: DataTexture | null;\n\n    /**\n     * Computes the bounding box of the instanced mesh, and updates the {@link .boundingBox} attribute. The bounding box\n     * is not computed by the engine; it must be computed by your app. You may need to recompute the bounding box if an\n     * instance is transformed via {@link .setMatrixAt()}.\n     */\n    computeBoundingBox(): void;\n\n    /**\n     * Computes the bounding sphere of the instanced mesh, and updates the {@link .boundingSphere} attribute. The engine\n     * automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling. You\n     * may need to recompute the bounding sphere if an instance is transformed via [page:.setMatrixAt]().\n     */\n    computeBoundingSphere(): void;\n\n    /**\n     * Get the color of the defined instance.\n     * @param index The index of an instance. Values have to be in the range `[0, count]`. Expects a `Integer`\n     * @param color This color object will be set to the color of the defined instance.\n     */\n    getColorAt(index: number, color: Color): void;\n\n    /**\n     * Sets the given color to the defined instance\n     * @remarks\n     * Make sure you set {@link InstancedBufferAttribute.needsUpdate | .instanceColor.needsUpdate()} to `true` after updating all the colors.\n     * @param index The index of an instance. Values have to be in the range `[0, count]`. Expects a `Integer`\n     * @param color The color of a single instance.\n     */\n    setColorAt(index: number, color: Color): void;\n\n    /**\n     * Get the local transformation matrix of the defined instance.\n     * @param index The index of an instance Values have to be in the range `[0, count]`. Expects a `Integer`\n     * @param matrix This 4x4 matrix will be set to the local transformation matrix of the defined instance.\n     */\n    getMatrixAt(index: number, matrix: Matrix4): void;\n\n    /**\n     * Get the morph target weights of the defined instance.\n     * @param index The index of an instance. Values have to be in the range [0, count].\n     * @param mesh The {@link .morphTargetInfluences} property of this mesh will be filled with the morph target weights of the defined instance.\n     */\n    getMorphAt(index: number, mesh: Mesh): void;\n\n    /**\n     * Sets the given local transformation matrix to the defined instance.\n     * @remarks\n     * Make sure you set {@link InstancedBufferAttribute.needsUpdate | .instanceMatrix.needsUpdate()} flag to `true` after updating all the matrices.\n     * @param index The index of an instance. Values have to be in the range `[0, count]`. Expects a `Integer`\n     * @param matrix A 4x4 matrix representing the local transformation of a single instance.\n     */\n    setMatrixAt(index: number, matrix: Matrix4): void;\n\n    /**\n     * Sets the morph target weights to the defined instance. Make sure you set {@link .morphTexture}{@link .needsUpdate}\n     * to true after updating all the influences.\n     * @param index The index of an instance. Values have to be in the range [0, count].\n     * @param mesh A mesh with {@link .morphTargetInfluences} property containing the morph target weights of a single instance.\n     */\n    setMorphAt(index: number, mesh: Mesh): void;\n\n    /**\n     * No effect in {@link InstancedMesh}.\n     * @ignore\n     * @hidden\n     */\n    override updateMorphTargets(): void;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): this;\n}\n",
      "@types/three@~0/src/objects/Line.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3D, Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\n\n/**\n * A continuous line.\n * @remarks\n * This is nearly the same as {@link THREE.LineSegments | LineSegments},\n * the only difference is that it is rendered using {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements | gl.LINE_STRIP}\n * instead of {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements | gl.LINES}\n * @example\n * ```typescript\n * const material = new THREE.LineBasicMaterial({\n *     color: 0x0000ff\n * });\n * const points = [];\n * points.push(new THREE.Vector3(-10, 0, 0));\n * points.push(new THREE.Vector3(0, 10, 0));\n * points.push(new THREE.Vector3(10, 0, 0));\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const {@link Line} = new THREE.Line(geometry, material);\n * scene.add(line);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/Line | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/Line.js | Source}\n */\nexport class Line<\n    TGeometry extends BufferGeometry = BufferGeometry,\n    TMaterial extends Material | Material[] = Material | Material[],\n    TEventMap extends Object3DEventMap = Object3DEventMap,\n> extends Object3D<TEventMap> {\n    /**\n     * Create a new instance of {@link Line}\n     * @param geometry Vertices representing the {@link Line} segment(s). Default {@link THREE.BufferGeometry | `new THREE.BufferGeometry()`}.\n     * @param material Material for the line. Default {@link THREE.LineBasicMaterial | `new THREE.LineBasicMaterial()`}.\n     */\n    constructor(geometry?: TGeometry, material?: TMaterial);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Line}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLine: true;\n\n    /**\n     * @override\n     * @defaultValue `Line`\n     */\n    override readonly type: string | \"Line\";\n\n    /**\n     * Vertices representing the {@link Line} segment(s).\n     */\n    geometry: TGeometry;\n\n    /**\n     * Material for the line.\n     */\n    material: TMaterial;\n\n    /**\n     * An array of weights typically from `0-1` that specify how much of the morph is applied.\n     * @defaultValue `undefined`, but reset to a blank array by {@link updateMorphTargets | .updateMorphTargets()}.\n     */\n    morphTargetInfluences?: number[] | undefined;\n\n    /**\n     * A dictionary of morphTargets based on the `morphTarget.name` property.\n     * @defaultValue `undefined`, but reset to a blank array by {@link updateMorphTargets | .updateMorphTargets()}.\n     */\n    morphTargetDictionary?: { [key: string]: number } | undefined;\n\n    /**\n     * Computes an array of distance values which are necessary for {@link THREE.LineDashedMaterial | LineDashedMaterial}\n     * @remarks\n     * For each vertex in the geometry, the method calculates the cumulative length from the current point to the very beginning of the line.\n     */\n    computeLineDistances(): this;\n\n    /**\n     * Updates the morphTargets to have no influence on the object\n     * @remarks\n     * Resets the {@link morphTargetInfluences | .morphTargetInfluences} and {@link morphTargetDictionary | .morphTargetDictionary} properties.\n     */\n    updateMorphTargets(): void;\n}\n",
      "@types/three@~0/src/objects/LineLoop.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Line } from \"./Line.d.ts\";\n\n/**\n * A continuous line that connects back to the start.\n * @remarks\n * This is nearly the same as {@link THREE.Line | Line},\n * the only difference is that it is rendered using {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements | gl.LINE_LOOP}\n * instead of {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements | gl.LINE_STRIP},\n * which draws a straight line to the next vertex, and connects the last vertex back to the first.\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/LineLoop | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/LineLoop.js | Source}\n */\nexport class LineLoop<\n    TGeometry extends BufferGeometry = BufferGeometry,\n    TMaterial extends Material | Material[] = Material | Material[],\n    TEventMap extends Object3DEventMap = Object3DEventMap,\n> extends Line<TGeometry, TMaterial, TEventMap> {\n    /**\n     * Create a new instance of {@link LineLoop}\n     * @param geometry  List of vertices representing points on the line loop. Default {@link THREE.BufferGeometry | `new THREE.BufferGeometry()`}.\n     * @param material Material for the line. Default {@link THREE.LineBasicMaterial | `new THREE.LineBasicMaterial()`}.\n     */\n    constructor(geometry?: TGeometry, material?: TMaterial);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LineLoop}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLineLoop: true;\n\n    /**\n     * @override\n     * @defaultValue `LineLoop`\n     */\n    override readonly type: string | \"LineLoop\";\n}\n",
      "@types/three@~0/src/objects/LineSegments.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Line } from \"./Line.d.ts\";\n\n/**\n * A series of lines drawn between pairs of vertices.\n * @remarks\n * This is nearly the same as {@link THREE.Line | Line},\n * the only difference is that it is rendered using {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements | gl.LINES}\n * instead of {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements | gl.LINE_STRIP}.\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/LineSegments | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/LineSegments.js | Source}\n */\nexport class LineSegments<\n    TGeometry extends BufferGeometry = BufferGeometry,\n    TMaterial extends Material | Material[] = Material | Material[],\n    TEventMap extends Object3DEventMap = Object3DEventMap,\n> extends Line<TGeometry, TMaterial, TEventMap> {\n    /**\n     * Create a new instance of {@link LineSegments}\n     * @param geometry Pair(s) of vertices representing each line segment(s). Default {@link THREE.BufferGeometry | `new THREE.BufferGeometry()`}.\n     * @param material Material for the line. Default {@link THREE.LineBasicMaterial | `new THREE.LineBasicMaterial()`}.\n     */\n    constructor(geometry?: TGeometry, material?: TMaterial);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LineSegments}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLineSegments: true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @override\n     * @defaultValue `LineSegments`\n     */\n    override readonly type: string | \"LineSegments\";\n}\n",
      "@types/three@~0/src/objects/LOD.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport { Object3D, Object3DEventMap } from \"../core/Object3D.d.ts\";\n\n/**\n * Every level is associated with an object, and rendering can be switched between them at the distances specified\n * @remarks\n * Typically you would create, say, three meshes, one for far away (low detail), one for mid range (medium detail) and one for close up (high detail).\n * @example\n * ```typescript\n * const {@link LOD} = new THREE.LOD();\n * //Create spheres with 3 levels of detail and create new {@link LOD} levels for them\n * for (let i = 0; i & lt; 3; i++) {\n *     const geometry = new THREE.IcosahedronGeometry(10, 3 - i)\n *     const mesh = new THREE.Mesh(geometry, material);\n *     lod.addLevel(mesh, i * 75);\n * }\n * scene.add(lod);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_lod | webgl / {@link LOD} }\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/LOD | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/LOD.js | Source}\n */\nexport class LOD<TEventMap extends Object3DEventMap = Object3DEventMap> extends Object3D<TEventMap> {\n    /**\n     * Creates a new {@link LOD}.\n     */\n    constructor();\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LOD}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLOD: true;\n\n    /**\n     * @override\n     * @defaultValue `LOD`\n     */\n    override readonly type: string | \"LOD\";\n\n    /**\n     * An array of level objects\n     */\n    levels: Array<{\n        /** The Object3D to display at this level. */\n        object: Object3D;\n        /** The distance at which to display this level of detail. Expects a `Float`. */\n        distance: number;\n        /** Threshold used to avoid flickering at LOD boundaries, as a fraction of distance. Expects a `Float`. */\n        hysteresis: number;\n    }>;\n\n    /**\n     * Whether the {@link LOD} object is updated automatically by the renderer per frame or not.\n     * If set to `false`, you have to call {@link update | .update()} in the render loop by yourself.\n     * @defaultValue `true`\n     */\n    autoUpdate: boolean;\n\n    /**\n     * Adds a mesh that will display at a certain distance and greater. Typically the further away the distance, the lower the detail on the mesh.\n     *\n     * @param object The Object3D to display at this level.\n     * @param distance The distance at which to display this level of detail. Expects a `Float`. Default `0.0`.\n     * @param hysteresis Threshold used to avoid flickering at LOD boundaries, as a fraction of distance. Expects a `Float`. Default `0.0`.\n     */\n    addLevel(object: Object3D, distance?: number, hysteresis?: number): this;\n\n    /**\n     * Get the currently active {@link LOD} level\n     * @remarks\n     * As index of the levels array.\n     */\n    getCurrentLevel(): number;\n\n    /**\n     * Get a reference to the first {@link THREE.Object3D | Object3D} (mesh) that is greater than {@link distance}.\n     * @param distance Expects a `Float`\n     */\n    getObjectForDistance(distance: number): Object3D | null;\n\n    /**\n     * Set the visibility of each {@link levels | level}'s {@link THREE.Object3D | object} based on distance from the {@link THREE.Camera | camera}.\n     * @param camera\n     */\n    update(camera: Camera): void;\n}\n",
      "@types/three@~0/src/objects/Mesh.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3D, Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\n\n/**\n * Class representing triangular {@link https://en.wikipedia.org/wiki/Polygon_mesh | polygon mesh} based objects.\n * @remarks\n * Also serves as a base for other classes such as {@link THREE.SkinnedMesh | SkinnedMesh},  {@link THREE.InstancedMesh | InstancedMesh}.\n * @example\n * ```typescript\n * const geometry = new THREE.BoxGeometry(1, 1, 1);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const {@link Mesh} = new THREE.Mesh(geometry, material);\n * scene.add(mesh);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/Mesh | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/Mesh.js | Source}\n */\nexport class Mesh<\n    TGeometry extends BufferGeometry = BufferGeometry,\n    TMaterial extends Material | Material[] = Material | Material[],\n    TEventMap extends Object3DEventMap = Object3DEventMap,\n> extends Object3D<TEventMap> {\n    /**\n     * Create a new instance of {@link Mesh}\n     * @param geometry An instance of {@link THREE.BufferGeometry | BufferGeometry}. Default {@link THREE.BufferGeometry | `new THREE.BufferGeometry()`}.\n     * @param material A single or an array of {@link THREE.Material | Material}. Default {@link THREE.MeshBasicMaterial | `new THREE.MeshBasicMaterial()`}.\n     */\n    constructor(geometry?: TGeometry, material?: TMaterial);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Mesh}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMesh: true;\n\n    /**\n     * @override\n     * @defaultValue `Mesh`\n     */\n    override readonly type: string | \"Mesh\";\n\n    /**\n     * An instance of {@link THREE.BufferGeometry | BufferGeometry} (or derived classes), defining the object's structure.\n     * @defaultValue {@link THREE.BufferGeometry | `new THREE.BufferGeometry()`}.\n     */\n    geometry: TGeometry;\n\n    /**\n     * An instance of material derived from the {@link THREE.Material | Material} base class or an array of materials, defining the object's appearance.\n     * @defaultValue {@link THREE.MeshBasicMaterial | `new THREE.MeshBasicMaterial()`}.\n     */\n    material: TMaterial;\n\n    /**\n     * An array of weights typically from `0-1` that specify how much of the morph is applied.\n     * @defaultValue `undefined`, _but reset to a blank array by {@link updateMorphTargets | .updateMorphTargets()}._\n     */\n    morphTargetInfluences?: number[] | undefined;\n\n    /**\n     * A dictionary of morphTargets based on the `morphTarget.name` property.\n     * @defaultValue `undefined`, _but rebuilt by {@link updateMorphTargets | .updateMorphTargets()}._\n     */\n    morphTargetDictionary?: { [key: string]: number } | undefined;\n\n    /**\n     * Updates the morphTargets to have no influence on the object\n     * @remarks Resets the {@link morphTargetInfluences} and {@link morphTargetDictionary} properties.\n     */\n    updateMorphTargets(): void;\n\n    /**\n     * Get the local-space position of the vertex at the given index,\n     * taking into account the current animation state of both morph targets and skinning.\n     * @param index Expects a `Integer`\n     * @param target\n     */\n    getVertexPosition(index: number, target: Vector3): Vector3;\n}\n",
      "@types/three@~0/src/objects/Points.d.ts": "import { BufferAttribute } from \"../core/BufferAttribute.d.ts\";\nimport { BufferGeometry, NormalOrGLBufferAttributes } from \"../core/BufferGeometry.d.ts\";\nimport { GLBufferAttribute } from \"../core/GLBufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"../core/InterleavedBufferAttribute.d.ts\";\nimport { Object3D, Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\n\n/**\n * A class for displaying {@link Points}\n * @remarks\n * The {@link Points} are rendered by the {@link THREE.WebGLRenderer | WebGLRenderer} using {@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements | gl.POINTS}.\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/Points | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js | Source}\n */\nexport class Points<\n    TGeometry extends BufferGeometry<NormalOrGLBufferAttributes> = BufferGeometry,\n    TMaterial extends Material | Material[] = Material | Material[],\n    TEventMap extends Object3DEventMap = Object3DEventMap,\n> extends Object3D<TEventMap> {\n    /**\n     * Create a new instance of {@link Points}\n     * @param geometry An instance of {@link THREE.BufferGeometry | BufferGeometry}. Default {@link THREE.BufferGeometry | `new THREE.BufferGeometry()`}.\n     * @param material A single or an array of {@link THREE.Material | Material}. Default {@link THREE.PointsMaterial | `new THREE.PointsMaterial()`}.\n     */\n    constructor(geometry?: TGeometry, material?: TMaterial);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Points}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isPoints: true;\n\n    /**\n     * @override\n     * @defaultValue `Points`\n     */\n    override readonly type: string | \"Points\";\n\n    /**\n     * An array of weights typically from `0-1` that specify how much of the morph is applied.\n     * @defaultValue `undefined`, _but reset to a blank array by {@link updateMorphTargets | .updateMorphTargets()}._\n     */\n    morphTargetInfluences?: number[] | undefined;\n\n    /**\n     * A dictionary of morphTargets based on the `morphTarget.name` property.\n     * @defaultValue `undefined`, _but rebuilt by {@link updateMorphTargets | .updateMorphTargets()}._\n     */\n    morphTargetDictionary?: { [key: string]: number } | undefined;\n\n    /**\n     * An instance of {@link THREE.BufferGeometry | BufferGeometry} (or derived classes), defining the object's structure.\n     * @remarks each vertex designates the position of a particle in the system.\n     */\n    geometry: TGeometry;\n\n    /**\n     * An instance of {@link THREE.Material | Material}, defining the object's appearance.\n     * @defaultValue {@link THREE.PointsMaterial | `new THREE.PointsMaterial()`}, _with randomised colour_.\n     */\n    material: TMaterial;\n\n    /**\n     * Updates the morphTargets to have no influence on the object\n     * @remarks Resets the {@link morphTargetInfluences} and {@link morphTargetDictionary} properties.\n     */\n    updateMorphTargets(): void;\n}\n",
      "@types/three@~0/src/objects/Skeleton.d.ts": "import { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { DataTexture } from \"../textures/DataTexture.d.ts\";\nimport { Bone } from \"./Bone.d.ts\";\n\n/**\n * Use an array of {@link Bone | bones} to create a {@link Skeleton} that can be used by a {@link THREE.SkinnedMesh | SkinnedMesh}.\n * @example\n * ```typescript\n * // Create a simple \"arm\"\n * const bones = [];\n * const shoulder = new THREE.Bone();\n * const elbow = new THREE.Bone();\n * const hand = new THREE.Bone();\n * shoulder.add(elbow);\n * elbow.add(hand);\n * bones.push(shoulder);\n * bones.push(elbow);\n * bones.push(hand);\n * shoulder.position.y = -5;\n * elbow.position.y = 0;\n * hand.position.y = 5;\n * const armSkeleton = new THREE.Skeleton(bones);\n * See the[page: SkinnedMesh] page\n * for an example of usage with standard[page: BufferGeometry].\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/Skeleton | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/Skeleton.js | Source}\n */\nexport class Skeleton {\n    /**\n     * Creates a new Skeleton.\n     * @param bones The array of {@link THREE.Bone | bones}. Default `[]`.\n     * @param boneInverses An array of {@link THREE.Matrix4 | Matrix4s}. Default `[]`.\n     */\n    constructor(bones?: Bone[], boneInverses?: Matrix4[]);\n\n    /**\n     * {@link http://en.wikipedia.org/wiki/Universally_unique_identifier | UUID} of this object instance.\n     * @remarks This gets automatically assigned and shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * The array of {@link THREE.Bone | Bones}.\n     * @remarks Note this is a copy of the original array, not a reference, so you can modify the original array without effecting this one.\n     */\n    bones: Bone[];\n\n    /**\n     * An array of {@link Matrix4 | Matrix4s} that represent the inverse of the {@link THREE.Matrix4 | matrixWorld} of the individual bones.\n     */\n    boneInverses: Matrix4[];\n\n    /**\n     * The array buffer holding the bone data when using a vertex texture.\n     */\n    boneMatrices: Float32Array;\n\n    /**\n     * The {@link THREE.DataTexture | DataTexture} holding the bone data when using a vertex texture.\n     */\n    boneTexture: null | DataTexture;\n\n    frame: number;\n\n    init(): void;\n\n    /**\n     * Generates the {@link boneInverses} array if not provided in the constructor.\n     */\n    calculateInverses(): void;\n\n    /**\n     * Computes an instance of {@link THREE.DataTexture | DataTexture} in order to pass the bone data more efficiently to the shader\n     * @remarks\n     * The texture is assigned to {@link boneTexture}.\n     */\n    computeBoneTexture(): this;\n\n    /**\n     * Returns the skeleton to the base pose.\n     */\n    pose(): void;\n\n    /**\n     * Updates the {@link boneMatrices} and {@link boneTexture} after changing the bones\n     * @remarks\n     * This is called automatically by the {@link THREE.WebGLRenderer | WebGLRenderer} if the {@link Skeleton} is used with a {@link THREE.SkinnedMesh | SkinnedMesh}.\n     */\n    update(): void;\n\n    /**\n     * Returns a clone of this {@link Skeleton} object.\n     */\n    clone(): Skeleton;\n\n    /**\n     * Searches through the skeleton's bone array and returns the first with a matching name.\n     * @param name String to match to the Bone's {@link THREE.Bone.name | .name} property.\n     */\n    getBoneByName(name: string): undefined | Bone;\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks\n     * Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n\n    toJSON(): unknown;\n\n    fromJSON(json: unknown, bones: Record<string, Bone>): void;\n}\n",
      "@types/three@~0/src/objects/SkinnedMesh.d.ts": "import { BindMode } from \"../constants.d.ts\";\nimport { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Box3 } from \"../math/Box3.d.ts\";\nimport { Matrix4 } from \"../math/Matrix4.d.ts\";\nimport { Sphere } from \"../math/Sphere.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Mesh } from \"./Mesh.d.ts\";\nimport { Skeleton } from \"./Skeleton.d.ts\";\n\n/**\n * A mesh that has a {@link THREE.Skeleton | Skeleton} with {@link Bone | bones} that can then be used to animate the vertices of the geometry.\n * @example\n * ```typescript\n * const geometry = new THREE.CylinderGeometry(5, 5, 5, 5, 15, 5, 30);\n * // create the skin indices and skin weights manually\n * // (typically a loader would read this data from a 3D model for you)\n * const position = geometry.attributes.position;\n * const vertex = new THREE.Vector3();\n * const skinIndices = [];\n * const skinWeights = [];\n * for (let i = 0; i & lt; position.count; i++) {\n *     vertex.fromBufferAttribute(position, i);\n *     // compute skinIndex and skinWeight based on some configuration data\n *     const y = (vertex.y + sizing.halfHeight);\n *     const skinIndex = Math.floor(y / sizing.segmentHeight);\n *     const skinWeight = (y % sizing.segmentHeight) / sizing.segmentHeight;\n *     skinIndices.push(skinIndex, skinIndex + 1, 0, 0);\n *     skinWeights.push(1 - skinWeight, skinWeight, 0, 0);\n * }\n * geometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4));\n * geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4));\n * // create skinned mesh and skeleton\n * const mesh = new THREE.SkinnedMesh(geometry, material);\n * const skeleton = new THREE.Skeleton(bones);\n * // see example from THREE.Skeleton\n * const rootBone = skeleton.bones[0];\n * mesh.add(rootBone);\n * // bind the skeleton to the mesh\n * mesh.bind(skeleton);\n * // move the bones and manipulate the model\n * skeleton.bones[0].rotation.x = -0.1;\n * skeleton.bones[1].rotation.x = 0.2;\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/SkinnedMesh | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/SkinnedMesh.js | Source}\n */\nexport class SkinnedMesh<\n    TGeometry extends BufferGeometry = BufferGeometry,\n    TMaterial extends Material | Material[] = Material | Material[],\n    TEventMap extends Object3DEventMap = Object3DEventMap,\n> extends Mesh<TGeometry, TMaterial, TEventMap> {\n    /**\n     * Create a new instance of {@link SkinnedMesh}\n     * @param geometry An instance of {@link THREE.BufferGeometry | BufferGeometry}. Default {@link THREE.BufferGeometry | `new THREE.BufferGeometry()`}.\n     * @param material A single or an array of {@link THREE.Material | Material}. Default {@link THREE.MeshBasicMaterial | `new THREE.MeshBasicMaterial()`}.\n     */\n    constructor(geometry?: TGeometry, material?: TMaterial, useVertexTexture?: boolean);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link SkinnedMesh}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSkinnedMesh: true;\n\n    /**\n     * @override\n     * @defaultValue `SkinnedMesh`\n     */\n    override readonly type: string | \"SkinnedMesh\";\n\n    /**\n     * Either {@link AttachedBindMode} or {@link DetachedBindMode}. {@link AttachedBindMode} means the skinned mesh\n     * shares the same world space as the skeleton. This is not true when using {@link DetachedBindMode} which is useful\n     * when sharing a skeleton across multiple skinned meshes.\n     * @defaultValue `AttachedBindMode`\n     */\n    bindMode: BindMode;\n\n    /**\n     * The base matrix that is used for the bound bone transforms.\n     */\n    bindMatrix: Matrix4;\n    /**\n     * The base matrix that is used for resetting the bound bone transforms.\n     */\n    bindMatrixInverse: Matrix4;\n\n    /**\n     * The bounding box of the SkinnedMesh. Can be calculated with {@link computeBoundingBox | .computeBoundingBox()}.\n     * @default `null`\n     */\n    boundingBox: Box3;\n\n    /**\n     * The bounding box of the SkinnedMesh. Can be calculated with {@link computeBoundingSphere | .computeBoundingSphere()}.\n     * @default `null`\n     */\n    boundingSphere: Sphere;\n\n    /**\n     * {@link THREE.Skeleton | Skeleton} representing the bone hierarchy of the skinned mesh.\n     */\n    skeleton: Skeleton;\n\n    /**\n     * Bind a skeleton to the skinned mesh\n     * @remarks\n     * The bindMatrix gets saved to .bindMatrix property and the .bindMatrixInverse gets calculated.\n     * @param skeleton {@link THREE.Skeleton | Skeleton} created from a {@link Bone | Bones} tree.\n     * @param bindMatrix {@link THREE.Matrix4 | Matrix4} that represents the base transform of the skeleton.\n     */\n    bind(skeleton: Skeleton, bindMatrix?: Matrix4): void;\n\n    /**\n     * Computes the bounding box of the skinned mesh, and updates the {@link .boundingBox} attribute. The bounding box\n     * is not computed by the engine; it must be computed by your app. If the skinned mesh is animated, the bounding box\n     * should be recomputed per frame.\n     */\n    computeBoundingBox(): void;\n\n    /**\n     * Computes the bounding sphere of the skinned mesh, and updates the {@link .boundingSphere} attribute. The bounding\n     * sphere is automatically computed by the engine when it is needed, e.g., for ray casting and view frustum culling.\n     * If the skinned mesh is animated, the bounding sphere should be recomputed per frame.\n     */\n    computeBoundingSphere(): void;\n\n    /**\n     * This method sets the skinned mesh in the rest pose (resets the pose).\n     */\n    pose(): void;\n\n    /**\n     * Normalizes the skin weights.\n     */\n    normalizeSkinWeights(): void;\n\n    /**\n     * Applies the bone transform associated with the given index to the given position vector\n     * @remarks Returns the updated vector.\n     * @param index Expects a `Integer`\n     * @param vector\n     */\n    applyBoneTransform(index: number, vector: Vector3): Vector3;\n}\n",
      "@types/three@~0/src/objects/Sprite.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3D, Object3DEventMap } from \"../core/Object3D.d.ts\";\nimport { SpriteMaterial } from \"../materials/Materials.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\n\n/**\n * A {@link Sprite} is a plane that always faces towards the camera, generally with a partially transparent texture applied.\n * @remarks Sprites do not cast shadows, setting `castShadow = true` will have no effect.\n * @example\n * ```typescript\n * const map = new THREE.TextureLoader().load('sprite.png');\n * const material = new THREE.SpriteMaterial({\n *     map: map\n * });\n * const {@link Sprite} = new THREE.Sprite(material);\n * scene.add(sprite);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/objects/Sprite | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/objects/Sprite.js | Source}\n */\nexport class Sprite<TEventMap extends Object3DEventMap = Object3DEventMap> extends Object3D<TEventMap> {\n    /**\n     * Creates a new Sprite.\n     * @param material An instance of {@link THREE.SpriteMaterial | SpriteMaterial}. Default {@link THREE.SpriteMaterial | `new SpriteMaterial()`}, _with white color_.\n     */\n    constructor(material?: SpriteMaterial);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Sprite}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSprite: true;\n\n    /**\n     * @override\n     * @defaultValue `Sprite`\n     */\n    override readonly type: string | \"Sprite\";\n\n    /**\n     * Whether the object gets rendered into shadow map.\n     * No effect in {@link Sprite}.\n     * @ignore\n     * @hidden\n     * @defaultValue `false`\n     */\n    override castShadow: false;\n\n    geometry: BufferGeometry;\n\n    /**\n     * An instance of {@link THREE.SpriteMaterial | SpriteMaterial}, defining the object's appearance.\n     * @defaultValue {@link THREE.SpriteMaterial | `new SpriteMaterial()`}, _with white color_.\n     */\n    material: SpriteMaterial;\n\n    /**\n     * The sprite's anchor point, and the point around which the {@link Sprite} rotates.\n     * A value of (0.5, 0.5) corresponds to the midpoint of the sprite.\n     * A value of (0, 0) corresponds to the lower left corner of the sprite.\n     * @defaultValue {@link THREE.Vector2 | `new Vector2(0.5, 0.5)`}.\n     */\n    center: Vector2;\n}\n",
      "@types/three@~0/src/renderers/shaders/ShaderChunk.d.ts": "// Renderers / Shaders /////////////////////////////////////////////////////////////////////\nexport const ShaderChunk: {\n    alphahash_fragment: string;\n    alphahash_pars_fragment: string;\n    alphamap_fragment: string;\n    alphamap_pars_fragment: string;\n    alphatest_fragment: string;\n    alphatest_pars_fragment: string;\n    aomap_fragment: string;\n    aomap_pars_fragment: string;\n    batching_pars_vertex: string;\n    begin_vertex: string;\n    beginnormal_vertex: string;\n    bsdfs: string;\n    iridescence_fragment: string;\n    bumpmap_pars_fragment: string;\n    clipping_planes_fragment: string;\n    clipping_planes_pars_fragment: string;\n    clipping_planes_pars_vertex: string;\n    clipping_planes_vertex: string;\n    color_fragment: string;\n    color_pars_fragment: string;\n    color_pars_vertex: string;\n    color_vertex: string;\n    common: string;\n    cube_uv_reflection_fragment: string;\n    defaultnormal_vertex: string;\n    displacementmap_pars_vertex: string;\n    displacementmap_vertex: string;\n    emissivemap_fragment: string;\n    emissivemap_pars_fragment: string;\n    colorspace_fragment: string;\n    colorspace_pars_fragment: string;\n    envmap_fragment: string;\n    envmap_common_pars_fragment: string;\n    envmap_pars_fragment: string;\n    envmap_pars_vertex: string;\n    envmap_physical_pars_fragment: string;\n    envmap_vertex: string;\n    fog_vertex: string;\n    fog_pars_vertex: string;\n    fog_fragment: string;\n    fog_pars_fragment: string;\n    gradientmap_pars_fragment: string;\n    lightmap_pars_fragment: string;\n    lights_lambert_fragment: string;\n    lights_lambert_pars_fragment: string;\n    lights_pars_begin: string;\n    lights_toon_fragment: string;\n    lights_toon_pars_fragment: string;\n    lights_phong_fragment: string;\n    lights_phong_pars_fragment: string;\n    lights_physical_fragment: string;\n    lights_physical_pars_fragment: string;\n    lights_fragment_begin: string;\n    lights_fragment_maps: string;\n    lights_fragment_end: string;\n    logdepthbuf_fragment: string;\n    logdepthbuf_pars_fragment: string;\n    logdepthbuf_pars_vertex: string;\n    logdepthbuf_vertex: string;\n    map_fragment: string;\n    map_pars_fragment: string;\n    map_particle_fragment: string;\n    map_particle_pars_fragment: string;\n    metalnessmap_fragment: string;\n    metalnessmap_pars_fragment: string;\n    morphcolor_vertex: string;\n    morphnormal_vertex: string;\n    morphtarget_pars_vertex: string;\n    morphtarget_vertex: string;\n    normal_fragment_begin: string;\n    normal_fragment_maps: string;\n    normal_pars_fragment: string;\n    normal_pars_vertex: string;\n    normal_vertex: string;\n    normalmap_pars_fragment: string;\n    clearcoat_normal_fragment_begin: string;\n    clearcoat_normal_fragment_maps: string;\n    clearcoat_pars_fragment: string;\n    iridescence_pars_fragment: string;\n    opaque_fragment: string;\n    packing: string;\n    premultiplied_alpha_fragment: string;\n    project_vertex: string;\n    dithering_fragment: string;\n    dithering_pars_fragment: string;\n    roughnessmap_fragment: string;\n    roughnessmap_pars_fragment: string;\n    shadowmap_pars_fragment: string;\n    shadowmap_pars_vertex: string;\n    shadowmap_vertex: string;\n    shadowmask_pars_fragment: string;\n    skinbase_vertex: string;\n    skinning_pars_vertex: string;\n    skinning_vertex: string;\n    skinnormal_vertex: string;\n    specularmap_fragment: string;\n    specularmap_pars_fragment: string;\n    tonemapping_fragment: string;\n    tonemapping_pars_fragment: string;\n    transmission_fragment: string;\n    transmission_pars_fragment: string;\n    uv_pars_fragment: string;\n    uv_pars_vertex: string;\n    uv_vertex: string;\n    worldpos_vertex: string;\n\n    background_vert: string;\n    background_frag: string;\n    backgroundCube_vert: string;\n    backgroundCube_frag: string;\n    cube_vert: string;\n    cube_frag: string;\n    depth_vert: string;\n    depth_frag: string;\n    distanceRGBA_vert: string;\n    distanceRGBA_frag: string;\n    equirect_vert: string;\n    equirect_frag: string;\n    linedashed_vert: string;\n    linedashed_frag: string;\n    meshbasic_vert: string;\n    meshbasic_frag: string;\n    meshlambert_vert: string;\n    meshlambert_frag: string;\n    meshmatcap_vert: string;\n    meshmatcap_frag: string;\n    meshnormal_vert: string;\n    meshnormal_frag: string;\n    meshphong_vert: string;\n    meshphong_frag: string;\n    meshphysical_vert: string;\n    meshphysical_frag: string;\n    meshtoon_vert: string;\n    meshtoon_frag: string;\n    points_vert: string;\n    points_frag: string;\n    shadow_vert: string;\n    shadow_frag: string;\n    sprite_vert: string;\n    sprite_frag: string;\n};\n",
      "@types/three@~0/src/renderers/shaders/ShaderLib.d.ts": "import { IUniform } from \"./UniformsLib.d.ts\";\n\nexport interface ShaderLibShader {\n    uniforms: { [uniform: string]: IUniform };\n    vertexShader: string;\n    fragmentShader: string;\n}\n\nexport let ShaderLib: {\n    [name: string]: ShaderLibShader;\n    basic: ShaderLibShader;\n    lambert: ShaderLibShader;\n    phong: ShaderLibShader;\n    standard: ShaderLibShader;\n    matcap: ShaderLibShader;\n    points: ShaderLibShader;\n    dashed: ShaderLibShader;\n    depth: ShaderLibShader;\n    normal: ShaderLibShader;\n    sprite: ShaderLibShader;\n    background: ShaderLibShader;\n    cube: ShaderLibShader;\n    equirect: ShaderLibShader;\n    distanceRGBA: ShaderLibShader;\n    shadow: ShaderLibShader;\n    physical: ShaderLibShader;\n};\n",
      "@types/three@~0/src/renderers/shaders/UniformsLib.d.ts": "import { Color } from \"../../math/Color.d.ts\";\nimport { Matrix3 } from \"../../math/Matrix3.d.ts\";\nimport { Vector2 } from \"../../math/Vector2.d.ts\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IUniform<TValue = any> {\n    value: TValue;\n}\n\nexport const UniformsLib: {\n    common: {\n        diffuse: IUniform<Color>;\n        opacity: IUniform<number>;\n        map: IUniform<unknown>;\n        mapTransform: IUniform<Matrix3>;\n        alphaMap: IUniform<unknown>;\n        alphaMapTransform: IUniform<Matrix3>;\n        alphaTest: IUniform<number>;\n    };\n    specularmap: {\n        specularMap: IUniform<unknown>;\n        specularMapTransform: IUniform<Matrix3>;\n    };\n    envmap: {\n        envMap: IUniform<unknown>;\n        envMapRotation: IUniform<Matrix3>;\n        flipEnvMap: IUniform<number>;\n        reflectivity: IUniform<number>;\n        ior: IUniform<number>;\n        refractRatio: IUniform<number>;\n    };\n    aomap: {\n        aoMap: IUniform<unknown>;\n        aoMapIntensity: IUniform<number>;\n        aoMapTransform: IUniform<Matrix3>;\n    };\n    lightmap: {\n        lightMap: IUniform<number>;\n        lightMapIntensity: IUniform<number>;\n        lightMapTransform: IUniform<Matrix3>;\n    };\n    bumpmap: {\n        bumpMap: IUniform<unknown>;\n        bumpMapTransform: IUniform<Matrix3>;\n        bumpScale: IUniform<number>;\n    };\n    normalmap: {\n        normalMap: IUniform<unknown>;\n        normalMapTransform: IUniform<Matrix3>;\n        normalScale: IUniform<Vector2>;\n    };\n    displacementmap: {\n        displacementMap: IUniform<unknown>;\n        displacementMapTransform: IUniform<Matrix3>;\n        displacementScale: IUniform<number>;\n        displacementBias: IUniform<number>;\n    };\n    emissivemap: {\n        emissiveMap: IUniform<unknown>;\n        emissiveMapTransform: IUniform<Matrix3>;\n    };\n    metalnessmap: {\n        metalnessMap: IUniform<unknown>;\n        metalnessMapTransform: IUniform<Matrix3>;\n    };\n    roughnessmap: {\n        roughnessMap: IUniform<unknown>;\n        roughnessMapTransform: IUniform<Matrix3>;\n    };\n    gradientmap: {\n        gradientMap: IUniform<unknown>;\n    };\n    fog: {\n        fogDensity: IUniform<number>;\n        fogNear: IUniform<number>;\n        fogFar: IUniform<number>;\n        fogColor: IUniform<Color>;\n    };\n    lights: {\n        ambientLightColor: IUniform<unknown[]>;\n        lightProbe: IUniform<unknown[]>;\n        directionalLights: {\n            value: unknown[];\n            properties: {\n                direction: {};\n                color: {};\n            };\n        };\n        directionalLightShadows: {\n            value: unknown[];\n            properties: {\n                shadowBias: {};\n                shadowNormalBias: {};\n                shadowRadius: {};\n                shadowMapSize: {};\n            };\n        };\n        directionalShadowMap: IUniform<unknown[]>;\n        directionalShadowMatrix: IUniform<unknown[]>;\n        spotLights: {\n            value: unknown[];\n            properties: {\n                color: {};\n                position: {};\n                direction: {};\n                distance: {};\n                coneCos: {};\n                penumbraCos: {};\n                decay: {};\n            };\n        };\n        spotLightShadows: {\n            value: unknown[];\n            properties: {\n                shadowBias: {};\n                shadowNormalBias: {};\n                shadowRadius: {};\n                shadowMapSize: {};\n            };\n        };\n        spotLightMap: IUniform<unknown[]>;\n        spotShadowMap: IUniform<unknown[]>;\n        spotLightMatrix: IUniform<unknown[]>;\n        pointLights: {\n            value: unknown[];\n            properties: {\n                color: {};\n                position: {};\n                decay: {};\n                distance: {};\n            };\n        };\n        pointLightShadows: {\n            value: unknown[];\n            properties: {\n                shadowBias: {};\n                shadowNormalBias: {};\n                shadowRadius: {};\n                shadowMapSize: {};\n                shadowCameraNear: {};\n                shadowCameraFar: {};\n            };\n        };\n        pointShadowMap: IUniform<unknown[]>;\n        pointShadowMatrix: IUniform<unknown[]>;\n        hemisphereLights: {\n            value: unknown[];\n            properties: {\n                direction: {};\n                skycolor: {};\n                groundColor: {};\n            };\n        };\n        rectAreaLights: {\n            value: unknown[];\n            properties: {\n                color: {};\n                position: {};\n                width: {};\n                height: {};\n            };\n        };\n        ltc_1: IUniform<unknown>;\n        ltc_2: IUniform<unknown>;\n    };\n    points: {\n        diffuse: IUniform<Color>;\n        opacity: IUniform<number>;\n        size: IUniform<number>;\n        scale: IUniform<number>;\n        map: IUniform<unknown>;\n        alphaMap: IUniform<unknown>;\n        alphaTest: IUniform<number>;\n        uvTransform: IUniform<Matrix3>;\n    };\n    sprite: {\n        diffuse: IUniform<Color>;\n        opacity: IUniform<number>;\n        center: IUniform<Vector2>;\n        rotation: IUniform<number>;\n        map: IUniform<unknown>;\n        mapTransform: IUniform<Matrix3>;\n        alphaMap: IUniform<unknown>;\n        alphaTest: IUniform<number>;\n    };\n};\n",
      "@types/three@~0/src/renderers/shaders/UniformsUtils.d.ts": "import { UniformsGroup } from \"../../core/UniformsGroup.d.ts\";\nimport { IUniform } from \"./UniformsLib.d.ts\";\n\nexport function cloneUniforms<T extends { [uniform: string]: IUniform }>(uniformsSrc: T): T;\nexport function mergeUniforms(uniforms: Array<{ [uniform: string]: IUniform }>): { [uniform: string]: IUniform };\n\nexport function cloneUniformsGroups(src: UniformsGroup[]): UniformsGroup[];\n\nexport namespace UniformsUtils {\n    export { cloneUniforms as clone, mergeUniforms as merge };\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLBufferRenderer.d.ts": "import { WebGLExtensions } from \"./WebGLExtensions.d.ts\";\nimport { WebGLInfo } from \"./WebGLInfo.d.ts\";\n\nexport class WebGLBufferRenderer {\n    constructor(\n        gl: WebGLRenderingContext,\n        extensions: WebGLExtensions,\n        info: WebGLInfo,\n    );\n\n    setMode: (value: any) => void;\n    render: (start: any, count: number) => void;\n    renderInstances: (start: any, count: number, primcount: number) => void;\n    renderMultiDraw: (starts: Int32Array, counts: Int32Array, drawCount: number) => void;\n    renderMultiDrawInstances: (\n        starts: Int32Array,\n        counts: Int32Array,\n        drawCount: number,\n        primcount: Int32Array,\n    ) => void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLCapabilities.d.ts": "import { PixelFormat, TextureDataType } from \"../../constants.d.ts\";\n\nexport interface WebGLCapabilitiesParameters {\n    precision?: string | undefined;\n    logarithmicDepthBuffer?: boolean | undefined;\n}\n\nexport class WebGLCapabilities {\n    constructor(gl: WebGLRenderingContext, extensions: any, parameters: WebGLCapabilitiesParameters);\n\n    readonly isWebGL2: boolean;\n\n    getMaxAnisotropy: () => number;\n    getMaxPrecision: (precision: string) => string;\n\n    textureFormatReadable: (textureFormat: PixelFormat) => boolean;\n    textureTypeReadable: (textureType: TextureDataType) => boolean;\n\n    precision: string;\n    logarithmicDepthBuffer: boolean;\n\n    maxTextures: number;\n    maxVertexTextures: number;\n    maxTextureSize: number;\n    maxCubemapSize: number;\n\n    maxAttributes: number;\n    maxVertexUniforms: number;\n    maxVaryings: number;\n    maxFragmentUniforms: number;\n\n    vertexTextures: boolean;\n\n    maxSamples: number;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLClipping.d.ts": "import { Camera } from \"../../cameras/Camera.d.ts\";\nimport { Material } from \"../../materials/Material.d.ts\";\nimport { Plane } from \"../../math/Plane.d.ts\";\nimport { WebGLProperties } from \"./WebGLProperties.d.ts\";\n\nexport class WebGLClipping {\n    constructor(properties: WebGLProperties);\n\n    uniform: { value: any; needsUpdate: boolean };\n\n    /**\n     * @default 0\n     */\n    numPlanes: number;\n\n    /**\n     * @default 0\n     */\n    numIntersection: number;\n\n    init(planes: any[], enableLocalClipping: boolean): boolean;\n    beginShadows(): void;\n    endShadows(): void;\n    setGlobalState(planes: Plane[], camera: Camera): void;\n    setState(material: Material, camera: Camera, useCache: boolean): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLCubeUVMaps.d.ts": "import { Texture } from \"../../textures/Texture.d.ts\";\nimport { WebGLRenderer } from \"../WebGLRenderer.d.ts\";\n\nexport class WebGLCubeUVMaps {\n    constructor(renderer: WebGLRenderer);\n\n    get<T>(texture: T): T extends Texture ? Texture : T;\n    dispose(): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLExtensions.d.ts": "export class WebGLExtensions {\n    constructor(gl: WebGLRenderingContext);\n\n    has(name: string): boolean;\n    init(): void;\n    get(name: string): any;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLGeometries.d.ts": "import { BufferAttribute } from \"../../core/BufferAttribute.d.ts\";\nimport { BufferGeometry } from \"../../core/BufferGeometry.d.ts\";\nimport { Object3D } from \"../../core/Object3D.d.ts\";\nimport { WebGLAttributes } from \"./WebGLAttributes.d.ts\";\nimport { WebGLInfo } from \"./WebGLInfo.d.ts\";\n\nexport class WebGLGeometries {\n    constructor(gl: WebGLRenderingContext, attributes: WebGLAttributes, info: WebGLInfo);\n\n    get(object: Object3D, geometry: BufferGeometry): BufferGeometry;\n    update(geometry: BufferGeometry): void;\n    getWireframeAttribute(geometry: BufferGeometry): BufferAttribute;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLIndexedBufferRenderer.d.ts": "export class WebGLIndexedBufferRenderer {\n    constructor(gl: WebGLRenderingContext, extensions: any, info: any);\n\n    setMode: (value: any) => void;\n    setIndex: (index: any) => void;\n    render: (start: any, count: number) => void;\n    renderInstances: (start: any, count: number, primcount: number) => void;\n    renderMultiDraw: (starts: Int32Array, counts: Int32Array, drawCount: number) => void;\n    renderMultiDrawInstances: (\n        starts: Int32Array,\n        counts: Int32Array,\n        drawCount: number,\n        primcount: Int32Array,\n    ) => void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLInfo.d.ts": "import { WebGLProgram } from \"./WebGLProgram.d.ts\";\n\n/**\n * An object with a series of statistical information about the graphics board memory and the rendering process.\n */\nexport class WebGLInfo {\n    constructor(gl: WebGLRenderingContext);\n\n    /**\n     * @default true\n     */\n    autoReset: boolean;\n\n    /**\n     * @default { geometries: 0, textures: 0 }\n     */\n    memory: {\n        geometries: number;\n        textures: number;\n    };\n\n    /**\n     * @default null\n     */\n    programs: WebGLProgram[] | null;\n\n    /**\n     * @default { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 }\n     */\n    render: {\n        calls: number;\n        frame: number;\n        lines: number;\n        points: number;\n        triangles: number;\n    };\n    update(count: number, mode: number, instanceCount: number): void;\n    reset(): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLLights.d.ts": "import { WebGLExtensions } from \"./WebGLExtensions.d.ts\";\n\nexport interface WebGLLightsState {\n    version: number;\n\n    hash: {\n        directionalLength: number;\n        pointLength: number;\n        spotLength: number;\n        rectAreaLength: number;\n        hemiLength: number;\n\n        numDirectionalShadows: number;\n        numPointShadows: number;\n        numSpotShadows: number;\n        numSpotMaps: number;\n\n        numLightProbes: number;\n    };\n\n    ambient: number[];\n    probe: any[];\n    directional: any[];\n    directionalShadow: any[];\n    directionalShadowMap: any[];\n    directionalShadowMatrix: any[];\n    spot: any[];\n    spotShadow: any[];\n    spotShadowMap: any[];\n    spotShadowMatrix: any[];\n    rectArea: any[];\n    point: any[];\n    pointShadow: any[];\n    pointShadowMap: any[];\n    pointShadowMatrix: any[];\n    hemi: any[];\n    numSpotLightShadowsWithMaps: number;\n    numLightProbes: number;\n}\n\nexport class WebGLLights {\n    constructor(extensions: WebGLExtensions);\n\n    state: WebGLLightsState;\n\n    get(light: any): any;\n    setup(lights: any): void;\n    setupView(lights: any, camera: any): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLObjects.d.ts": "export class WebGLObjects {\n    constructor(gl: WebGLRenderingContext, geometries: any, attributes: any, info: any);\n\n    update(object: any): any;\n    dispose(): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLProgram.d.ts": "import { WebGLRenderer } from \"../WebGLRenderer.d.ts\";\nimport { WebGLUniforms } from \"./WebGLUniforms.d.ts\";\n\nexport class WebGLProgram {\n    constructor(renderer: WebGLRenderer, cacheKey: string, parameters: object);\n\n    name: string;\n    id: number;\n    cacheKey: string; // unique identifier for this program, used for looking up compiled programs from cache.\n\n    /**\n     * @default 1\n     */\n    usedTimes: number;\n    program: any;\n    vertexShader: WebGLShader;\n    fragmentShader: WebGLShader;\n    /**\n     * @deprecated Use {@link WebGLProgram#getUniforms getUniforms()} instead.\n     */\n    uniforms: any;\n    /**\n     * @deprecated Use {@link WebGLProgram#getAttributes getAttributes()} instead.\n     */\n    attributes: any;\n\n    getUniforms(): WebGLUniforms;\n    getAttributes(): any;\n    destroy(): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLPrograms.d.ts": "import {\n    ColorSpace,\n    Combine,\n    DepthPackingStrategies,\n    GLSLVersion,\n    Mapping,\n    ShadowMapType,\n    ToneMapping,\n} from \"../../constants.d.ts\";\nimport { Object3D } from \"../../core/Object3D.d.ts\";\nimport { Light } from \"../../lights/Light.d.ts\";\nimport { Material } from \"../../materials/Material.d.ts\";\nimport { Scene } from \"../../scenes/Scene.d.ts\";\nimport { IUniform } from \"../shaders/UniformsLib.d.ts\";\nimport { WebGLRenderer } from \"../WebGLRenderer.d.ts\";\nimport { WebGLBindingStates } from \"./WebGLBindingStates.d.ts\";\nimport { WebGLCapabilities } from \"./WebGLCapabilities.d.ts\";\nimport { WebGLClipping } from \"./WebGLClipping.d.ts\";\nimport { WebGLCubeMaps } from \"./WebGLCubeMaps.d.ts\";\nimport { WebGLExtensions } from \"./WebGLExtensions.d.ts\";\nimport { WebGLLightsState } from \"./WebGLLights.d.ts\";\nimport { WebGLProgram } from \"./WebGLProgram.d.ts\";\n\nexport interface WebGLProgramParameters {\n    shaderID: string;\n    shaderType: string;\n    shaderName: string;\n\n    vertexShader: string;\n    fragmentShader: string;\n    defines: { [define: string]: string | number | boolean } | undefined;\n\n    customVertexShaderID: string | undefined;\n    customFragmentShaderID: string | undefined;\n\n    isRawShaderMaterial: boolean;\n    glslVersion: GLSLVersion | null | undefined;\n\n    precision: \"lowp\" | \"mediump\" | \"highp\";\n\n    batching: boolean;\n    instancing: boolean;\n    instancingColor: boolean;\n    instancingMorph: boolean;\n\n    supportsVertexTextures: boolean;\n    outputColorSpace: ColorSpace;\n    alphaToCoverage: boolean;\n\n    map: boolean;\n    matcap: boolean;\n    envMap: boolean;\n    envMapMode: Mapping | false;\n    envMapCubeUVHeight: number | null;\n    aoMap: boolean;\n    lightMap: boolean;\n    bumpMap: boolean;\n    normalMap: boolean;\n    displacementMap: boolean;\n    emissiveMap: boolean;\n\n    normalMapObjectSpace: boolean;\n    normalMapTangentSpace: boolean;\n\n    metalnessMap: boolean;\n    roughnessMap: boolean;\n\n    anisotropy: boolean;\n    anisotropyMap: boolean;\n\n    clearcoat: boolean;\n    clearcoatMap: boolean;\n    clearcoatNormalMap: boolean;\n    clearcoatRoughnessMap: boolean;\n\n    dispersion: boolean;\n\n    iridescence: boolean;\n    iridescenceMap: boolean;\n    iridescenceThicknessMap: boolean;\n\n    sheen: boolean;\n    sheenColorMap: boolean;\n    sheenRoughnessMap: boolean;\n\n    specularMap: boolean;\n    specularColorMap: boolean;\n    specularIntensityMap: boolean;\n\n    transmission: boolean;\n    transmissionMap: boolean;\n    thicknessMap: boolean;\n\n    gradientMap: boolean;\n\n    opaque: boolean;\n\n    alphaMap: boolean;\n    alphaTest: boolean;\n    alphaHash: boolean;\n\n    combine: Combine | undefined;\n\n    //\n\n    mapUv: string | false;\n    aoMapUv: string | false;\n    lightMapUv: string | false;\n    bumpMapUv: string | false;\n    normalMapUv: string | false;\n    displacementMapUv: string | false;\n    emissiveMapUv: string | false;\n\n    metalnessMapUv: string | false;\n    roughnessMapUv: string | false;\n\n    anisotropyMapUv: string | false;\n\n    clearcoatMapUv: string | false;\n    clearcoatNormalMapUv: string | false;\n    clearcoatRoughnessMapUv: string | false;\n\n    iridescenceMapUv: string | false;\n    iridescenceThicknessMapUv: string | false;\n\n    sheenColorMapUv: string | false;\n    sheenRoughnessMapUv: string | false;\n\n    specularMapUv: string | false;\n    specularColorMapUv: string | false;\n    specularIntensityMapUv: string | false;\n\n    transmissionMapUv: string | false;\n    thicknessMapUv: string | false;\n\n    alphaMapUv: string | false;\n\n    //\n\n    vertexTangents: boolean;\n    vertexColors: boolean;\n    vertexAlphas: boolean;\n    vertexUv1s: boolean;\n    vertexUv2s: boolean;\n    vertexUv3s: boolean;\n\n    pointsUvs: boolean;\n\n    fog: boolean;\n    useFog: boolean;\n    fogExp2: boolean;\n\n    flatShading: boolean;\n\n    sizeAttenuation: boolean;\n    logarithmicDepthBuffer: boolean;\n\n    skinning: boolean;\n\n    morphTargets: boolean;\n    morphNormals: boolean;\n    morphColors: boolean;\n    morphTargetsCount: number;\n    morphTextureStride: number;\n\n    numDirLights: number;\n    numPointLights: number;\n    numSpotLights: number;\n    numSpotLightMaps: number;\n    numRectAreaLights: number;\n    numHemiLights: number;\n\n    numDirLightShadows: number;\n    numPointLightShadows: number;\n    numSpotLightShadows: number;\n    numSpotLightShadowsWithMaps: number;\n\n    numLightProbes: number;\n\n    numClippingPlanes: number;\n    numClipIntersection: number;\n\n    dithering: boolean;\n\n    shadowMapEnabled: boolean;\n    shadowMapType: ShadowMapType;\n\n    toneMapping: ToneMapping;\n    useLegacyLights: boolean;\n\n    decodeVideoTexture: boolean;\n\n    premultipliedAlpha: boolean;\n\n    doubleSided: boolean;\n    flipSided: boolean;\n\n    useDepthPacking: boolean;\n    depthPacking: DepthPackingStrategies | 0;\n\n    index0AttributeName: string | undefined;\n\n    extensionClipCullDistance: boolean;\n    extensionMultiDraw: boolean;\n\n    rendererExtensionParallelShaderCompile: boolean;\n\n    customProgramCacheKey: string;\n}\n\nexport interface WebGLProgramParametersWithUniforms extends WebGLProgramParameters {\n    uniforms: { [uniform: string]: IUniform };\n}\n\nexport class WebGLPrograms {\n    constructor(\n        renderer: WebGLRenderer,\n        cubemaps: WebGLCubeMaps,\n        extensions: WebGLExtensions,\n        capabilities: WebGLCapabilities,\n        bindingStates: WebGLBindingStates,\n        clipping: WebGLClipping,\n    );\n\n    programs: WebGLProgram[];\n\n    getParameters(\n        material: Material,\n        lights: WebGLLightsState,\n        shadows: Light[],\n        scene: Scene,\n        object: Object3D,\n    ): WebGLProgramParameters;\n\n    getProgramCacheKey(parameters: WebGLProgramParameters): string;\n    getUniforms(material: Material): { [uniform: string]: IUniform };\n    acquireProgram(parameters: WebGLProgramParametersWithUniforms, cacheKey: string): WebGLProgram;\n    releaseProgram(program: WebGLProgram): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLProperties.d.ts": "export class WebGLProperties {\n    constructor();\n\n    get(object: any): any;\n    remove(object: any): void;\n    update(object: any, key: any, value: any): any;\n    dispose(): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLRenderLists.d.ts": "import { Camera } from \"../../cameras/Camera.d.ts\";\nimport { BufferGeometry } from \"../../core/BufferGeometry.d.ts\";\nimport { Object3D } from \"../../core/Object3D.d.ts\";\nimport { Material } from \"../../materials/Material.d.ts\";\nimport { Group } from \"../../objects/Group.d.ts\";\nimport { Scene } from \"../../scenes/Scene.d.ts\";\nimport { WebGLProgram } from \"./WebGLProgram.d.ts\";\nimport { WebGLProperties } from \"./WebGLProperties.d.ts\";\n\nexport interface RenderItem {\n    id: number;\n    object: Object3D;\n    geometry: BufferGeometry | null;\n    material: Material;\n    program: WebGLProgram;\n    groupOrder: number;\n    renderOrder: number;\n    z: number;\n    group: Group | null;\n}\n\nexport class WebGLRenderList {\n    constructor(properties: WebGLProperties);\n\n    /**\n     * @default []\n     */\n    opaque: RenderItem[];\n\n    /**\n     * @default []\n     */\n    transparent: RenderItem[];\n\n    /**\n     * @default []\n     */\n    transmissive: RenderItem[];\n\n    init(): void;\n    push(\n        object: Object3D,\n        geometry: BufferGeometry | null,\n        material: Material,\n        groupOrder: number,\n        z: number,\n        group: Group | null,\n    ): void;\n    unshift(\n        object: Object3D,\n        geometry: BufferGeometry | null,\n        material: Material,\n        groupOrder: number,\n        z: number,\n        group: Group | null,\n    ): void;\n    sort(opaqueSort: (a: any, b: any) => number, transparentSort: (a: any, b: any) => number): void;\n    finish(): void;\n}\n\nexport class WebGLRenderLists {\n    constructor(properties: WebGLProperties);\n\n    dispose(): void;\n    get(scene: Scene, renderCallDepth: number): WebGLRenderList;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLShader.d.ts": "export function WebGLShader(gl: WebGLRenderingContext, type: string, string: string): WebGLShader;\n",
      "@types/three@~0/src/renderers/webgl/WebGLShadowMap.d.ts": "import { Camera } from \"../../cameras/Camera.d.ts\";\nimport { ShadowMapType } from \"../../constants.d.ts\";\nimport { Light } from \"../../lights/Light.d.ts\";\nimport { Scene } from \"../../scenes/Scene.d.ts\";\nimport { WebGLRenderer } from \"../WebGLRenderer.d.ts\";\nimport { WebGLCapabilities } from \"./WebGLCapabilities.d.ts\";\nimport { WebGLObjects } from \"./WebGLObjects.d.ts\";\n\nexport class WebGLShadowMap {\n    constructor(_renderer: WebGLRenderer, _objects: WebGLObjects, _capabilities: WebGLCapabilities);\n\n    /**\n     * @default false\n     */\n    enabled: boolean;\n\n    /**\n     * @default true\n     */\n    autoUpdate: boolean;\n\n    /**\n     * @default false\n     */\n    needsUpdate: boolean;\n\n    /**\n     * @default THREE.PCFShadowMap\n     */\n    type: ShadowMapType;\n\n    render(shadowsArray: Light[], scene: Scene, camera: Camera): void;\n\n    /**\n     * @deprecated Use {@link Material#shadowSide} instead.\n     */\n    cullFace: any;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLState.d.ts": "import {\n    Blending,\n    BlendingDstFactor,\n    BlendingEquation,\n    BlendingSrcFactor,\n    CullFace,\n    DepthModes,\n} from \"../../constants.d.ts\";\nimport { Material } from \"../../materials/Material.d.ts\";\nimport { Vector4 } from \"../../math/Vector4.d.ts\";\nimport { WebGLRenderTarget } from \"../WebGLRenderTarget.d.ts\";\n\nexport class WebGLColorBuffer {\n    constructor();\n\n    setMask(colorMask: boolean): void;\n    setLocked(lock: boolean): void;\n    setClear(r: number, g: number, b: number, a: number, premultipliedAlpha: boolean): void;\n    reset(): void;\n}\n\nexport class WebGLDepthBuffer {\n    constructor();\n\n    setTest(depthTest: boolean): void;\n    setMask(depthMask: boolean): void;\n    setFunc(depthFunc: DepthModes): void;\n    setLocked(lock: boolean): void;\n    setClear(depth: number): void;\n    reset(): void;\n}\n\nexport class WebGLStencilBuffer {\n    constructor();\n\n    setTest(stencilTest: boolean): void;\n    setMask(stencilMask: number): void;\n    setFunc(stencilFunc: number, stencilRef: number, stencilMask: number): void;\n    setOp(stencilFail: number, stencilZFail: number, stencilZPass: number): void;\n    setLocked(lock: boolean): void;\n    setClear(stencil: number): void;\n    reset(): void;\n}\n\nexport class WebGLState {\n    constructor(gl: WebGLRenderingContext);\n\n    buffers: {\n        color: WebGLColorBuffer;\n        depth: WebGLDepthBuffer;\n        stencil: WebGLStencilBuffer;\n    };\n\n    enable(id: number): void;\n    disable(id: number): void;\n    bindFramebuffer(target: number, framebuffer: WebGLFramebuffer | null): void;\n    drawBuffers(renderTarget: WebGLRenderTarget | null, framebuffer: WebGLFramebuffer | null): void;\n    useProgram(program: any): boolean;\n    setBlending(\n        blending: Blending,\n        blendEquation?: BlendingEquation,\n        blendSrc?: BlendingSrcFactor,\n        blendDst?: BlendingDstFactor,\n        blendEquationAlpha?: BlendingEquation,\n        blendSrcAlpha?: BlendingSrcFactor,\n        blendDstAlpha?: BlendingDstFactor,\n        premultiplyAlpha?: boolean,\n    ): void;\n    setMaterial(material: Material, frontFaceCW: boolean): void;\n    setFlipSided(flipSided: boolean): void;\n    setCullFace(cullFace: CullFace): void;\n    setLineWidth(width: number): void;\n    setPolygonOffset(polygonoffset: boolean, factor?: number, units?: number): void;\n    setScissorTest(scissorTest: boolean): void;\n    activeTexture(webglSlot: number): void;\n    bindTexture(webglType: number, webglTexture: any): void;\n    unbindTexture(): void;\n    // Same interface as https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D\n    compressedTexImage2D(\n        target: number,\n        level: number,\n        internalformat: number,\n        width: number,\n        height: number,\n        border: number,\n        data: ArrayBufferView,\n    ): void;\n    // Same interface as https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n    texImage2D(\n        target: number,\n        level: number,\n        internalformat: number,\n        width: number,\n        height: number,\n        border: number,\n        format: number,\n        type: number,\n        pixels: ArrayBufferView | null,\n    ): void;\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, source: any): void;\n    texImage3D(\n        target: number,\n        level: number,\n        internalformat: number,\n        width: number,\n        height: number,\n        depth: number,\n        border: number,\n        format: number,\n        type: number,\n        pixels: any,\n    ): void;\n    scissor(scissor: Vector4): void;\n    viewport(viewport: Vector4): void;\n    reset(): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLTextures.d.ts": "import { WebGLCapabilities } from \"./WebGLCapabilities.d.ts\";\nimport { WebGLExtensions } from \"./WebGLExtensions.d.ts\";\nimport { WebGLInfo } from \"./WebGLInfo.d.ts\";\nimport { WebGLProperties } from \"./WebGLProperties.d.ts\";\nimport { WebGLState } from \"./WebGLState.d.ts\";\nimport { WebGLUtils } from \"./WebGLUtils.d.ts\";\n\nexport class WebGLTextures {\n    constructor(\n        gl: WebGLRenderingContext,\n        extensions: WebGLExtensions,\n        state: WebGLState,\n        properties: WebGLProperties,\n        capabilities: WebGLCapabilities,\n        utils: WebGLUtils,\n        info: WebGLInfo,\n    );\n\n    allocateTextureUnit(): void;\n    resetTextureUnits(): void;\n    setTexture2D(texture: any, slot: number): void;\n    setTexture2DArray(texture: any, slot: number): void;\n    setTexture3D(texture: any, slot: number): void;\n    setTextureCube(texture: any, slot: number): void;\n    setupRenderTarget(renderTarget: any): void;\n    updateRenderTargetMipmap(renderTarget: any): void;\n    updateMultisampleRenderTarget(renderTarget: any): void;\n    safeSetTexture2D(texture: any, slot: number): void;\n    safeSetTextureCube(texture: any, slot: number): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLUniforms.d.ts": "import { WebGLProgram } from \"./WebGLProgram.d.ts\";\nimport { WebGLTextures } from \"./WebGLTextures.d.ts\";\n\nexport class WebGLUniforms {\n    constructor(gl: WebGLRenderingContext, program: WebGLProgram);\n\n    setValue(gl: WebGLRenderingContext, name: string, value: any, textures: WebGLTextures): void;\n    setOptional(gl: WebGLRenderingContext, object: any, name: string): void;\n\n    static upload(gl: WebGLRenderingContext, seq: any, values: any[], textures: WebGLTextures): void;\n    static seqWithValue(seq: any, values: any[]): any[];\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLUniformsGroups.d.ts": "import { UniformsGroup } from \"../../core/UniformsGroup.d.ts\";\n\nimport { WebGLCapabilities } from \"./WebGLCapabilities.d.ts\";\nimport { WebGLInfo } from \"./WebGLInfo.d.ts\";\nimport { WebGLProgram } from \"./WebGLProgram.d.ts\";\nimport { WebGLState } from \"./WebGLState.d.ts\";\n\nexport function WebGLUniformsGroups(\n    gl: WebGLRenderingContext,\n    info: WebGLInfo,\n    capabilities: WebGLCapabilities,\n    state: WebGLState,\n): {\n    dispose: () => void;\n    update: (uniformsGroup: UniformsGroup, program: WebGLProgram) => void;\n    bind: (uniformsGroup: UniformsGroup, program: WebGLProgram) => void;\n};\n",
      "@types/three@~0/src/renderers/webgl/WebGLUtils.d.ts": "import { ColorSpace, CompressedPixelFormat, PixelFormat, TextureDataType } from \"../../constants.d.ts\";\nimport { WebGLExtensions } from \"./WebGLExtensions.d.ts\";\n\nexport class WebGLUtils {\n    constructor(\n        gl: WebGLRenderingContext | WebGL2RenderingContext,\n        extensions: WebGLExtensions,\n    );\n\n    convert(p: PixelFormat | CompressedPixelFormat | TextureDataType, colorSpace?: ColorSpace): number | null;\n}\n",
      "@types/three@~0/src/renderers/WebGL3DRenderTarget.d.ts": "import { RenderTargetOptions } from \"../core/RenderTarget.d.ts\";\nimport { Data3DTexture } from \"../textures/Data3DTexture.d.ts\";\nimport { WebGLRenderTarget } from \"./WebGLRenderTarget.d.ts\";\n\n/**\n * Represents a three-dimensional render target.\n */\nexport class WebGL3DRenderTarget extends WebGLRenderTarget {\n    /**\n     * Creates a new WebGL3DRenderTarget.\n     *\n     * @param width the width of the render target, in pixels. Default is `1`.\n     * @param height the height of the render target, in pixels. Default is `1`.\n     * @param depth the depth of the render target. Default is `1`.\n     * @param options optional object that holds texture parameters for an auto-generated target texture and\n     * depthBuffer/stencilBuffer booleans. See {@link WebGLRenderTarget} for details.\n     */\n    constructor(width?: number, height?: number, depth?: number, options?: RenderTargetOptions);\n\n    textures: Data3DTexture[];\n\n    /**\n     * The texture property is overwritten with an instance of {@link Data3DTexture}.\n     */\n    get texture(): Data3DTexture;\n    set texture(value: Data3DTexture);\n\n    readonly isWebGL3DRenderTarget: true;\n}\n",
      "@types/three@~0/src/renderers/WebGLArrayRenderTarget.d.ts": "import { RenderTargetOptions } from \"../core/RenderTarget.d.ts\";\nimport { DataArrayTexture } from \"../textures/DataArrayTexture.d.ts\";\nimport { WebGLRenderTarget } from \"./WebGLRenderTarget.d.ts\";\n\n/**\n * This type of render target represents an array of textures.\n */\nexport class WebGLArrayRenderTarget extends WebGLRenderTarget {\n    /**\n     * Creates a new WebGLArrayRenderTarget.\n     *\n     * @param width the width of the render target, in pixels. Default is `1`.\n     * @param height the height of the render target, in pixels. Default is `1`.\n     * @param depth the depth/layer count of the render target. Default is `1`.\n     * @param options optional object that holds texture parameters for an auto-generated target texture and\n     * depthBuffer/stencilBuffer booleans. See {@link WebGLRenderTarget} for details.\n     */\n    constructor(width?: number, height?: number, depth?: number, options?: RenderTargetOptions);\n\n    textures: DataArrayTexture[];\n\n    /**\n     * The texture property is overwritten with an instance of {@link DataArrayTexture}.\n     */\n    get texture(): DataArrayTexture;\n    set texture(value: DataArrayTexture);\n\n    readonly isWebGLArrayRenderTarget: true;\n}\n",
      "@types/three@~0/src/renderers/WebGLCubeRenderTarget.d.ts": "import { RenderTargetOptions } from \"../core/RenderTarget.d.ts\";\nimport { CubeTexture } from \"../textures/CubeTexture.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { WebGLRenderer } from \"./WebGLRenderer.d.ts\";\nimport { WebGLRenderTarget } from \"./WebGLRenderTarget.d.ts\";\n\nexport class WebGLCubeRenderTarget extends WebGLRenderTarget {\n    constructor(size?: number, options?: RenderTargetOptions);\n\n    textures: CubeTexture[];\n\n    get texture(): CubeTexture;\n    set texture(value: CubeTexture);\n\n    fromEquirectangularTexture(renderer: WebGLRenderer, texture: Texture): this;\n\n    clear(renderer: WebGLRenderer, color: boolean, depth: boolean, stencil: boolean): void;\n}\n",
      "@types/three@~0/src/renderers/WebGLRenderer.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport { ColorSpace, CullFace, ShadowMapType, ToneMapping, WebGLCoordinateSystem } from \"../constants.d.ts\";\nimport { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Box3 } from \"../math/Box3.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Plane } from \"../math/Plane.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Vector4 } from \"../math/Vector4.d.ts\";\nimport { Scene } from \"../scenes/Scene.d.ts\";\nimport { Data3DTexture } from \"../textures/Data3DTexture.d.ts\";\nimport { DataArrayTexture } from \"../textures/DataArrayTexture.d.ts\";\nimport { OffscreenCanvas, Texture } from \"../textures/Texture.d.ts\";\nimport { WebGLCapabilities } from \"./webgl/WebGLCapabilities.d.ts\";\nimport { WebGLExtensions } from \"./webgl/WebGLExtensions.d.ts\";\nimport { WebGLInfo } from \"./webgl/WebGLInfo.d.ts\";\nimport { WebGLProgram } from \"./webgl/WebGLProgram.d.ts\";\nimport { WebGLProperties } from \"./webgl/WebGLProperties.d.ts\";\nimport { WebGLRenderLists } from \"./webgl/WebGLRenderLists.d.ts\";\nimport { WebGLShadowMap } from \"./webgl/WebGLShadowMap.d.ts\";\nimport { WebGLState } from \"./webgl/WebGLState.d.ts\";\nimport { WebGLRenderTarget } from \"./WebGLRenderTarget.d.ts\";\nimport { WebXRManager } from \"./webxr/WebXRManager.d.ts\";\n\nexport interface Renderer {\n    domElement: HTMLCanvasElement;\n\n    render(scene: Object3D, camera: Camera): void;\n    setSize(width: number, height: number, updateStyle?: boolean): void;\n}\n\nexport interface WebGLRendererParameters {\n    /**\n     * A Canvas where the renderer draws its output.\n     */\n    canvas?: HTMLCanvasElement | OffscreenCanvas | undefined;\n\n    /**\n     * A WebGL Rendering Context.\n     * (https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext)\n     * Default is null\n     */\n    context?: WebGLRenderingContext | undefined;\n\n    /**\n     * shader precision. Can be \"highp\", \"mediump\" or \"lowp\".\n     */\n    precision?: string | undefined;\n\n    /**\n     * default is false.\n     */\n    alpha?: boolean | undefined;\n\n    /**\n     * default is true.\n     */\n    premultipliedAlpha?: boolean | undefined;\n\n    /**\n     * default is false.\n     */\n    antialias?: boolean | undefined;\n\n    /**\n     * default is false.\n     */\n    stencil?: boolean | undefined;\n\n    /**\n     * default is false.\n     */\n    preserveDrawingBuffer?: boolean | undefined;\n\n    /**\n     * Can be \"high-performance\", \"low-power\" or \"default\"\n     */\n    powerPreference?: string | undefined;\n\n    /**\n     * default is true.\n     */\n    depth?: boolean | undefined;\n\n    /**\n     * default is false.\n     */\n    logarithmicDepthBuffer?: boolean | undefined;\n\n    /**\n     * default is false.\n     */\n    failIfMajorPerformanceCaveat?: boolean | undefined;\n}\n\nexport interface WebGLDebug {\n    /**\n     * Enables error checking and reporting when shader programs are being compiled.\n     */\n    checkShaderErrors: boolean;\n\n    /**\n     * A callback function that can be used for custom error reporting. The callback receives the WebGL context, an\n     * instance of WebGLProgram as well two instances of WebGLShader representing the vertex and fragment shader.\n     * Assigning a custom function disables the default error reporting.\n     * @default `null`\n     */\n    onShaderError:\n        | ((\n            gl: WebGLRenderingContext,\n            program: WebGLProgram,\n            glVertexShader: WebGLShader,\n            glFragmentShader: WebGLShader,\n        ) => void)\n        | null;\n}\n\n/**\n * The WebGL renderer displays your beautifully crafted scenes using WebGL, if your device supports it.\n * This renderer has way better performance than CanvasRenderer.\n *\n * see {@link https://github.com/mrdoob/three.js/blob/master/src/renderers/WebGLRenderer.js|src/renderers/WebGLRenderer.js}\n */\nexport class WebGLRenderer implements Renderer {\n    /**\n     * parameters is an optional object with properties defining the renderer's behaviour.\n     * The constructor also accepts no parameters at all.\n     * In all cases, it will assume sane defaults when parameters are missing.\n     */\n    constructor(parameters?: WebGLRendererParameters);\n\n    /**\n     * A Canvas where the renderer draws its output.\n     * This is automatically created by the renderer in the constructor (if not provided already); you just need to add it to your page.\n     * @default document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' )\n     */\n    domElement: HTMLCanvasElement;\n\n    /**\n     * Defines whether the renderer should automatically clear its output before rendering.\n     * @default true\n     */\n    autoClear: boolean;\n\n    /**\n     * If autoClear is true, defines whether the renderer should clear the color buffer. Default is true.\n     * @default true\n     */\n    autoClearColor: boolean;\n\n    /**\n     * If autoClear is true, defines whether the renderer should clear the depth buffer. Default is true.\n     * @default true\n     */\n    autoClearDepth: boolean;\n\n    /**\n     * If autoClear is true, defines whether the renderer should clear the stencil buffer. Default is true.\n     * @default true\n     */\n    autoClearStencil: boolean;\n\n    /**\n     * Debug configurations.\n     * @default { checkShaderErrors: true }\n     */\n    debug: WebGLDebug;\n\n    /**\n     * Defines whether the renderer should sort objects. Default is true.\n     * @default true\n     */\n    sortObjects: boolean;\n\n    /**\n     * @default []\n     */\n    clippingPlanes: Plane[];\n\n    /**\n     * @default false\n     */\n    localClippingEnabled: boolean;\n\n    extensions: WebGLExtensions;\n\n    /**\n     * Color space used for output to HTMLCanvasElement. Supported values are\n     * {@link SRGBColorSpace} and {@link LinearSRGBColorSpace}.\n     * @default THREE.SRGBColorSpace.\n     */\n    get outputColorSpace(): ColorSpace;\n    set outputColorSpace(colorSpace: ColorSpace);\n\n    get coordinateSystem(): typeof WebGLCoordinateSystem;\n\n    /**\n     * @deprecated Migrate your lighting according to the following guide:\n     * https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.\n     * @default true\n     */\n    useLegacyLights: boolean;\n\n    /**\n     * @default THREE.NoToneMapping\n     */\n    toneMapping: ToneMapping;\n\n    /**\n     * @default 1\n     */\n    toneMappingExposure: number;\n\n    info: WebGLInfo;\n\n    shadowMap: WebGLShadowMap;\n\n    pixelRatio: number;\n\n    capabilities: WebGLCapabilities;\n    properties: WebGLProperties;\n    renderLists: WebGLRenderLists;\n    state: WebGLState;\n\n    xr: WebXRManager;\n\n    /**\n     * Return the WebGL context.\n     */\n    getContext(): WebGLRenderingContext | WebGL2RenderingContext;\n    getContextAttributes(): any;\n    forceContextLoss(): void;\n    forceContextRestore(): void;\n\n    /**\n     * @deprecated Use {@link WebGLCapabilities#getMaxAnisotropy .capabilities.getMaxAnisotropy()} instead.\n     */\n    getMaxAnisotropy(): number;\n\n    /**\n     * @deprecated Use {@link WebGLCapabilities#precision .capabilities.precision} instead.\n     */\n    getPrecision(): string;\n\n    getPixelRatio(): number;\n    setPixelRatio(value: number): void;\n\n    getDrawingBufferSize(target: Vector2): Vector2;\n    setDrawingBufferSize(width: number, height: number, pixelRatio: number): void;\n\n    getSize(target: Vector2): Vector2;\n\n    /**\n     * Resizes the output canvas to (width, height), and also sets the viewport to fit that size, starting in (0, 0).\n     */\n    setSize(width: number, height: number, updateStyle?: boolean): void;\n\n    getCurrentViewport(target: Vector4): Vector4;\n\n    /**\n     * Copies the viewport into target.\n     */\n    getViewport(target: Vector4): Vector4;\n\n    /**\n     * Sets the viewport to render from (x, y) to (x + width, y + height).\n     * (x, y) is the lower-left corner of the region.\n     */\n    setViewport(x: Vector4 | number, y?: number, width?: number, height?: number): void;\n\n    /**\n     * Copies the scissor area into target.\n     */\n    getScissor(target: Vector4): Vector4;\n\n    /**\n     * Sets the scissor area from (x, y) to (x + width, y + height).\n     */\n    setScissor(x: Vector4 | number, y?: number, width?: number, height?: number): void;\n\n    /**\n     * Returns true if scissor test is enabled; returns false otherwise.\n     */\n    getScissorTest(): boolean;\n\n    /**\n     * Enable the scissor test. When this is enabled, only the pixels within the defined scissor area will be affected by further renderer actions.\n     */\n    setScissorTest(enable: boolean): void;\n\n    /**\n     * Sets the custom opaque sort function for the WebGLRenderLists. Pass null to use the default painterSortStable function.\n     */\n    setOpaqueSort(method: (a: any, b: any) => number): void;\n\n    /**\n     * Sets the custom transparent sort function for the WebGLRenderLists. Pass null to use the default reversePainterSortStable function.\n     */\n    setTransparentSort(method: (a: any, b: any) => number): void;\n\n    /**\n     * Returns a THREE.Color instance with the current clear color.\n     */\n    getClearColor(target: Color): Color;\n\n    /**\n     * Sets the clear color, using color for the color and alpha for the opacity.\n     */\n    setClearColor(color: ColorRepresentation, alpha?: number): void;\n\n    /**\n     * Returns a float with the current clear alpha. Ranges from 0 to 1.\n     */\n    getClearAlpha(): number;\n\n    setClearAlpha(alpha: number): void;\n\n    /**\n     * Tells the renderer to clear its color, depth or stencil drawing buffer(s).\n     * Arguments default to true\n     */\n    clear(color?: boolean, depth?: boolean, stencil?: boolean): void;\n\n    clearColor(): void;\n    clearDepth(): void;\n    clearStencil(): void;\n    clearTarget(renderTarget: WebGLRenderTarget, color: boolean, depth: boolean, stencil: boolean): void;\n\n    /**\n     * @deprecated Use {@link WebGLState#reset .state.reset()} instead.\n     */\n    resetGLState(): void;\n    dispose(): void;\n\n    renderBufferDirect(\n        camera: Camera,\n        scene: Scene,\n        geometry: BufferGeometry,\n        material: Material,\n        object: Object3D,\n        geometryGroup: any,\n    ): void;\n\n    /**\n     * A build in function that can be used instead of requestAnimationFrame. For WebXR projects this function must be used.\n     * @param callback The function will be called every available frame. If `null` is passed it will stop any already ongoing animation.\n     */\n    setAnimationLoop(callback: XRFrameRequestCallback | null): void;\n\n    /**\n     * @deprecated Use {@link WebGLRenderer#setAnimationLoop .setAnimationLoop()} instead.\n     */\n    animate(callback: () => void): void;\n\n    /**\n     * Compiles all materials in the scene with the camera. This is useful to precompile shaders before the first\n     * rendering. If you want to add a 3D object to an existing scene, use the third optional parameter for applying the\n     * target scene.\n     * Note that the (target) scene's lighting should be configured before calling this method.\n     */\n    compile: (scene: Object3D, camera: Camera, targetScene?: Scene | null) => Set<Material>;\n\n    /**\n     * Asynchronous version of {@link compile}(). The method returns a Promise that resolves when the given scene can be\n     * rendered without unnecessary stalling due to shader compilation.\n     * This method makes use of the KHR_parallel_shader_compile WebGL extension.\n     */\n    compileAsync: (scene: Object3D, camera: Camera, targetScene?: Scene | null) => Promise<Object3D>;\n\n    /**\n     * Render a scene or an object using a camera.\n     * The render is done to a previously specified {@link WebGLRenderTarget#renderTarget .renderTarget} set by calling\n     * {@link WebGLRenderer#setRenderTarget .setRenderTarget} or to the canvas as usual.\n     *\n     * By default render buffers are cleared before rendering but you can prevent this by setting the property\n     * {@link WebGLRenderer#autoClear autoClear} to false. If you want to prevent only certain buffers being cleared\n     * you can set either the {@link WebGLRenderer#autoClearColor autoClearColor},\n     * {@link WebGLRenderer#autoClearStencil autoClearStencil} or {@link WebGLRenderer#autoClearDepth autoClearDepth}\n     * properties to false. To forcibly clear one ore more buffers call {@link WebGLRenderer#clear .clear}.\n     */\n    render(scene: Object3D, camera: Camera): void;\n\n    /**\n     * Returns the current active cube face.\n     */\n    getActiveCubeFace(): number;\n\n    /**\n     * Returns the current active mipmap level.\n     */\n    getActiveMipmapLevel(): number;\n\n    /**\n     * Returns the current render target. If no render target is set, null is returned.\n     */\n    getRenderTarget(): WebGLRenderTarget | null;\n\n    /**\n     * @deprecated Use {@link WebGLRenderer#getRenderTarget .getRenderTarget()} instead.\n     */\n    getCurrentRenderTarget(): WebGLRenderTarget | null;\n\n    /**\n     * Sets the active render target.\n     *\n     * @param renderTarget The {@link WebGLRenderTarget renderTarget} that needs to be activated. When `null` is given, the canvas is set as the active render target instead.\n     * @param activeCubeFace Specifies the active cube side (PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5) of {@link WebGLCubeRenderTarget}.\n     * @param activeMipmapLevel Specifies the active mipmap level.\n     */\n    setRenderTarget(\n        renderTarget: WebGLRenderTarget | WebGLRenderTarget<Texture[]> | null,\n        activeCubeFace?: number,\n        activeMipmapLevel?: number,\n    ): void;\n\n    readRenderTargetPixels(\n        renderTarget: WebGLRenderTarget | WebGLRenderTarget<Texture[]>,\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n        buffer: any,\n        activeCubeFaceIndex?: number,\n    ): void;\n\n    /**\n     * Copies a region of the currently bound framebuffer into the selected mipmap level of the selected texture.\n     * This region is defined by the size of the destination texture's mip level, offset by the input position.\n     *\n     * @param position Specifies the pixel offset from which to copy out of the framebuffer.\n     * @param texture Specifies the destination texture.\n     * @param level Specifies the destination mipmap level of the texture.\n     */\n    copyFramebufferToTexture(position: Vector2, texture: Texture, level?: number): void;\n\n    /**\n     * Copies srcTexture to the specified level of dstTexture, offset by the input position.\n     *\n     * @param position Specifies the pixel offset into the dstTexture where the copy will occur.\n     * @param srcTexture Specifies the source texture.\n     * @param dstTexture Specifies the destination texture.\n     * @param level Specifies the destination mipmap level of the texture.\n     */\n    copyTextureToTexture(position: Vector2, srcTexture: Texture, dstTexture: Texture, level?: number): void;\n\n    /**\n     * Copies the pixels of a texture in the bounds sourceBox in the desination texture starting from the given position.\n     * @param sourceBox Specifies the bounds\n     * @param position Specifies the pixel offset into the dstTexture where the copy will occur.\n     * @param srcTexture Specifies the source texture.\n     * @param dstTexture Specifies the destination texture.\n     * @param level Specifies the destination mipmap level of the texture.\n     */\n    copyTextureToTexture3D(\n        sourceBox: Box3,\n        position: Vector3,\n        srcTexture: Texture,\n        dstTexture: Data3DTexture | DataArrayTexture,\n        level?: number,\n    ): void;\n\n    /**\n     * Initializes the given texture. Can be used to preload a texture rather than waiting until first render (which can cause noticeable lags due to decode and GPU upload overhead).\n     *\n     * @param texture The texture to Initialize.\n     */\n    initTexture(texture: Texture): void;\n\n    /**\n     * Can be used to reset the internal WebGL state.\n     */\n    resetState(): void;\n\n    /**\n     * @deprecated Use {@link WebGLRenderer#xr .xr} instead.\n     */\n    vr: boolean;\n\n    /**\n     * @deprecated Use {@link WebGLShadowMap#enabled .shadowMap.enabled} instead.\n     */\n    shadowMapEnabled: boolean;\n\n    /**\n     * @deprecated Use {@link WebGLShadowMap#type .shadowMap.type} instead.\n     */\n    shadowMapType: ShadowMapType;\n\n    /**\n     * @deprecated Use {@link WebGLShadowMap#cullFace .shadowMap.cullFace} instead.\n     */\n    shadowMapCullFace: CullFace;\n\n    /**\n     * @deprecated Use {@link WebGLExtensions#get .extensions.get( 'OES_texture_float' )} instead.\n     */\n    supportsFloatTextures(): any;\n\n    /**\n     * @deprecated Use {@link WebGLExtensions#get .extensions.get( 'OES_texture_half_float' )} instead.\n     */\n    supportsHalfFloatTextures(): any;\n\n    /**\n     * @deprecated Use {@link WebGLExtensions#get .extensions.get( 'OES_standard_derivatives' )} instead.\n     */\n    supportsStandardDerivatives(): any;\n\n    /**\n     * @deprecated Use {@link WebGLExtensions#get .extensions.get( 'WEBGL_compressed_texture_s3tc' )} instead.\n     */\n    supportsCompressedTextureS3TC(): any;\n\n    /**\n     * @deprecated Use {@link WebGLExtensions#get .extensions.get( 'WEBGL_compressed_texture_pvrtc' )} instead.\n     */\n    supportsCompressedTexturePVRTC(): any;\n\n    /**\n     * @deprecated Use {@link WebGLExtensions#get .extensions.get( 'EXT_blend_minmax' )} instead.\n     */\n    supportsBlendMinMax(): any;\n\n    /**\n     * @deprecated Use {@link WebGLCapabilities#vertexTextures .capabilities.vertexTextures} instead.\n     */\n    supportsVertexTextures(): any;\n\n    /**\n     * @deprecated Use {@link WebGLExtensions#get .extensions.get( 'ANGLE_instanced_arrays' )} instead.\n     */\n    supportsInstancedArrays(): any;\n\n    /**\n     * @deprecated Use {@link WebGLRenderer#setScissorTest .setScissorTest()} instead.\n     */\n    enableScissorTest(boolean: any): any;\n}\n",
      "@types/three@~0/src/renderers/WebGLRenderTarget.d.ts": "import { RenderTarget, RenderTargetOptions } from \"../core/RenderTarget.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\n\nexport class WebGLRenderTarget<TTexture extends Texture | Texture[] = Texture> extends RenderTarget<TTexture> {\n    constructor(width?: number, height?: number, options?: RenderTargetOptions);\n\n    readonly isWebGLRenderTarget: true;\n}\n",
      "@types/three@~0/src/renderers/webxr/WebXRController.d.ts": "import { Object3DEventMap } from \"../../core/Object3D.d.ts\";\nimport { Vector3 } from \"../../math/Vector3.d.ts\";\nimport { Group } from \"../../objects/Group.d.ts\";\n\nexport type XRControllerEventType = XRSessionEventType | XRInputSourceEventType | \"disconnected\" | \"connected\";\n\nexport class XRJointSpace extends Group {\n    readonly jointRadius: number | undefined;\n}\n\nexport type XRHandJoints = Record<XRHandJoint, XRJointSpace>;\n\nexport interface XRHandInputState {\n    pinching: boolean;\n}\n\nexport interface WebXRSpaceEventMap extends Object3DEventMap {\n    select: { data: XRInputSource };\n    selectstart: { data: XRInputSource };\n    selectend: { data: XRInputSource };\n    squeeze: { data: XRInputSource };\n    squeezestart: { data: XRInputSource };\n    squeezeend: { data: XRInputSource };\n\n    connected: { data: XRInputSource };\n    disconnected: { data: XRInputSource };\n\n    pinchend: { handedness: XRHandedness; target: WebXRController }; // This Event break the THREE.EventDispatcher contract, replacing the target to the wrong instance.\n    pinchstart: { handedness: XRHandedness; target: WebXRController }; // This Event break the THREE.EventDispatcher contract, replacing the target to the wrong instance.\n\n    move: {};\n}\n\nexport class XRHandSpace extends Group<WebXRSpaceEventMap> {\n    readonly joints: Partial<XRHandJoints>;\n    readonly inputState: XRHandInputState;\n}\n\nexport class XRTargetRaySpace extends Group<WebXRSpaceEventMap> {\n    hasLinearVelocity: boolean;\n    readonly linearVelocity: Vector3;\n    hasAngularVelocity: boolean;\n    readonly angularVelocity: Vector3;\n}\n\nexport class XRGripSpace extends Group<WebXRSpaceEventMap> {\n    hasLinearVelocity: boolean;\n    readonly linearVelocity: Vector3;\n    hasAngularVelocity: boolean;\n    readonly angularVelocity: Vector3;\n}\n\nexport class WebXRController {\n    constructor();\n\n    getHandSpace(): XRHandSpace;\n    getTargetRaySpace(): XRTargetRaySpace;\n    getGripSpace(): XRGripSpace;\n    dispatchEvent(event: { type: XRControllerEventType; data?: XRInputSource }): this;\n    connect(inputSource: XRInputSource): this;\n    disconnect(inputSource: XRInputSource): this;\n    update(inputSource: XRInputSource, frame: XRFrame, referenceSpace: XRReferenceSpace): this;\n}\n",
      "@types/three@~0/src/renderers/webxr/WebXRManager.d.ts": "// https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager\n\n/// <reference path=\"https://esm.sh/v135/@types/webxr@0.5.14/index.d.ts\" />\n\nimport { ArrayCamera } from \"../../cameras/ArrayCamera.d.ts\";\nimport { PerspectiveCamera } from \"../../cameras/PerspectiveCamera.d.ts\";\nimport { EventDispatcher } from \"../../core/EventDispatcher.d.ts\";\nimport { Vector4 } from \"../../math/Vector4.d.ts\";\nimport { WebGLRenderer } from \"../WebGLRenderer.d.ts\";\nimport { XRGripSpace, XRHandSpace, XRTargetRaySpace } from \"./WebXRController.d.ts\";\n\nexport type WebXRCamera = PerspectiveCamera & { viewport: Vector4 };\nexport type WebXRArrayCamera = Omit<ArrayCamera, \"cameras\"> & { cameras: [WebXRCamera, WebXRCamera] };\n\nexport interface WebXRManagerEventMap {\n    sessionstart: {};\n    sessionend: {};\n    planeadded: { data: XRPlane };\n    planeremoved: { data: XRPlane };\n    planechanged: { data: XRPlane };\n    planesdetected: { data: XRPlaneSet };\n}\n\nexport class WebXRManager extends EventDispatcher<WebXRManagerEventMap> {\n    constructor(renderer: WebGLRenderer, gl: WebGLRenderingContext);\n\n    /**\n     * @default false\n     */\n    enabled: boolean;\n\n    /**\n     * @default false\n     */\n    isPresenting: boolean;\n\n    /**\n     * @default true\n     */\n    cameraAutoUpdate: boolean;\n\n    getController(index: number): XRTargetRaySpace;\n\n    getControllerGrip(index: number): XRGripSpace;\n\n    getHand(index: number): XRHandSpace;\n\n    setFramebufferScaleFactor(value: number): void;\n\n    setReferenceSpaceType(value: XRReferenceSpaceType): void;\n\n    getReferenceSpace(): XRReferenceSpace | null;\n\n    setReferenceSpace(value: XRReferenceSpace): void;\n\n    getBaseLayer(): XRWebGLLayer | XRProjectionLayer;\n\n    getBinding(): XRWebGLBinding;\n\n    getFrame(): XRFrame;\n\n    getSession(): XRSession | null;\n\n    setSession(value: XRSession | null): Promise<void>;\n\n    getCamera(): WebXRArrayCamera;\n\n    updateCamera(camera: PerspectiveCamera): void;\n\n    setAnimationLoop(callback: XRFrameRequestCallback | null): void;\n\n    getFoveation(): number | undefined;\n\n    setFoveation(value: number): void;\n\n    dispose(): void;\n}\n",
      "@types/three@~0/src/scenes/Fog.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\n\nexport interface FogBase {\n    /**\n     * Optional name of the `Fog` object\n     * @remarks _(doesn't need to be unique)_.\n     * @defaultValue `\"\"`\n     */\n    name: string;\n\n    /**\n     * Fog color.\n     * @remarks If set to black, far away objects will be rendered black.\n     */\n    color: Color;\n\n    /**\n     * Returns a new Fog instance with the same parameters as this one.\n     */\n    clone(): FogBase;\n\n    /**\n     * Return Fog data in JSON format.\n     */\n    toJSON(): any;\n}\n\n/**\n * This class contains the parameters that define linear fog, i.e., that grows linearly denser with the distance.\n *  @example\n * ```typescript\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog(0xcccccc, 10, 15);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/scenes/Fog | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/scenes/Fog.js | Source}\n */\nexport class Fog implements FogBase {\n    /**\n     * The color parameter is passed to the {@link THREE.Color | Color} constructor to set the color property\n     * @remarks\n     * Color can be a hexadecimal integer or a CSS-style string.\n     * @param color\n     * @param near Expects a `Float`\n     * @param far Expects a `Float`\n     */\n    constructor(color: ColorRepresentation, near?: number, far?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Fog}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isFog: true;\n\n    /**\n     * Optional name of the object\n     * @remarks _(doesn't need to be unique)_.\n     * @defaultValue `\"\"`\n     */\n    name: string;\n\n    /**\n     * Fog color.\n     * @remarks If set to black, far away objects will be rendered black.\n     */\n    color: Color;\n\n    /**\n     * The minimum distance to start applying fog.\n     * @remarks Objects that are less than **near** units from the active camera won't be affected by fog.\n     * @defaultValue `1`\n     * @remarks Expects a `Float`\n     */\n    near: number;\n\n    /**\n     * The maximum distance at which fog stops being calculated and applied.\n     * @remarks Objects that are more than **far** units away from the active camera won't be affected by fog.\n     * @defaultValue `1000`\n     * @remarks Expects a `Float`\n     */\n    far: number;\n\n    /**\n     * Returns a new {@link Fog} instance with the same parameters as this one.\n     */\n    clone(): Fog;\n\n    /**\n     * Return {@link Fog} data in JSON format.\n     */\n    toJSON(): any;\n}\n",
      "@types/three@~0/src/scenes/FogExp2.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { FogBase } from \"./Fog.d.ts\";\n\n/**\n * This class contains the parameters that define exponential squared fog, which gives a clear view near the camera and a faster than exponentially densening fog farther from the camera.\n * @example\n * ```typescript\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.FogExp2(0xcccccc, 0.002);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_terrain | webgl geometry terrain}\n * @see {@link https://threejs.org/docs/index.html#api/en/scenes/FogExp2 | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/scenes/FogExp2.js | Source}\n */\nexport class FogExp2 implements FogBase {\n    /**\n     * The color parameter is passed to the {@link THREE.Color | Color} constructor to set the color property\n     * @remarks Color can be a hexadecimal integer or a CSS-style string.\n     * @param color\n     * @param density Expects a `Float`\n     */\n    constructor(color: ColorRepresentation, density?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link FogExp2}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isFogExp2: true;\n\n    /**\n     * Optional name of the object\n     * @remarks _(doesn't need to be unique)_.\n     * @defaultValue `\"\"`\n     */\n    name: string;\n\n    /**\n     * Fog color.\n     * @remarks If set to black, far away objects will be rendered black.\n     */\n    color: Color;\n\n    /**\n     * Defines how fast the fog will grow dense.\n     * @defaultValue `0.00025`\n     * @remarks Expects a `Float`\n     */\n    density: number;\n\n    /**\n     * Returns a new {@link FogExp2} instance with the same parameters as this one.\n     */\n    clone(): FogExp2;\n\n    /**\n     * Return {@link FogExp2} data in JSON format.\n     */\n    toJSON(): any;\n}\n",
      "@types/three@~0/src/scenes/Scene.d.ts": "import { Object3D } from \"../core/Object3D.d.ts\";\nimport { Material } from \"../materials/Material.d.ts\";\nimport { Color } from \"../math/Color.d.ts\";\nimport { Euler } from \"../math/Euler.d.ts\";\nimport { CubeTexture } from \"../textures/CubeTexture.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { FogBase } from \"./Fog.d.ts\";\n\n/**\n * Scenes allow you to set up what and where is to be rendered by three.js\n * @remarks\n * This is where you place objects, lights and cameras.\n * @see Example: {@link https://threejs.org/examples/#webgl_multiple_scenes_comparison | webgl multiple scenes comparison}\n * @see {@link https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene | Manual: Creating a scene}\n * @see {@link https://threejs.org/docs/index.html#api/en/scenes/Scene | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/scenes/Scene.js | Source}\n */\nexport class Scene extends Object3D {\n    /**\n     * Create a new {@link Scene} object.\n     */\n    constructor();\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Scene}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isScene: true;\n\n    /**\n     * @defaultValue `Scene`\n     */\n    type: \"Scene\";\n\n    /**\n     * A {@link Fog | fog} instance defining the type of fog that affects everything rendered in the scene.\n     * @defaultValue `null`\n     */\n    fog: FogBase | null;\n\n    /**\n     * Sets the blurriness of the background. Only influences environment maps assigned to {@link THREE.Scene.background | Scene.background}.\n     * @defaultValue `0`\n     * @remarks Expects a `Float` between `0` and `1`.\n     */\n    backgroundBlurriness: number;\n\n    /**\n     * Attenuates the color of the background. Only applies to background textures.\n     * @defaultValue `1`\n     * @remarks Expects a `Float`\n     */\n    backgroundIntensity: number;\n\n    /**\n     * Forces everything in the {@link Scene} to be rendered with the defined material.\n     * @defaultValue `null`\n     */\n    overrideMaterial: Material | null;\n\n    /**\n     * Defines the background of the scene.\n     * @remarks Valid inputs are:\n     *  - A {@link THREE.Color | Color} for defining a uniform colored background.\n     *  - A {@link THREE.Texture | Texture} for defining a (flat) textured background.\n     *  - Texture cubes ({@link THREE.CubeTexture | CubeTexture}) or equirectangular textures for defining a skybox.</li>\n     * @defaultValue `null`\n     */\n    background: Color | Texture | CubeTexture | null;\n\n    /**\n     * The rotation of the background in radians. Only influences environment maps assigned to {@link .background}.\n     * Default is `(0,0,0)`.\n     */\n    backgroundRotation: Euler;\n\n    /**\n     * Sets the environment map for all physical materials in the scene.\n     * However, it's not possible to overwrite an existing texture assigned to {@link THREE.MeshStandardMaterial.envMap | MeshStandardMaterial.envMap}.\n     * @defaultValue `null`\n     */\n    environment: Texture | null;\n\n    /**\n     * Attenuates the color of the environment. Only influences environment maps assigned to {@link Scene.environment}.\n     * @default 1\n     */\n    environmentIntensity: number;\n\n    /**\n     * The rotation of the environment map in radians. Only influences physical materials in the scene when\n     * {@link .environment} is used. Default is `(0,0,0)`.\n     */\n    environmentRotation: Euler;\n\n    /**\n     * Convert the {@link Scene} to three.js {@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4 | JSON Object/Scene format}.\n     * @param meta Object containing metadata such as textures or images for the scene.\n     */\n    toJSON(meta?: any): any;\n}\n",
      "@types/three@~0/src/textures/CanvasTexture.d.ts": "import {\n    MagnificationTextureFilter,\n    Mapping,\n    MinificationTextureFilter,\n    PixelFormat,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { OffscreenCanvas, Texture } from \"./Texture.d.ts\";\n\n/**\n * Creates a texture from a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas | canvas element}.\n * @remarks\n * This is almost the same as the base {@link Texture | Texture} class,\n * except that it sets {@link Texture.needsUpdate | needsUpdate} to `true` immediately.\n * @see {@link THREE.Texture | Texture}\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/CanvasTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/CanvasTexture.js | Source}\n */\nexport class CanvasTexture extends Texture {\n    /**\n     * This creates a new {@link THREE.CanvasTexture | CanvasTexture} object.\n     * @param canvas The HTML canvas element from which to load the texture.\n     * @param mapping See {@link Texture.mapping | .mapping}. Default {@link THREE.Texture.DEFAULT_MAPPING}\n     * @param wrapS See {@link Texture.wrapS | .wrapS}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param wrapT See {@link Texture.wrapT | .wrapT}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param magFilter See {@link Texture.magFilter | .magFilter}. Default {@link THREE.LinearFilter}\n     * @param minFilter  See {@link Texture.minFilter | .minFilter}. Default {@link THREE.LinearMipmapLinearFilter}\n     * @param format See {@link Texture.format | .format}. Default {@link THREE.RGBAFormat}\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType}\n     * @param anisotropy See {@link Texture.anisotropy | .anisotropy}. Default {@link THREE.Texture.DEFAULT_ANISOTROPY}\n     */\n    constructor(\n        canvas: TexImageSource | OffscreenCanvas,\n        mapping?: Mapping,\n        wrapS?: Wrapping,\n        wrapT?: Wrapping,\n        magFilter?: MagnificationTextureFilter,\n        minFilter?: MinificationTextureFilter,\n        format?: PixelFormat,\n        type?: TextureDataType,\n        anisotropy?: number,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link CanvasTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCanvasTexture: true;\n}\n",
      "@types/three@~0/src/textures/CompressedArrayTexture.d.ts": "import { CompressedPixelFormat, TextureDataType, Wrapping } from \"../constants.d.ts\";\nimport { CompressedTexture } from \"./CompressedTexture.d.ts\";\n\n/**\n * Creates an texture 2D array based on data in compressed form, for example from a\n * {@link https://en.wikipedia.org/wiki/DirectDraw_Surface | DDS} file.\n * @remarks For use with the {@link THREE.CompressedTextureLoader | CompressedTextureLoader}.\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/CompressedArrayTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/CompressedArrayTexture.js | Source}\n */\nexport class CompressedArrayTexture extends CompressedTexture {\n    /**\n     * Create a new instance of {@link CompressedArrayTexture}\n     * @param mipmaps The mipmaps array should contain objects with data, width and height.\n     * The mipmaps should be of the correct {@link format} and {@link type}. See {@link THREE.mipmaps}.\n     * @param width The width of the biggest mipmap.\n     * @param height The height of the biggest mipmap.\n     * @param depth The number of layers of the 2D array texture\n     * @param format The format used in the mipmaps. See {@link THREE.CompressedPixelFormat}.\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType}\n     */\n    constructor(\n        mipmaps: ImageData[],\n        width: number,\n        height: number,\n        depth: number,\n        format: CompressedPixelFormat,\n        type?: TextureDataType,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link CompressedArrayTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCompressedArrayTexture: true;\n\n    /**\n     * Overridden with a object containing width and height.\n     * @override\n     */\n    get image(): { width: number; height: number; depth: number };\n    set image(value: { width: number; height: number; depth: number });\n\n    /**\n     * This defines how the texture is wrapped in the depth direction.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @defaultValue {@link THREE.ClampToEdgeWrapping}\n     */\n    wrapR: Wrapping;\n}\n",
      "@types/three@~0/src/textures/CompressedCubeTexture.d.ts": "import { CompressedPixelFormat, TextureDataType } from \"../constants.d.ts\";\nimport { CompressedTexture } from \"./CompressedTexture.d.ts\";\n\nexport class CompressedCubeTexture extends CompressedTexture {\n    readonly isCompressedCubeTexture: true;\n    readonly isCubeTexture: true;\n\n    constructor(\n        images: Array<{ width: number; height: number }>,\n        format?: CompressedPixelFormat,\n        type?: TextureDataType,\n    );\n}\n",
      "@types/three@~0/src/textures/CompressedTexture.d.ts": "import {\n    ColorSpace,\n    CompressedPixelFormat,\n    MagnificationTextureFilter,\n    Mapping,\n    MinificationTextureFilter,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\n\n/**\n * Creates a texture based on data in compressed form, for example from a {@link https://en.wikipedia.org/wiki/DirectDraw_Surface | DDS} file.\n * @remarks For use with the {@link THREE.CompressedTextureLoader | CompressedTextureLoader}.\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/CompressedTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/CompressedTexture.js | Source}\n */\nexport class CompressedTexture extends Texture {\n    /**\n     * This creates a new {@link THREE.CompressedTexture | CompressedTexture} object.\n     * @param mipmaps The mipmaps array should contain objects with data, width and height.\n     * The mipmaps should be of the correct {@link format} and {@link type}. See {@link THREE.mipmaps}.\n     * @param width The width of the biggest mipmap.\n     * @param height The height of the biggest mipmap.\n     * @param format The format used in the mipmaps. See {@link THREE.CompressedPixelFormat}.\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType}\n     * @param mapping See {@link Texture.mapping | .mapping}. Default {@link THREE.Texture.DEFAULT_MAPPING}\n     * @param wrapS See {@link Texture.wrapS | .wrapS}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param wrapT See {@link Texture.wrapT | .wrapT}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param magFilter See {@link Texture.magFilter | .magFilter}. Default {@link THREE.LinearFilter}\n     * @param minFilter  See {@link Texture.minFilter | .minFilter}. Default {@link THREE.LinearMipmapLinearFilter}\n     * @param anisotropy See {@link Texture.anisotropy | .anisotropy}. Default {@link THREE.Texture.DEFAULT_ANISOTROPY}\n     * @param colorSpace See {@link Texture.colorSpace .colorSpace}. Default {@link NoColorSpace}\n     */\n    constructor(\n        mipmaps: ImageData[],\n        width: number,\n        height: number,\n        format: CompressedPixelFormat,\n        type?: TextureDataType,\n        mapping?: Mapping,\n        wrapS?: Wrapping,\n        wrapT?: Wrapping,\n        magFilter?: MagnificationTextureFilter,\n        minFilter?: MinificationTextureFilter,\n        anisotropy?: number,\n        colorSpace?: ColorSpace,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link CompressedTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCompressedTexture: true;\n\n    /**\n     * Overridden with a object containing width and height.\n     * @override\n     */\n    get image(): { width: number; height: number };\n    set image(value: { width: number; height: number });\n\n    /**\n     *  The mipmaps array should contain objects with data, width and height. The mipmaps should be of the correct {@link format} and {@link type}.\n     */\n    mipmaps: ImageData[];\n\n    /**\n     * @override\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link THREE.CompressedPixelFormat}\n     */\n    format: CompressedPixelFormat;\n\n    /**\n     * @override No flipping for cube textures. (also flipping doesn't work for compressed textures)\n     * @defaultValue `false`\n     */\n    flipY: boolean;\n\n    /**\n     * @override Can't generate mipmaps for compressed textures. mips must be embedded in DDS files\n     * @defaultValue `false`\n     */\n    generateMipmaps: boolean;\n}\n",
      "@types/three@~0/src/textures/CubeTexture.d.ts": "import {\n    ColorSpace,\n    CubeTextureMapping,\n    MagnificationTextureFilter,\n    MinificationTextureFilter,\n    PixelFormat,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\n\n/**\n * Creates a cube texture made up of six images.\n * @remarks\n * {@link CubeTexture} is almost equivalent in functionality and usage to {@link Texture}.\n * The only differences are that the images are an array of _6_ images as opposed to a single image,\n * and the mapping options are {@link THREE.CubeReflectionMapping} (default) or {@link THREE.CubeRefractionMapping}\n * @example\n * ```typescript\n * const loader = new THREE.CubeTextureLoader();\n * loader.setPath('textures/cube/pisa/');\n * const textureCube = loader.load(['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png']);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffffff,\n *     envMap: textureCube\n * });\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/CubeTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/CubeTexture.js | Source}\n */\nexport class CubeTexture extends Texture {\n    /**\n     * This creates a new {@link THREE.CubeTexture | CubeTexture} object.\n     * @param images\n     * @param mapping See {@link CubeTexture.mapping | .mapping}. Default {@link THREE.CubeReflectionMapping}\n     * @param wrapS See {@link Texture.wrapS | .wrapS}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param wrapT See {@link Texture.wrapT | .wrapT}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param magFilter See {@link Texture.magFilter | .magFilter}. Default {@link THREE.LinearFilter}\n     * @param minFilter  See {@link Texture.minFilter | .minFilter}. Default {@link THREE.LinearMipmapLinearFilter}\n     * @param format See {@link Texture.format | .format}. Default {@link THREE.RGBAFormat}\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType}\n     * @param anisotropy See {@link Texture.anisotropy | .anisotropy}. Default {@link THREE.Texture.DEFAULT_ANISOTROPY}\n     * @param colorSpace See {@link Texture.colorSpace | .colorSpace}. Default {@link NoColorSpace}\n     */\n    constructor(\n        images?: any[], // HTMLImageElement or HTMLCanvasElement\n        mapping?: CubeTextureMapping,\n        wrapS?: Wrapping,\n        wrapT?: Wrapping,\n        magFilter?: MagnificationTextureFilter,\n        minFilter?: MinificationTextureFilter,\n        format?: PixelFormat,\n        type?: TextureDataType,\n        anisotropy?: number,\n        colorSpace?: ColorSpace,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link CubeTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCubeTexture: true;\n\n    /**\n     * An image object, typically created using the {@link THREE.CubeTextureLoader.load | CubeTextureLoader.load()} method.\n     * @see {@link Texture.image}\n     */\n    get image(): any;\n    set image(data: any);\n\n    /**\n     * An image object, typically created using the {@link THREE.CubeTextureLoader.load | CubeTextureLoader.load()} method.\n     * @see {@link Texture.image}\n     */\n    get images(): any;\n    set images(data: any);\n\n    /**\n     * @inheritDoc\n     * @defaultValue {@link THREE.CubeReflectionMapping}\n     */\n    mapping: CubeTextureMapping;\n\n    /**\n     * @inheritDoc\n     * @defaultValue `false`\n     */\n    flipY: boolean;\n}\n",
      "@types/three@~0/src/textures/Data3DTexture.d.ts": "import { MagnificationTextureFilter, MinificationTextureFilter, Wrapping } from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\nimport { Texture3DImageData } from \"./types.d.ts\";\n\n/**\n * Creates a three-dimensional texture from raw data, with parameters to divide it into width, height, and depth\n * @example\n * ```typescript\n * This creates a[name] with repeating data, 0 to 255\n * // create a buffer with some data\n * const sizeX = 64;\n * const sizeY = 64;\n * const sizeZ = 64;\n * const data = new Uint8Array(sizeX * sizeY * sizeZ);\n * let i = 0;\n * for (let z = 0; z & lt; sizeZ; z++) {\n *     for (let y = 0; y & lt; sizeY; y++) {\n *         for (let x = 0; x & lt; sizeX; x++) {\n *             data[i] = i % 256;\n *             i++;\n *         }\n *     }\n * }\n * // use the buffer to create the texture\n * const texture = new THREE.Data3DTexture(data, sizeX, sizeY, sizeZ);\n * texture.needsUpdate = true;\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl2_materials_texture3d | WebGL2 / materials / texture3d}\n * @see Example: {@link https://threejs.org/examples/#webgl2_materials_texture3d_partialupdate | WebGL2 / materials / texture3d / partialupdate}\n * @see Example: {@link https://threejs.org/examples/#webgl2_volume_cloud | WebGL2 / volume / cloud}\n * @see Example: {@link https://threejs.org/examples/#webgl2_volume_perlin | WebGL2 / volume / perlin}\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/Data3DTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/Data3DTexture.js | Source}\n */\nexport class Data3DTexture extends Texture {\n    /**\n     * Create a new instance of {@link Data3DTexture}\n     * @param data {@link https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView | ArrayBufferView} of the texture. Default `null`.\n     * @param width Width of the texture. Default `1`.\n     * @param height Height of the texture. Default `1`.\n     * @param depth Depth of the texture. Default `1`.\n     */\n    constructor(data?: BufferSource | null, width?: number, height?: number, depth?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Data3DTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isData3DTexture: true;\n\n    /**\n     * Overridden with a record type holding data, width and height and depth.\n     * @override\n     */\n    get image(): Texture3DImageData;\n    set image(data: Texture3DImageData);\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    magFilter: MagnificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    minFilter: MinificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.ClampToEdgeWrapping}\n     */\n    wrapR: Wrapping;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    flipY: boolean;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    generateMipmaps: boolean;\n\n    /**\n     * @override\n     * @defaultValue `1`\n     */\n    unpackAlignment: number;\n}\n\nexport {};\n",
      "@types/three@~0/src/textures/DataArrayTexture.d.ts": "import { MagnificationTextureFilter, MinificationTextureFilter } from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\nimport { Texture3DImageData } from \"./types.d.ts\";\n\n/**\n * Creates an array of textures directly from raw data, width and height and depth\n * @example\n * ```typescript\n * This creates a[name] where each texture has a different color.\n * // create a buffer with color data\n * const width = 512;\n * const height = 512;\n * const depth = 100;\n * const size = width * height;\n * const data = new Uint8Array(4 * size * depth);\n * for (let i = 0; i & lt; depth; i++) {\n *     const color = new THREE.Color(Math.random(), Math.random(), Math.random());\n *     const r = Math.floor(color.r * 255);\n *     const g = Math.floor(color.g * 255);\n *     const b = Math.floor(color.b * 255);\n *     for (let j = 0; j & lt; size; j++) {\n *         const stride = (i * size + j) * 4;\n *         data[stride] = r;\n *         data[stride + 1] = g;\n *         data[stride + 2] = b;\n *         data[stride + 3] = 255;\n *     }\n * }\n * // used the buffer to create a [name]\n * const texture = new THREE.DataArrayTexture(data, width, height, depth);\n * texture.needsUpdate = true;\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl2_materials_texture2darray | WebGL2 / materials / texture2darray}\n * @see Example: {@link https://threejs.org/examples/#webgl2_rendertarget_texture2darray | WebGL2 / rendertarget / texture2darray}\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/DataArrayTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/DataArrayTexture.js | Source}\n */\nexport class DataArrayTexture extends Texture {\n    /**\n     * This creates a new {@link THREE.DataArrayTexture | DataArrayTexture} object.\n     * @remarks The interpretation of the data depends on {@link format} and {@link type}.\n     * @remarks If the {@link type} is {@link THREE.UnsignedByteType}, a {@link Uint8Array} will be useful for addressing the texel data\n     * @remarks If the {@link format} is {@link THREE.RGBAFormat}, data needs four values for one texel; Red, Green, Blue and Alpha (typically the opacity).\n     * @remarks For the packed {@link type | types}, {@link THREE.UnsignedShort4444Type} and {@link THREE.UnsignedShort5551Type}\n     * all color components of one texel can be addressed as bitfields within an integer element of a {@link Uint16Array}.\n     * @remarks In order to use the {@link type | types} {@link THREE.FloatType} and {@link THREE.HalfFloatType},\n     * the WebGL implementation must support the respective extensions _OES_texture_float_ and _OES_texture_half_float_\n     * @remarks In order to use {@link THREE.LinearFilter} for component-wise, bilinear interpolation of the texels based on these types,\n     * the WebGL extensions _OES_texture_float_linear_ or _OES_texture_half_float_linear_ must also be present.\n     * @param data {@link https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView | ArrayBufferView} of the texture. Default `null`.\n     * @param width Width of the texture. Default `1`.\n     * @param height Height of the texture. Default `1`.\n     * @param depth Depth of the texture. Default `1`.\n     */\n    constructor(data?: BufferSource | null, width?: number, height?: number, depth?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link DataArrayTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isDataArrayTexture: true;\n\n    /**\n     * Overridden with a record type holding data, width and height and depth.\n     * @override\n     */\n    get image(): Texture3DImageData;\n    set image(data: Texture3DImageData);\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    magFilter: MagnificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    minFilter: MinificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue  {@link THREE.ClampToEdgeWrapping}\n     */\n    wrapR: boolean;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    flipY: boolean;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    generateMipmaps: boolean;\n\n    /**\n     * @override\n     * @defaultValue `1`\n     */\n    unpackAlignment: number;\n}\n",
      "@types/three@~0/src/textures/DataTexture.d.ts": "import {\n    ColorSpace,\n    MagnificationTextureFilter,\n    Mapping,\n    MinificationTextureFilter,\n    PixelFormat,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\nimport { TextureImageData } from \"./types.d.ts\";\n\n/**\n * Creates a texture directly from raw data, width and height.\n * @example\n * ```typescript\n * // create a buffer with color data\n * const width = 512;\n * const height = 512;\n * const size = width * height;\n * const data = new Uint8Array(4 * size);\n * const color = new THREE.Color(0xffffff);\n * const r = Math.floor(color.r * 255);\n * const g = Math.floor(color.g * 255);\n * const b = Math.floor(color.b * 255);\n * for (let i = 0; i & lt; size; i++) {\n *     const stride = i * 4;\n *     data[stride] = r;\n *     data[stride + 1] = g;\n *     data[stride + 2] = b;\n *     data[stride + 3] = 255;\n * }\n * // used the buffer to create a [name]\n * const texture = new THREE.DataTexture(data, width, height);\n * texture.needsUpdate = true;\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/DataTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/DataTexture.js | Source}\n */\nexport class DataTexture extends Texture {\n    /**\n     * @param data {@link https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView | ArrayBufferView} of the texture. Default `null`.\n     * @param width Width of the texture. Default `1`.\n     * @param height Height of the texture. Default `1`.\n     * @param format See {@link Texture.format | .format}. Default {@link THREE.RGBAFormat}\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType}\n     * @param mapping See {@link Texture.mapping | .mapping}. Default {@link THREE.Texture.DEFAULT_MAPPING}\n     * @param wrapS See {@link Texture.wrapS | .wrapS}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param wrapT See {@link Texture.wrapT | .wrapT}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param magFilter See {@link Texture.magFilter | .magFilter}. Default {@link THREE.NearestFilter}\n     * @param minFilter  See {@link Texture.minFilter | .minFilter}. Default {@link THREE.NearestFilter}\n     * @param anisotropy See {@link Texture.anisotropy | .anisotropy}. Default {@link THREE.Texture.DEFAULT_ANISOTROPY}\n     * @param colorSpace See {@link Texture.colorSpace | .colorSpace}. Default {@link NoColorSpace}\n     */\n    constructor(\n        data?: BufferSource | null,\n        width?: number,\n        height?: number,\n        format?: PixelFormat,\n        type?: TextureDataType,\n        mapping?: Mapping,\n        wrapS?: Wrapping,\n        wrapT?: Wrapping,\n        magFilter?: MagnificationTextureFilter,\n        minFilter?: MinificationTextureFilter,\n        anisotropy?: number,\n        colorSpace?: ColorSpace,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link DataTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isDataTexture: true;\n\n    /**\n     * Overridden with a record type holding data, width and height and depth.\n     * @override\n     */\n    get image(): TextureImageData;\n    set image(value: TextureImageData);\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    magFilter: MagnificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    minFilter: MinificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    flipY: boolean;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    generateMipmaps: boolean;\n\n    /**\n     * @override\n     * @defaultValue `1`\n     */\n    unpackAlignment: number;\n}\n",
      "@types/three@~0/src/textures/DepthTexture.d.ts": "import {\n    DepthTexturePixelFormat,\n    MagnificationTextureFilter,\n    Mapping,\n    MinificationTextureFilter,\n    TextureComparisonFunction,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\n\n/**\n * This class can be used to automatically save the depth information of a rendering into a texture\n * @see Example: {@link https://threejs.org/examples/#webgl_depth_texture | depth / texture}\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/DepthTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/DepthTexture.js | Source}\n */\nexport class DepthTexture extends Texture {\n    /**\n     * Create a new instance of {@link DepthTexture}\n     * @param width Width of the texture.\n     * @param height Height of the texture.\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType} or {@link THREE.UnsignedInt248Type}\n     * @param mapping See {@link Texture.mapping | .mapping}. Default {@link THREE.Texture.DEFAULT_MAPPING}\n     * @param wrapS See {@link Texture.wrapS | .wrapS}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param wrapT See {@link Texture.wrapT | .wrapT}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param magFilter See {@link Texture.magFilter | .magFilter}. Default {@link THREE.NearestFilter}\n     * @param minFilter  See {@link Texture.minFilter | .minFilter}. Default {@link THREE.NearestFilter}\n     * @param anisotropy See {@link Texture.anisotropy | .anisotropy}. Default {@link THREE.Texture.DEFAULT_ANISOTROPY}\n     * @param format See {@link DepthTexture.format | .format}. Default {@link THREE.DepthFormat}\n     */\n    constructor(\n        width: number,\n        height: number,\n        type?: TextureDataType,\n        mapping?: Mapping,\n        wrapS?: Wrapping,\n        wrapT?: Wrapping,\n        magFilter?: MagnificationTextureFilter,\n        minFilter?: MinificationTextureFilter,\n        anisotropy?: number,\n        format?: DepthTexturePixelFormat,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link DepthTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isDepthTexture: true;\n\n    /**\n     * Overridden with a record type holding width and height.\n     * @override\n     */\n    get image(): { width: number; height: number };\n    set image(value: { width: number; height: number });\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    flipY: boolean;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    magFilter: MagnificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    minFilter: MinificationTextureFilter;\n\n    /**\n     * @override Depth textures do not use mipmaps.\n     * @defaultValue `false`\n     */\n    generateMipmaps: boolean;\n\n    /**\n     * @override\n     * @see {@link Texture.format | Texture.format}\n     * @defaultValue {@link THREE.DepthFormat}.\n     */\n    format: DepthTexturePixelFormat;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.UnsignedByteType} when {@link format | .format} === {@link THREE.DepthFormat}\n     * @defaultValue {@link THREE.UnsignedInt248Type} when {@link format | .format} === {@link THREE.DepthStencilFormat}\n     */\n    type: TextureDataType;\n\n    /**\n     * This is used to define the comparison function used when comparing texels in the depth texture to the value in\n     * the depth buffer. Default is `null` which means comparison is disabled.\n     *\n     * See {@link THREE.TextureComparisonFunction} for functions.\n     */\n    compareFunction: TextureComparisonFunction | null;\n}\n",
      "@types/three@~0/src/textures/FramebufferTexture.d.ts": "import { MagnificationTextureFilter, MinificationTextureFilter } from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\n\n/**\n * This class can only be used in combination with {@link THREE.WebGLRenderer.copyFramebufferToTexture | WebGLRenderer.copyFramebufferToTexture()}.\n * @example\n * ```typescript\n * const pixelRatio = window.devicePixelRatio;\n * const textureSize = 128 * pixelRatio;\n *\n * // instantiate a framebuffer texture\n * const frameTexture = new FramebufferTexture( textureSize, textureSize, RGBAFormat );\n *\n * // calculate start position for copying part of the frame data\n * const vector = new Vector2();\n * vector.x = ( window.innerWidth * pixelRatio / 2 ) - ( textureSize / 2 );\n * vector.y = ( window.innerHeight * pixelRatio / 2 ) - ( textureSize / 2 );\n *\n * // render the scene\n * renderer.clear();\n * renderer.render( scene, camera );\n *\n * // copy part of the rendered frame into the framebuffer texture\n * renderer.copyFramebufferToTexture( vector, frameTexture );\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_framebuffer_texture | webgl_framebuffer_texture}\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/FramebufferTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/FramebufferTexture.js | Source}\n */\nexport class FramebufferTexture extends Texture {\n    /**\n     * Create a new instance of {@link FramebufferTexture}\n     * @param width The width of the texture.\n     * @param height The height of the texture.\n     */\n    constructor(width: number, height: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link FramebufferTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isFramebufferTexture: true;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    magFilter: MagnificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.NearestFilter}\n     */\n    minFilter: MinificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    generateMipmaps: boolean;\n}\n",
      "@types/three@~0/src/textures/Source.d.ts": "/**\n * Represents the data {@link Source} of a texture.\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/Source | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/Source.js | Source}\n */\nexport class Source {\n    /**\n     * Create a new instance of {@link Source}\n     * @param data The data definition of a texture. Default `null`\n     */\n    constructor(data: any);\n\n    /**\n     * Flag to check if a given object is of type {@link Source}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSource: true;\n\n    readonly id: number;\n\n    /**\n     * The actual data of a texture.\n     * @remarks The type of this property depends on the texture that uses this instance.\n     */\n    data: any;\n\n    /**\n     * This property is only relevant when {@link .needsUpdate} is set to `true` and provides more control on how\n     * texture data should be processed.\n     * When `dataReady` is set to `false`, the engine performs the memory allocation (if necessary) but does not\n     * transfer the data into the GPU memory.\n     * @default true\n     */\n    dataReady: boolean;\n\n    /**\n     * When the property is set to `true`, the engine allocates the memory for the texture (if necessary) and triggers\n     * the actual texture upload to the GPU next time the source is used.\n     */\n    set needsUpdate(value: boolean);\n\n    /**\n     * {@link http://en.wikipedia.org/wiki/Universally_unique_identifier | UUID} of this object instance.\n     * @remarks This gets automatically assigned and shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * This starts at `0` and counts how many times {@link needsUpdate | .needsUpdate} is set to `true`.\n     * @remarks Expects a `Integer`\n     * @defaultValue `0`\n     */\n    version: number;\n\n    /**\n     * Convert the data {@link Source} to three.js {@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4 | JSON Object/Scene format}.\n     * @param meta Optional object containing metadata.\n     */\n    toJSON(meta?: string | {}): {};\n}\n",
      "@types/three@~0/src/textures/Texture.d.ts": "import {\n    AnyMapping,\n    AnyPixelFormat,\n    ColorSpace,\n    MagnificationTextureFilter,\n    Mapping,\n    MinificationTextureFilter,\n    PixelFormat,\n    PixelFormatGPU,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { EventDispatcher } from \"../core/EventDispatcher.d.ts\";\nimport { Matrix3 } from \"../math/Matrix3.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Source } from \"./Source.d.ts\";\n\n/** Shim for OffscreenCanvas. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface OffscreenCanvas extends EventTarget {}\n\n/**\n * Create a {@link Texture} to apply to a surface or as a reflection or refraction map.\n * @remarks\n * After the initial use of a texture, its **dimensions**, {@link format}, and {@link type} cannot be changed\n * Instead, call {@link dispose | .dispose()} on the {@link Texture} and instantiate a new {@link Texture}.\n * @example\n * ```typescript\n * // load a texture, set wrap mode to repeat\n * const texture = new THREE.TextureLoader().load(\"textures/water.jpg\");\n * texture.wrapS = THREE.RepeatWrapping;\n * texture.wrapT = THREE.RepeatWrapping;\n * texture.repeat.set(4, 4);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_materials_texture_filters | webgl materials texture filters}\n * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/Texture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/Textures/Texture.js | Source}\n */\nexport class Texture extends EventDispatcher<{ dispose: {} }> {\n    /**\n     * This creates a new {@link THREE.Texture | Texture} object.\n     * @param image See {@link Texture.image | .image}. Default {@link THREE.Texture.DEFAULT_IMAGE}\n     * @param mapping See {@link Texture.mapping | .mapping}. Default {@link THREE.Texture.DEFAULT_MAPPING}\n     * @param wrapS See {@link Texture.wrapS | .wrapS}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param wrapT See {@link Texture.wrapT | .wrapT}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param magFilter See {@link Texture.magFilter | .magFilter}. Default {@link THREE.LinearFilter}\n     * @param minFilter  See {@link Texture.minFilter | .minFilter}. Default {@link THREE.LinearMipmapLinearFilter}\n     * @param format See {@link Texture.format | .format}. Default {@link THREE.RGBAFormat}\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType}\n     * @param anisotropy See {@link Texture.anisotropy | .anisotropy}. Default {@link THREE.Texture.DEFAULT_ANISOTROPY}\n     * @param colorSpace See {@link Texture.colorSpace | .colorSpace}. Default {@link THREE.NoColorSpace}\n     */\n    constructor(\n        image?: TexImageSource | OffscreenCanvas,\n        mapping?: Mapping,\n        wrapS?: Wrapping,\n        wrapT?: Wrapping,\n        magFilter?: MagnificationTextureFilter,\n        minFilter?: MinificationTextureFilter,\n        format?: PixelFormat,\n        type?: TextureDataType,\n        anisotropy?: number,\n        colorSpace?: ColorSpace,\n    );\n\n    /**\n     * @deprecated\n     */\n    constructor(\n        image: TexImageSource | OffscreenCanvas,\n        mapping: Mapping,\n        wrapS: Wrapping,\n        wrapT: Wrapping,\n        magFilter: MagnificationTextureFilter,\n        minFilter: MinificationTextureFilter,\n        format: PixelFormat,\n        type: TextureDataType,\n        anisotropy: number,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Texture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isTexture: true;\n\n    /**\n     * Unique number for this {@link Texture} instance.\n     * @remarks Note that ids are assigned in chronological order: 1, 2, 3, ..., incrementing by one for each new object.\n     * @remarks Expects a `Integer`\n     */\n    readonly id: number;\n\n    /**\n     * {@link http://en.wikipedia.org/wiki/Universally_unique_identifier | UUID} of this object instance.\n     * @remarks This gets automatically assigned and shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * Optional name of the object\n     * @remarks _(doesn't need to be unique)_.\n     * @defaultValue `\"\"`\n     */\n    name: string;\n\n    /**\n     * The data definition of a texture. A reference to the data source can be shared across textures.\n     * This is often useful in context of spritesheets where multiple textures render the same data\n     * but with different {@link Texture} transformations.\n     */\n    source: Source;\n\n    /**\n     * An image object, typically created using the {@link THREE.TextureLoader.load | TextureLoader.load()} method.\n     * @remarks This can be any image (e.g., PNG, JPG, GIF, DDS) or video (e.g., MP4, OGG/OGV) type supported by three.js.\n     * @remarks To use video as a {@link Texture} you need to have a playing HTML5 video element as a source\n     * for your {@link Texture} image and continuously update this {@link Texture}\n     * as long as video is playing - the {@link THREE.VideoTexture | VideoTexture} class handles this automatically.\n     */\n    get image(): any;\n    set image(data: any);\n\n    /**\n     * Array of user-specified mipmaps\n     * @defaultValue `[]`\n     */\n    mipmaps: any[]; // ImageData[] for 2D textures and CubeTexture[] for cube textures;\n\n    /**\n     * How the image is applied to the object.\n     * @remarks All {@link Texture} types except {@link THREE.CubeTexture} expect the _values_ be {@link THREE.Mapping}\n     * @remarks {@link CubeTexture} expect the _values_ be {@link THREE.CubeTextureMapping}\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @defaultValue _value of_ {@link THREE.Texture.DEFAULT_MAPPING}\n     */\n    mapping: AnyMapping;\n\n    /**\n     * Lets you select the uv attribute to map the texture to. `0` for `uv`, `1` for `uv1`, `2` for `uv2` and `3` for\n     * `uv3`.\n     */\n    channel: number;\n\n    /**\n     * This defines how the {@link Texture} is wrapped *horizontally* and corresponds to **U** in UV mapping.\n     * @remarks for **WEBGL1** - tiling of images in textures only functions if image dimensions are powers of two\n     * (2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, ...) in terms of pixels.\n     * Individual dimensions need not be equal, but each must be a power of two. This is a limitation of WebGL1, not three.js.\n     * **WEBGL2** does not have this limitation.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link wrapT}\n     * @see {@link repeat}\n     * @defaultValue {@link THREE.ClampToEdgeWrapping}\n     */\n    wrapS: Wrapping;\n\n    /**\n     * This defines how the {@link Texture} is wrapped *vertically* and corresponds to **V** in UV mapping.\n     * @remarks for **WEBGL1** - tiling of images in textures only functions if image dimensions are powers of two\n     * (2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, ...) in terms of pixels.\n     * Individual dimensions need not be equal, but each must be a power of two. This is a limitation of WebGL1, not three.js.\n     * **WEBGL2** does not have this limitation.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link wrapS}\n     * @see {@link repeat}\n     * @defaultValue {@link THREE.ClampToEdgeWrapping}\n     */\n    wrapT: Wrapping;\n\n    /**\n     * How the {@link Texture} is sampled when a texel covers more than one pixel.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link minFilter}\n     * @see {@link THREE.MagnificationTextureFilter}\n     * @defaultValue {@link THREE.LinearFilter}\n     */\n    magFilter: MagnificationTextureFilter;\n\n    /**\n     * How the {@link Texture} is sampled when a texel covers less than one pixel.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link magFilter}\n     * @see {@link THREE.MinificationTextureFilter}\n     * @defaultValue {@link THREE.LinearMipmapLinearFilter}\n     */\n    minFilter: MinificationTextureFilter;\n\n    /**\n     * The number of samples taken along the axis through the pixel that has the highest density of texels.\n     * @remarks A higher value gives a less blurry result than a basic mipmap, at the cost of more {@link Texture} samples being used.\n     * @remarks Use {@link THREE.WebGLCapabilities.getMaxAnisotropy() | renderer.capabilities.getMaxAnisotropy()} to find the maximum valid anisotropy value for the GPU;\n     * @remarks This value is usually a power of 2.\n     * @default _value of_ {@link THREE.Texture.DEFAULT_ANISOTROPY}. That is normally `1`.\n     */\n    anisotropy: number;\n\n    /**\n     * These define how elements of a 2D texture, or texels, are read by shaders.\n     * @remarks All {@link Texture} types except {@link THREE.DepthTexture} and {@link THREE.CompressedPixelFormat} expect the _values_ be {@link THREE.PixelFormat}\n     * @remarks {@link DepthTexture} expect the _values_ be {@link THREE.CubeTextureMapping}\n     * @remarks {@link CompressedPixelFormat} expect the _values_ be {@link THREE.CubeTextureMapping}\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link THREE.PixelFormat}\n     * @defaultValue {@link THREE.RGBAFormat}.\n     */\n    format: AnyPixelFormat;\n\n    /**\n     * This must correspond to the {@link Texture.format | .format}.\n     * @remarks {@link THREE.UnsignedByteType}, is the type most used by Texture formats.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link THREE.TextureDataType}\n     * @defaultValue {@link THREE.UnsignedByteType}\n     */\n    type: TextureDataType;\n\n    /**\n     * The GPU Pixel Format allows the developer to specify how the data is going to be stored on the GPU.\n     * @remarks Compatible only with {@link WebGL2RenderingContext | WebGL 2 Rendering Context}.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @defaultValue The default value is obtained using a combination of {@link Texture.format | .format} and {@link Texture.type | .type}.\n     */\n    internalFormat: PixelFormatGPU | null;\n\n    /**\n     * The uv-transform matrix for the texture.\n     * @remarks\n     * When {@link Texture.matrixAutoUpdate | .matrixAutoUpdate} property is `true`.\n     * Will be updated by the renderer from the properties:\n     *  - {@link Texture.offset | .offset}\n     *  - {@link Texture.repeat | .repeat}\n     *  - {@link Texture.rotation | .rotation}\n     *  - {@link Texture.center | .center}\n     * @remarks\n     * When {@link Texture.matrixAutoUpdate | .matrixAutoUpdate} property is `false`.\n     * This matrix may be set manually.\n     * @see {@link matrixAutoUpdate | .matrixAutoUpdate}\n     * @defaultValue `new THREE.Matrix3()`\n     */\n    matrix: Matrix3;\n\n    /**\n     * Whether is to update the texture's uv-transform {@link matrix | .matrix}.\n     * @remarks Set this to `false` if you are specifying the uv-transform {@link matrix} directly.\n     * @see {@link matrix | .matrix}\n     * @defaultValue `true`\n     */\n    matrixAutoUpdate: boolean;\n\n    /**\n     * How much a single repetition of the texture is offset from the beginning, in each direction **U** and **V**.\n     * @remarks Typical range is `0.0` to `1.0`.\n     * @defaultValue `new THREE.Vector2(0, 0)`\n     */\n    offset: Vector2;\n\n    /**\n     * How many times the texture is repeated across the surface, in each direction **U** and **V**.\n     * @remarks\n     * If repeat is set greater than `1` in either direction, the corresponding *Wrap* parameter should\n     * also be set to {@link THREE.RepeatWrapping} or {@link THREE.MirroredRepeatWrapping} to achieve the desired tiling effect.\n     * @see {@link wrapS}\n     * @see {@link wrapT}\n     * @defaultValue `new THREE.Vector2( 1, 1 )`\n     */\n    repeat: Vector2;\n\n    /**\n     * The point around which rotation occurs.\n     * @remarks A value of `(0.5, 0.5)` corresponds to the center of the texture.\n     * @defaultValue `new THREE.Vector2( 0, 0 )`, _lower left._\n     */\n    center: Vector2;\n\n    /**\n     * How much the texture is rotated around the center point, in radians.\n     * @remarks Positive values are counter-clockwise.\n     * @defaultValue `0`\n     */\n    rotation: number;\n\n    /**\n     * Whether to generate mipmaps, _(if possible)_ for a texture.\n     * @remarks Set this to false if you are creating mipmaps manually.\n     * @defaultValue true\n     */\n    generateMipmaps: boolean;\n\n    /**\n     * If set to `true`, the alpha channel, if present, is multiplied into the color channels when the texture is uploaded to the GPU.\n     * @remarks\n     * Note that this property has no effect for {@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap | ImageBitmap}.\n     * You need to configure on bitmap creation instead. See {@link THREE.ImageBitmapLoader | ImageBitmapLoader}.\n     * @see {@link THREE.ImageBitmapLoader | ImageBitmapLoader}.\n     * @defaultValue `false`\n     */\n    premultiplyAlpha: boolean;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when uploaded to the GPU.\n     * @remarks\n     * Note that this property has no effect for {@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap | ImageBitmap}.\n     * You need to configure on bitmap creation instead. See {@link THREE.ImageBitmapLoader | ImageBitmapLoader}.\n     * @see {@link THREE.ImageBitmapLoader | ImageBitmapLoader}.\n     * @defaultValue `true`\n     */\n    flipY: boolean;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     * @remarks\n     * The allowable values are:\n     *  - `1` (byte-alignment)\n     *  - `2` (rows aligned to even-numbered bytes)\n     *  - `4` (word-alignment)\n     *  - `8` (rows start on double-word boundaries).\n     * @see {@link http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml | glPixelStorei} for more information.\n     * @defaultValue `4`\n     */\n    unpackAlignment: number; // TODO Fix typing to only allow the expected values.\n\n    /**\n     * The {@link Textures | {@link Texture} constants} page for details of other color spaces.\n     * @remarks\n     * Textures containing color data should be annotated with {@link SRGBColorSpace THREE.SRGBColorSpace} or\n     * {@link LinearSRGBColorSpace THREE.LinearSRGBColorSpace}.\n     * @see {@link https://threejs.org/docs/index.html#api/en/constants/Textures | Texture Constants}\n     * @see {@link THREE.TextureDataType}\n     * @defaultValue {@link THREE.NoColorSpace}\n     */\n    colorSpace: ColorSpace;\n\n    /**\n     * Indicates whether a texture belongs to a render target or not\n     * @defaultValue `false`\n     */\n    isRenderTargetTexture: boolean;\n\n    /**\n     * An object that can be used to store custom data about the texture.\n     * @remarks It should not hold references to functions as these will not be cloned.\n     * @defaultValue `{}`\n     */\n    userData: Record<string, any>;\n\n    /**\n     * This starts at `0` and counts how many times {@link needsUpdate | .needsUpdate} is set to `true`.\n     * @remarks Expects a `Integer`\n     * @defaultValue `0`\n     */\n    version: number;\n\n    /**\n     * Indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target\n     * textures)\n     */\n    pmremVersion: number;\n\n    /**\n     * Set this to `true` to trigger an update next time the texture is used. Particularly important for setting the wrap mode.\n     */\n    set needsUpdate(value: boolean);\n\n    /**\n     * Indicates whether this texture should be processed by {@link THREE.PMREMGenerator} or not.\n     * @remarks Only relevant for render target textures.\n     * @defaultValue `false`\n     */\n    set needsPMREMUpdate(value: boolean);\n\n    /**\n     * The Global default value for {@link anisotropy | .anisotropy}.\n     * @defaultValue `1`.\n     */\n    static DEFAULT_ANISOTROPY: number;\n\n    /**\n     * The Global default value for {@link Texture.image | .image}.\n     * @defaultValue `null`.\n     */\n    static DEFAULT_IMAGE: any;\n\n    /**\n     * The Global default value for {@link mapping | .mapping}.\n     * @defaultValue {@link THREE.UVMapping}\n     */\n    static DEFAULT_MAPPING: Mapping;\n\n    /**\n     * A callback function, called when the texture is updated _(e.g., when needsUpdate has been set to true and then the texture is used)_.\n     */\n    onUpdate: () => void;\n\n    /**\n     * Transform the **UV** based on the value of this texture's\n     * {@link offset | .offset},\n     * {@link repeat | .repeat},\n     * {@link wrapS | .wrapS},\n     * {@link wrapT | .wrapT} and\n     * {@link flipY | .flipY} properties.\n     * @param uv\n     */\n    transformUv(uv: Vector2): Vector2;\n\n    /**\n     * Update the texture's **UV-transform** {@link matrix | .matrix} from the texture properties\n     * {@link offset | .offset},\n     * {@link repeat | .repeat},\n     * {@link rotation | .rotation} and\n     * {@link center | .center}.\n     */\n    updateMatrix(): void;\n\n    /**\n     * Make copy of the texture\n     * @remarks Note this is not a **\"deep copy\"**, the image is shared\n     * @remarks\n     * Besides, cloning a texture does not automatically mark it for a texture upload\n     * You have to set {@link needsUpdate | .needsUpdate} to `true` as soon as it's image property (the data source) is fully loaded or ready.\n     */\n    clone(): this;\n\n    copy(source: Texture): this;\n\n    /**\n     * Convert the texture to three.js {@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4 | JSON Object/Scene format}.\n     * @param meta Optional object containing metadata.\n     */\n    toJSON(meta?: string | {}): {};\n\n    /**\n     * Frees the GPU-related resources allocated by this instance\n     * @remarks Call this method whenever this instance is no longer used in your app.\n     */\n    dispose(): void;\n}\n",
      "@types/three@~0/src/textures/VideoTexture.d.ts": "import {\n    MagnificationTextureFilter,\n    Mapping,\n    MinificationTextureFilter,\n    PixelFormat,\n    TextureDataType,\n    Wrapping,\n} from \"../constants.d.ts\";\nimport { Texture } from \"./Texture.d.ts\";\n\n/**\n * Creates a texture for use with a video.\n * @remarks\n * Note: After the initial use of a texture, the video cannot be changed\n * Instead, call {@link dispose | .dispose()} on the texture and instantiate a new one.\n * @example\n * ```typescript\n * // assuming you have created a HTML video element with id=\"video\"\n * const video = document.getElementById('video');\n * const texture = new THREE.VideoTexture(video);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_materials_video | materials / video}\n * @see Example: {@link https://threejs.org/examples/#webgl_materials_video_webcam | materials / video / webcam}\n * @see Example: {@link https://threejs.org/examples/#webgl_video_kinect | video / kinect}\n * @see Example: {@link https://threejs.org/examples/#webgl_video_panorama_equirectangular | video / panorama / equirectangular}\n * @see Example: {@link https://threejs.org/examples/#webxr_vr_video | vr / video}\n * @see {@link https://threejs.org/docs/index.html#api/en/textures/VideoTexture | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/textures/VideoTexture.js | Source}\n */\nexport class VideoTexture extends Texture {\n    /**\n     * Create a new instance of {@link VideoTexture}\n     * @param video The video element to use as the texture.\n     * @param mapping See {@link Texture.mapping | .mapping}. Default {@link THREE.Texture.DEFAULT_MAPPING}\n     * @param wrapS See {@link Texture.wrapS | .wrapS}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param wrapT See {@link Texture.wrapT | .wrapT}. Default {@link THREE.ClampToEdgeWrapping}\n     * @param magFilter See {@link Texture.magFilter | .magFilter}. Default {@link THREE.LinearFilter}\n     * @param minFilter  See {@link Texture.minFilter | .minFilter}. Default {@link THREE.LinearFilter}\n     * @param format See {@link Texture.format | .format}. Default {@link THREE.RGBAFormat}\n     * @param type See {@link Texture.type | .type}. Default {@link THREE.UnsignedByteType}\n     * @param anisotropy See {@link Texture.anisotropy | .anisotropy}. Default {@link THREE.Texture.DEFAULT_ANISOTROPY}\n     */\n    constructor(\n        video: HTMLVideoElement,\n        mapping?: Mapping,\n        wrapS?: Wrapping,\n        wrapT?: Wrapping,\n        magFilter?: MagnificationTextureFilter,\n        minFilter?: MinificationTextureFilter,\n        format?: PixelFormat,\n        type?: TextureDataType,\n        anisotropy?: number,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link VideoTexture}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isVideoTexture: true;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.LinearFilter}\n     */\n    magFilter: MagnificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue {@link THREE.LinearFilter}\n     */\n    minFilter: MinificationTextureFilter;\n\n    /**\n     * @override\n     * @defaultValue `false`\n     */\n    generateMipmaps: boolean;\n\n    /**\n     * @override\n     * You will **not** need to set this manually here as it is handled by the {@link update | update()} method.\n     */\n    set needsUpdate(value: boolean);\n\n    /**\n     * This is called automatically and sets {@link needsUpdate | .needsUpdate } to `true` every time a new frame is available.\n     */\n    update(): void;\n}\n",
      "@types/three@~0/src/utils.d.ts": "export function createCanvasElement(): HTMLCanvasElement;\n",
      "@types/three@~0/src/materials/Material.d.ts": "import { Camera } from \"../cameras/Camera.d.ts\";\nimport {\n    Blending,\n    BlendingDstFactor,\n    BlendingEquation,\n    BlendingSrcFactor,\n    DepthModes,\n    PixelFormat,\n    Side,\n    StencilFunc,\n    StencilOp,\n} from \"../constants.d.ts\";\nimport { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { EventDispatcher } from \"../core/EventDispatcher.d.ts\";\nimport { Object3D } from \"../core/Object3D.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Plane } from \"../math/Plane.d.ts\";\nimport { Group } from \"../objects/Group.d.ts\";\nimport { WebGLProgramParametersWithUniforms } from \"../renderers/webgl/WebGLPrograms.d.ts\";\nimport { WebGLRenderer } from \"../renderers/WebGLRenderer.d.ts\";\nimport { Scene } from \"../scenes/Scene.d.ts\";\n\nexport interface MaterialParameters {\n    alphaHash?: boolean | undefined;\n    alphaTest?: number | undefined;\n    alphaToCoverage?: boolean | undefined;\n    blendAlpha?: number | undefined;\n    blendColor?: ColorRepresentation | undefined;\n    blendDst?: BlendingDstFactor | undefined;\n    blendDstAlpha?: number | undefined;\n    blendEquation?: BlendingEquation | undefined;\n    blendEquationAlpha?: number | undefined;\n    blending?: Blending | undefined;\n    blendSrc?: BlendingSrcFactor | BlendingDstFactor | undefined;\n    blendSrcAlpha?: number | undefined;\n    clipIntersection?: boolean | undefined;\n    clippingPlanes?: Plane[] | undefined;\n    clipShadows?: boolean | undefined;\n    colorWrite?: boolean | undefined;\n    defines?: any;\n    depthFunc?: DepthModes | undefined;\n    depthTest?: boolean | undefined;\n    depthWrite?: boolean | undefined;\n    name?: string | undefined;\n    opacity?: number | undefined;\n    polygonOffset?: boolean | undefined;\n    polygonOffsetFactor?: number | undefined;\n    polygonOffsetUnits?: number | undefined;\n    precision?: \"highp\" | \"mediump\" | \"lowp\" | null | undefined;\n    premultipliedAlpha?: boolean | undefined;\n    forceSinglePass?: boolean | undefined;\n    dithering?: boolean | undefined;\n    side?: Side | undefined;\n    shadowSide?: Side | undefined;\n    toneMapped?: boolean | undefined;\n    transparent?: boolean | undefined;\n    vertexColors?: boolean | undefined;\n    visible?: boolean | undefined;\n    format?: PixelFormat | undefined;\n    stencilWrite?: boolean | undefined;\n    stencilFunc?: StencilFunc | undefined;\n    stencilRef?: number | undefined;\n    stencilWriteMask?: number | undefined;\n    stencilFuncMask?: number | undefined;\n    stencilFail?: StencilOp | undefined;\n    stencilZFail?: StencilOp | undefined;\n    stencilZPass?: StencilOp | undefined;\n    userData?: Record<string, any> | undefined;\n}\n\n/**\n * Materials describe the appearance of objects. They are defined in a (mostly) renderer-independent way, so you don't have to rewrite materials if you decide to use a different renderer.\n */\nexport class Material extends EventDispatcher<{ dispose: {} }> {\n    constructor();\n\n    /**\n     * Read-only flag to check if a given object is of type {@link Material}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMaterial: true;\n\n    /**\n     * Enables alpha hashed transparency, an alternative to {@link .transparent} or {@link .alphaTest}. The material\n     * will not be rendered if opacity is lower than a random threshold. Randomization introduces some grain or noise,\n     * but approximates alpha blending without the associated problems of sorting. Using TAARenderPass can reduce the\n     * resulting noise.\n     */\n    alphaHash: boolean;\n\n    /**\n     * Enables alpha to coverage. Can only be used with MSAA-enabled rendering contexts (meaning when the renderer was\n     * created with *antialias* parameter set to `true`). Enabling this will smooth aliasing on clip plane edges and\n     * alphaTest-clipped edges.\n     * @default false\n     */\n    alphaToCoverage: boolean;\n\n    /**\n     * Represents the alpha value of the constant blend color. This property has only an effect when using custom\n     * blending with {@link ConstantAlphaFactor} or {@link OneMinusConstantAlphaFactor}.\n     * @default 0\n     */\n    blendAlpha: number;\n\n    /**\n     * Represent the RGB values of the constant blend color. This property has only an effect when using custom\n     * blending with {@link ConstantColorFactor} or {@link OneMinusConstantColorFactor}.\n     * @default 0x000000\n     */\n    blendColor: Color;\n\n    /**\n     * Blending destination. It's one of the blending mode constants defined in Three.js. Default is {@link OneMinusSrcAlphaFactor}.\n     * @default THREE.OneMinusSrcAlphaFactor\n     */\n    blendDst: BlendingDstFactor;\n\n    /**\n     * The tranparency of the .blendDst. Default is null.\n     * @default null\n     */\n    blendDstAlpha: number | null;\n\n    /**\n     * Blending equation to use when applying blending. It's one of the constants defined in Three.js. Default is {@link AddEquation}.\n     * @default THREE.AddEquation\n     */\n    blendEquation: BlendingEquation;\n\n    /**\n     * The tranparency of the .blendEquation. Default is null.\n     * @default null\n     */\n    blendEquationAlpha: number | null;\n\n    /**\n     * Which blending to use when displaying objects with this material. Default is {@link NormalBlending}.\n     * @default THREE.NormalBlending\n     */\n    blending: Blending;\n\n    /**\n     * Blending source. It's one of the blending mode constants defined in Three.js. Default is {@link SrcAlphaFactor}.\n     * @default THREE.SrcAlphaFactor\n     */\n    blendSrc: BlendingSrcFactor | BlendingDstFactor;\n\n    /**\n     * The tranparency of the .blendSrc. Default is null.\n     * @default null\n     */\n    blendSrcAlpha: number | null;\n\n    /**\n     * Changes the behavior of clipping planes so that only their intersection is clipped, rather than their union. Default is false.\n     * @default false\n     */\n    clipIntersection: boolean;\n\n    /**\n     * User-defined clipping planes specified as THREE.Plane objects in world space.\n     * These planes apply to the objects this material is attached to.\n     * Points in space whose signed distance to the plane is negative are clipped (not rendered).\n     * See the WebGL / clipping /intersection example. Default is null.\n     * @default null\n     */\n    clippingPlanes: Plane[] | null;\n\n    /**\n     * Defines whether to clip shadows according to the clipping planes specified on this material. Default is false.\n     * @default false\n     */\n    clipShadows: boolean;\n\n    /**\n     * Whether to render the material's color. This can be used in conjunction with a mesh's .renderOrder property to create invisible objects that occlude other objects. Default is true.\n     * @default true\n     */\n    colorWrite: boolean;\n\n    /**\n     * Custom defines to be injected into the shader. These are passed in form of an object literal, with key/value pairs. { MY_CUSTOM_DEFINE: '' , PI2: Math.PI * 2 }.\n     * The pairs are defined in both vertex and fragment shaders. Default is undefined.\n     * @default undefined\n     */\n    defines: undefined | { [key: string]: any };\n\n    /**\n     * Which depth function to use. Default is {@link LessEqualDepth}. See the depth mode constants for all possible values.\n     * @default THREE.LessEqualDepth\n     */\n    depthFunc: DepthModes;\n\n    /**\n     * Whether to have depth test enabled when rendering this material. When the depth test is disabled, the depth write\n     * will also be implicitly disabled.\n     * @default true\n     */\n    depthTest: boolean;\n\n    /**\n     * Whether rendering this material has any effect on the depth buffer. Default is true.\n     * When drawing 2D overlays it can be useful to disable the depth writing in order to layer several things together without creating z-index artifacts.\n     * @default true\n     */\n    depthWrite: boolean;\n\n    /**\n     * Unique number of this material instance.\n     */\n    id: number;\n\n    /**\n     * Whether rendering this material has any effect on the stencil buffer. Default is *false*.\n     * @default false\n     */\n    stencilWrite: boolean;\n\n    /**\n     * The stencil comparison function to use. Default is {@link AlwaysStencilFunc}. See stencil operation constants for all possible values.\n     * @default THREE.AlwaysStencilFunc\n     */\n    stencilFunc: StencilFunc;\n\n    /**\n     * The value to use when performing stencil comparisons or stencil operations. Default is *0*.\n     * @default 0\n     */\n    stencilRef: number;\n\n    /**\n     * The bit mask to use when writing to the stencil buffer. Default is *0xFF*.\n     * @default 0xff\n     */\n    stencilWriteMask: number;\n\n    /**\n     * The bit mask to use when comparing against the stencil buffer. Default is *0xFF*.\n     * @default 0xff\n     */\n    stencilFuncMask: number;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns false. Default is {@link KeepStencilOp}. See the stencil operation constants for all possible values.\n     * @default THREE.KeepStencilOp\n     */\n    stencilFail: StencilOp;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns true but the depth test fails.\n     * Default is {@link KeepStencilOp}.\n     * See the stencil operation constants for all possible values.\n     * @default THREE.KeepStencilOp\n     */\n    stencilZFail: StencilOp;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns true and the depth test passes.\n     * Default is {@link KeepStencilOp}.\n     * See the stencil operation constants for all possible values.\n     * @default THREE.KeepStencilOp\n     */\n    stencilZPass: StencilOp;\n\n    /**\n     * Material name. Default is an empty string.\n     * @default ''\n     */\n    name: string;\n\n    /**\n     * Opacity. Default is 1.\n     * @default 1\n     */\n    opacity: number;\n\n    /**\n     * Whether to use polygon offset. Default is false. This corresponds to the POLYGON_OFFSET_FILL WebGL feature.\n     * @default false\n     */\n    polygonOffset: boolean;\n\n    /**\n     * Sets the polygon offset factor. Default is 0.\n     * @default 0\n     */\n    polygonOffsetFactor: number;\n\n    /**\n     * Sets the polygon offset units. Default is 0.\n     * @default 0\n     */\n    polygonOffsetUnits: number;\n\n    /**\n     * Override the renderer's default precision for this material. Can be \"highp\", \"mediump\" or \"lowp\". Defaults is null.\n     * @default null\n     */\n    precision: \"highp\" | \"mediump\" | \"lowp\" | null;\n\n    /**\n     * Whether to premultiply the alpha (transparency) value. See WebGL / Materials / Transparency for an example of the difference. Default is false.\n     * @default false\n     */\n    premultipliedAlpha: boolean;\n\n    /**\n     * @default false\n     */\n    forceSinglePass: boolean;\n\n    /**\n     * Whether to apply dithering to the color to remove the appearance of banding. Default is false.\n     * @default false\n     */\n    dithering: boolean;\n\n    /**\n     * Defines which of the face sides will be rendered - front, back or both.\n     * Default is {@link THREE.FrontSide}. Other options are {@link THREE.BackSide} and {@link THREE.DoubleSide}.\n     *\n     * @default {@link THREE.FrontSide}\n     */\n    side: Side;\n\n    /**\n     * Defines which of the face sides will cast shadows. Default is *null*.\n     * If *null*, the value is opposite that of side, above.\n     * @default null\n     */\n    shadowSide: Side | null;\n\n    /**\n     * Defines whether this material is tone mapped according to the renderer's\n     * {@link WebGLRenderer.toneMapping toneMapping} setting. It is ignored when rendering to a render target or using\n     * post processing.\n     * @default true\n     */\n    toneMapped: boolean;\n\n    /**\n     * Defines whether this material is transparent. This has an effect on rendering as transparent objects need special treatment and are rendered after non-transparent objects.\n     * When set to true, the extent to which the material is transparent is controlled by setting it's .opacity property.\n     * @default false\n     */\n    transparent: boolean;\n\n    /**\n     * Value is the string 'Material'. This shouldn't be changed, and can be used to find all objects of this type in a scene.\n     * @default 'Material'\n     */\n    type: string;\n\n    /**\n     * UUID of this material instance. This gets automatically assigned, so this shouldn't be edited.\n     */\n    uuid: string;\n\n    /**\n     * Defines whether vertex coloring is used. Default is false.\n     * @default false\n     */\n    vertexColors: boolean;\n\n    /**\n     * Defines whether this material is visible. Default is true.\n     * @default true\n     */\n    visible: boolean;\n\n    /**\n     * An object that can be used to store custom data about the Material. It should not hold references to functions as these will not be cloned.\n     * @default {}\n     */\n    userData: Record<string, any>;\n\n    /**\n     * This starts at 0 and counts how many times .needsUpdate is set to true.\n     * @default 0\n     */\n    version: number;\n\n    /**\n     * Gets the alpha value to be used when running an alpha test. Default is 0.\n     * @default 0\n     */\n    get alphaTest(): number;\n\n    /**\n     * Sets the alpha value to be used when running an alpha test. Default is 0.\n     * @default 0\n     */\n    set alphaTest(value: number);\n\n    onBuild(object: Object3D, parameters: WebGLProgramParametersWithUniforms, renderer: WebGLRenderer): void;\n\n    onBeforeRender(\n        renderer: WebGLRenderer,\n        scene: Scene,\n        camera: Camera,\n        geometry: BufferGeometry,\n        object: Object3D,\n        group: Group,\n    ): void;\n\n    /**\n     * An optional callback that is executed immediately before the shader program is compiled.\n     * This function is called with the associated WebGL program parameters and renderer.\n     * Useful for the modification of built-in materials.\n     * @param parameters WebGL program parameters\n     * @param renderer WebGLRenderer context that is initializing the material\n     */\n    onBeforeCompile(parameters: WebGLProgramParametersWithUniforms, renderer: WebGLRenderer): void;\n\n    /**\n     * In case onBeforeCompile is used, this callback can be used to identify values of settings used in onBeforeCompile, so three.js can reuse a cached shader or recompile the shader as needed.\n     */\n    customProgramCacheKey(): string;\n\n    /**\n     * Sets the properties based on the values.\n     * @param values A container with parameters.\n     */\n    setValues(values: MaterialParameters): void;\n\n    /**\n     * Convert the material to three.js JSON format.\n     * @param meta Object containing metadata such as textures or images for the material.\n     */\n    toJSON(meta?: any): any;\n\n    /**\n     * Return a new material with the same parameters as this material.\n     */\n    clone(): this;\n\n    /**\n     * Copy the parameters from the passed material into this material.\n     * @param material\n     */\n    copy(material: Material): this;\n\n    /**\n     * This disposes the material. Textures of a material don't get disposed. These needs to be disposed by {@link Texture}.\n     */\n    dispose(): void;\n\n    /**\n     * Specifies that the material needs to be updated, WebGL wise. Set it to true if you made changes that need to be reflected in WebGL.\n     * This property is automatically set to true when instancing a new material.\n     * @default false\n     */\n    set needsUpdate(value: boolean);\n}\n",
      "@types/three@~0/src/extras/curves/ArcCurve.d.ts": "import { EllipseCurve } from \"./EllipseCurve.d.ts\";\n\n/**\n * Alias for {@link THREE.EllipseCurve | EllipseCurve}.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/ArcCurve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/ArcCurve.js | Source}\n */\nexport class ArcCurve extends EllipseCurve {\n    /**\n     * This constructor creates a new {@link ArcCurve}.\n     * @param aX The X center of the ellipse. Expects a `Float`. Default is `0`.\n     * @param aY The Y center of the ellipse. Expects a `Float`. Default is `0`.\n     * @param xRadius The radius of the ellipse in the x direction. Expects a `Float`. Default is `1`.\n     * @param yRadius The radius of the ellipse in the y direction. Expects a `Float`. Default is `1`.\n     * @param aStartAngle The start angle of the curve in radians starting from the positive X axis. Default is `0`.\n     * @param aEndAngle The end angle of the curve in radians starting from the positive X axis. Default is `2 x Math.PI`.\n     * @param aClockwise Whether the ellipse is drawn clockwise. Default is `false`.\n     */\n    constructor(\n        aX?: number,\n        aY?: number,\n        aRadius?: number,\n        aStartAngle?: number,\n        aEndAngle?: number,\n        aClockwise?: boolean,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link ArcCurve}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isArcCurve = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `ArcCurve`\n     */\n    override readonly type: string | \"ArcCurve\";\n}\n",
      "@types/three@~0/src/extras/curves/CatmullRomCurve3.d.ts": "import { Vector3 } from \"../../math/Vector3.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\nexport type CurveType = \"centripetal\" | \"chordal\" | \"catmullrom\";\n\n/**\n * Create a smooth **3D** spline curve from a series of points using the {@link https://en.wikipedia.org/wiki/Centripetal_Catmull-Rom_spline | Catmull-Rom} algorithm.\n * @example\n * ```typescript\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3([\n * new THREE.Vector3(-10, 0, 10),\n * new THREE.Vector3(-5, 5, 5),\n * new THREE.Vector3(0, 0, 0),\n * new THREE.Vector3(5, -5, 5),\n * new THREE.Vector3(10, 0, 10)]);\n * const points = curve.getPoints(50);\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({\n *     color: 0xff0000\n * });\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line(geometry, material);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_geometry_extrude_splines | WebGL / geometry / extrude / splines}\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/CatmullRomCurve3 | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/CatmullRomCurve3.js | Source}\n */\nexport class CatmullRomCurve3 extends Curve<Vector3> {\n    /**\n     * This constructor creates a new {@link CatmullRomCurve3}.\n     * @param points An array of {@link THREE.Vector3 | Vector3} points\n     * @param closed Whether the curve is closed. Default `false`\n     * @param curveType Type of the curve. Default `centripetal`\n     * @param tension Tension of the curve. Expects a `Float`. Default `0.5`\n     */\n    constructor(points?: Vector3[], closed?: boolean, curveType?: CurveType, tension?: number);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link CatmullRomCurve3}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCatmullRomCurve3 = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `CatmullRomCurve3`\n     */\n    override readonly type: string | \"CatmullRomCurve3\";\n\n    /**\n     * The curve will loop back onto itself when this is true.\n     * @defaultValue `false`\n     */\n    closed: boolean;\n\n    /**\n     * The array of {@link THREE.Vector3 | Vector3} points that define the curve.\n     * @remarks It needs at least two entries.\n     * @defaultValue `[]`\n     */\n    points: Vector3[];\n\n    /**\n     * Possible values are `centripetal`, `chordal` and `catmullrom`.\n     * @defaultValue `centripetal`\n     */\n    curveType: CurveType;\n\n    /**\n     * When {@link .curveType} is `catmullrom`, defines catmullrom's tension.\n     * @remarks Expects a `Float`\n     */\n    tension: number;\n}\n",
      "@types/three@~0/src/extras/curves/CubicBezierCurve.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * Create a smooth **2D** {@link http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg | cubic bezier curve},\n * defined by a start point, endpoint and two control points.\n * @example\n * ```typescript\n * const curve = new THREE.CubicBezierCurve(\n * new THREE.Vector2(-10, 0),\n * new THREE.Vector2(-5, 15),\n * new THREE.Vector2(20, 15),\n * new THREE.Vector2(10, 0));\n * const points = curve.getPoints(50);\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({\n *     color: 0xff0000\n * });\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line(geometry, material);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/CubicBezierCurve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/CubicBezierCurve.js | Source}\n */\nexport class CubicBezierCurve extends Curve<Vector2> {\n    /**\n     * This constructor creates a new {@link CubicBezierCurve}.\n     * @param v0 The starting point. Default is `new THREE.Vector2()`.\n     * @param v1 The first control point. Default is `new THREE.Vector2()`.\n     * @param v2 The second control point. Default is `new THREE.Vector2()`.\n     * @param v3 The ending point. Default is `new THREE.Vector2()`.\n     */\n    constructor(v0?: Vector2, v1?: Vector2, v2?: Vector2, v3?: Vector2);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link CubicBezierCurve}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCubicBezierCurve = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `CubicBezierCurve`\n     */\n    override readonly type: string | \"CubicBezierCurve\";\n\n    /**\n     * The starting point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v0: Vector2;\n\n    /**\n     * The first control point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v1: Vector2;\n\n    /**\n     * The second control point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v2: Vector2;\n\n    /**\n     * The ending point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v3: Vector2;\n}\n",
      "@types/three@~0/src/extras/curves/CubicBezierCurve3.d.ts": "import { Vector3 } from \"../../math/Vector3.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * Create a smooth **3D** {@link http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg | cubic bezier curve},\n * defined by a start point, endpoint and two control points.\n * @example\n * ```typescript\n * const curve = new THREE.CubicBezierCurve(\n * new THREE.Vector2(-10, 0),\n * new THREE.Vector2(-5, 15),\n * new THREE.Vector2(20, 15),\n * new THREE.Vector2(10, 0));\n * const points = curve.getPoints(50);\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({\n *     color: 0xff0000\n * });\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line(geometry, material);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/CubicBezierCurve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/CubicBezierCurve.js | Source}\n */\nexport class CubicBezierCurve3 extends Curve<Vector3> {\n    /**\n     * This constructor creates a new {@link CubicBezierCurve3}.\n     * @param v0 The starting point. Default is `new THREE.Vector3()`.\n     * @param v1 The first control point. Default is `new THREE.Vector3()`.\n     * @param v2 The second control point. Default is `new THREE.Vector3()`.\n     * @param v3 The ending point. Default is `new THREE.Vector3()`.\n     */\n    constructor(v0?: Vector3, v1?: Vector3, v2?: Vector3, v3?: Vector3);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link CubicBezierCurve3}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isCubicBezierCurve3 = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `CubicBezierCurve3`\n     */\n    override readonly type: string | \"CubicBezierCurve3\";\n\n    /**\n     * The starting point.\n     * @defaultValue `new THREE.Vector3()`.\n     */\n    v0: Vector3;\n\n    /**\n     * The first control point.\n     * @defaultValue `new THREE.Vector3()`.\n     */\n    v1: Vector3;\n\n    /**\n     * The second control point.\n     * @defaultValue `new THREE.Vector3()`.\n     */\n    v2: Vector3;\n\n    /**\n     * The ending point.\n     * @defaultValue `new THREE.Vector3()`.\n     */\n    v3: Vector3;\n}\n",
      "@types/three@~0/src/extras/curves/EllipseCurve.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * Creates a 2d curve in the shape of an ellipse\n * @remarks\n * Setting the {@link xRadius} equal to the {@link yRadius} will result in a circle.\n * @example\n * ```typescript\n * const curve = new THREE.EllipseCurve(\n *   0,  0,  // ax, aY\n *   10, 10, // xRadius, yRadius\n *   0,  2 * Math.PI, // aStartAngle, aEndAngle\n *   false,  // aClockwise\n *   0       // aRotation\n *   );\n * const points = curve.getPoints(50);\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n * // Create the final object to add to the scene\n * const ellipse = new THREE.Line(geometry, material);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/EllipseCurve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/EllipseCurve.js | Source}\n */\nexport class EllipseCurve extends Curve<Vector2> {\n    /**\n     * This constructor creates a new {@link EllipseCurve}.\n     * @param aX The X center of the ellipse. Expects a `Float`. Default is `0`.\n     * @param aY The Y center of the ellipse. Expects a `Float`. Default is `0`.\n     * @param xRadius The radius of the ellipse in the x direction. Expects a `Float`. Default is `1`.\n     * @param yRadius The radius of the ellipse in the y direction. Expects a `Float`. Default is `1`.\n     * @param aStartAngle The start angle of the curve in radians starting from the positive X axis. Default is `0`.\n     * @param aEndAngle The end angle of the curve in radians starting from the positive X axis. Default is `2 x Math.PI`.\n     * @param aClockwise Whether the ellipse is drawn clockwise. Default is `false`.\n     * @param aRotation The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Default is `0`.\n     */\n    constructor(\n        aX?: number,\n        aY?: number,\n        xRadius?: number,\n        yRadius?: number,\n        aStartAngle?: number,\n        aEndAngle?: number,\n        aClockwise?: boolean,\n        aRotation?: number,\n    );\n\n    /**\n     * Read-only flag to check if a given object is of type {@link EllipseCurve}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isEllipseCurve = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `EllipseCurve`\n     */\n    override readonly type: string | \"EllipseCurve\";\n\n    /**\n     * The X center of the ellipse.\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    aX: number;\n\n    /**\n     * The Y center of the ellipse.\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    aY: number;\n\n    /**\n     * The radius of the ellipse in the x direction.\n     * @defaultValue `1`\n     */\n    xRadius: number;\n\n    /**\n     * The radius of the ellipse in the y direction.\n     * @defaultValue `1`\n     */\n    yRadius: number;\n\n    /**\n     * The start angle of the curve in radians starting from the middle right side.\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    aStartAngle: number;\n\n    /**\n     * The end angle of the curve in radians starting from the middle right side.\n     * @remarks Expects a `Float`\n     * @defaultValue `2 * Math.PI`\n     */\n    aEndAngle: number;\n\n    /**\n     * Whether the ellipse is drawn clockwise.\n     * @defaultValue `false``\n     */\n    aClockwise: boolean;\n\n    /**\n     * The rotation angle of the ellipse in radians, counterclockwise from the positive X axis (optional).\n     * @remarks Expects a `Float`\n     * @defaultValue `0`\n     */\n    aRotation: number;\n}\n",
      "@types/three@~0/src/extras/curves/LineCurve.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * A curve representing a **2D** line segment.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/LineCurve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/LineCurve.js | Source}\n */\nexport class LineCurve extends Curve<Vector2> {\n    /**\n     * This constructor creates a new {@link LineCurve}.\n     * @param v1 The start point. Default is `new THREE.Vector2()`.\n     * @param v2 The end point. Default is `new THREE.Vector2()`.\n     */\n    constructor(v1?: Vector2, v2?: Vector2);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LineCurve}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLineCurve = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `LineCurve`\n     */\n    override readonly type: string | \"LineCurve\";\n\n    /**\n     * The start point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v1: Vector2;\n\n    /**\n     * The end point\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v2: Vector2;\n}\n",
      "@types/three@~0/src/extras/curves/LineCurve3.d.ts": "import { Vector3 } from \"../../math/Vector3.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * A curve representing a **3D** line segment.\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/LineCurve3 | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/LineCurve3.js | Source}\n */\nexport class LineCurve3 extends Curve<Vector3> {\n    /**\n     * This constructor creates a new {@link LineCurve3}.\n     * @param v1 The start point. Default is `new THREE.Vector3()`.\n     * @param v2 The end point. Default is `new THREE.Vector3()`.\n     */\n    constructor(v1?: Vector3, v2?: Vector3);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LineCurve3}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLineCurve3 = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `LineCurve3`\n     */\n    override readonly type: string | \"LineCurve3\";\n\n    /**\n     * The start point.\n     * @defaultValue `new THREE.Vector3()`.\n     */\n    v1: Vector3;\n\n    /**\n     * The end point.\n     * @defaultValue `new THREE.Vector3()`.\n     */\n    v2: Vector3;\n}\n",
      "@types/three@~0/src/extras/curves/QuadraticBezierCurve.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * Create a smooth **2D** {@link http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif | quadratic bezier curve},\n * defined by a start point, end point and a single control point.\n * @example\n * ```typescript\n * const curve = new THREE.QuadraticBezierCurve(\n * new THREE.Vector2(-10, 0),\n * new THREE.Vector2(20, 15),\n * new THREE.Vector2(10, 0));\n * const points = curve.getPoints(50);\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({\n *     color: 0xff0000\n * });\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line(geometry, material);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/QuadraticBezierCurve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/QuadraticBezierCurve.js | Source}\n */\nexport class QuadraticBezierCurve extends Curve<Vector2> {\n    /**\n     * This constructor creates a new {@link QuadraticBezierCurve}.\n     * @param v0 The start point. Default is `new THREE.Vector2()`.\n     * @param v1 The control point. Default is `new THREE.Vector2()`.\n     * @param v2 The end point. Default is `new THREE.Vector2()`.\n     */\n    constructor(v0?: Vector2, v1?: Vector2, v2?: Vector2);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LineCurve3}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isQuadraticBezierCurve = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `QuadraticBezierCurve`\n     */\n    override readonly type: string | \"QuadraticBezierCurve\";\n\n    /**\n     * The start point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v0: Vector2;\n\n    /**\n     * The control point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v1: Vector2;\n\n    /**\n     * The end point.\n     * @defaultValue `new THREE.Vector2()`\n     */\n    v2: Vector2;\n}\n",
      "@types/three@~0/src/extras/curves/QuadraticBezierCurve3.d.ts": "import { Vector3 } from \"../../math/Vector3.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * Create a smooth **3D** {@link http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif | quadratic bezier curve},\n * defined by a start point, end point and a single control point.\n * @example\n * ```typescript\n * const curve = new THREE.QuadraticBezierCurve3(\n * new THREE.Vector3(-10, 0, 0),\n * new THREE.Vector3(20, 15, 0),\n * new THREE.Vector3(10, 0, 0));\n * const points = curve.getPoints(50);\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({\n *     color: 0xff0000\n * });\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line(geometry, material);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/QuadraticBezierCurve3 | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/QuadraticBezierCurve3.js | Source}\n */\nexport class QuadraticBezierCurve3 extends Curve<Vector3> {\n    /**\n     * This constructor creates a new {@link QuadraticBezierCurve}.\n     * @param v0 The start point. Default is `new THREE.Vector3()`.\n     * @param v1 The control point. Default is `new THREE.Vector3()`.\n     * @param v2 The end point. Default is `new THREE.Vector3()`.\n     */\n    constructor(v0?: Vector3, v1?: Vector3, v2?: Vector3);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link QuadraticBezierCurve3}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isQuadraticBezierCurve3 = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `QuadraticBezierCurve3`\n     */\n    override readonly type: string | \"QuadraticBezierCurve3\";\n\n    /**\n     * The start point.\n     * @defaultValue `new THREE.Vector3()`\n     */\n    v0: Vector3;\n\n    /**\n     * The control point.\n     * @defaultValue `new THREE.Vector3()`\n     */\n    v1: Vector3;\n\n    /**\n     * The end point.\n     * @defaultValue `new THREE.Vector3()`\n     */\n    v2: Vector3;\n}\n",
      "@types/three@~0/src/extras/curves/SplineCurve.d.ts": "import { Vector2 } from \"../../math/Vector2.d.ts\";\nimport { Curve } from \"../core/Curve.d.ts\";\n\n/**\n * Create a smooth **2D** spline curve from a series of points.\n * @example\n * ```typescript\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve([\n * new THREE.Vector2(-10, 0),\n * new THREE.Vector2(-5, 5),\n * new THREE.Vector2(0, 0),\n * new THREE.Vector2(5, -5),\n * new THREE.Vector2(10, 0)]);\n * const points = curve.getPoints(50);\n * const geometry = new THREE.BufferGeometry().setFromPoints(points);\n * const material = new THREE.LineBasicMaterial({\n *     color: 0xff0000\n * });\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line(geometry, material);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/extras/curves/SplineCurve | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/extras/curves/SplineCurve.js | Source}\n */\nexport class SplineCurve extends Curve<Vector2> {\n    /**\n     * This constructor creates a new {@link SplineCurve}.\n     * @param points An array of {@link THREE.Vector2 | Vector2} points that define the curve. Default `[]`\n     */\n    constructor(points?: Vector2[]);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link SplineCurve}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSplineCurve = true;\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `SplineCurve`\n     */\n    override readonly type: string | \"SplineCurve\";\n\n    /**\n     * The array of {@link THREE.Vector2 | Vector2} points that define the curve.\n     * @defaultValue `[]`\n     */\n    points: Vector2[];\n}\n",
      "@types/three@~0/src/geometries/BoxGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * {@link BoxGeometry} is a geometry class for a rectangular cuboid with a given 'width', 'height', and 'depth'\n * @remarks On creation, the cuboid is centred on the origin, with each edge parallel to one of the axes.\n * @example\n * ```typescript\n * const geometry = new THREE.BoxGeometry(1, 1, 1);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0x00ff00\n * });\n * const cube = new THREE.Mesh(geometry, material);\n * scene.add(cube);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/BoxGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/BoxGeometry.js | Source}\n */\nexport class BoxGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link BoxGeometry}\n     * @param width Width; that is, the length of the edges parallel to the X axis. Optional; Expects a `Float`. Default `1`\n     * @param height Height; that is, the length of the edges parallel to the Y axis. Optional; Expects a `Float`. Default `1`\n     * @param depth Depth; that is, the length of the edges parallel to the Z axis. Optional; Expects a `Float`. Default `1`\n     * @param widthSegments Number of segmented rectangular faces along the width of the sides. Optional; Expects a `Integer`. Default `1`\n     * @param heightSegments Number of segmented rectangular faces along the height of the sides. Optional; Expects a `Integer`. Default `1`\n     * @param depthSegments Number of segmented rectangular faces along the depth of the sides. Optional; Expects a `Integer`. Default `1`\n     */\n    constructor(\n        width?: number,\n        height?: number,\n        depth?: number,\n        widthSegments?: number,\n        heightSegments?: number,\n        depthSegments?: number,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `BoxGeometry`\n     */\n    override readonly type: string | \"BoxGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly width: number;\n        readonly height: number;\n        readonly depth: number;\n        readonly widthSegments: number;\n        readonly heightSegments: number;\n        readonly depthSegments: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): BoxGeometry;\n}\n",
      "@types/three@~0/src/geometries/CapsuleGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * {@link CapsuleGeometry} is a geometry class for a capsule with given radii and height\n * @remarks It is constructed using a lathe.\n * @example\n * ```typescript\n * const geometry = new THREE.CapsuleGeometry(1, 1, 4, 8);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0x00ff00\n * });\n * const capsule = new THREE.Mesh(geometry, material);\n * scene.add(capsule);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/CapsuleGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/CapsuleGeometry.js | Source}\n */\nexport class CapsuleGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link CapsuleGeometry}\n     * @param radius Radius of the capsule. Expects a `Float`. Default `1`\n     * @param length Length of the middle section. Expects a `Float`. Default `1`\n     * @param capSegments Number of curve segments used to build the caps. Expects a `Integer`. Default `4`\n     * @param radialSegments Number of segmented faces around the circumference of the capsule. Expects a `Integer`. Default `8`\n     */\n    constructor(radius?: number, length?: number, capSegments?: number, radialSegments?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `CapsuleGeometry`\n     */\n    override readonly type: string | \"CapsuleGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly radius: number;\n        readonly length: number;\n        readonly capSegments: number;\n        readonly radialSegments: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): CapsuleGeometry;\n}\n",
      "@types/three@~0/src/geometries/CircleGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * {@link CircleGeometry} is a simple shape of Euclidean geometry\n * @remarks\n * It is constructed from a number of triangular segments that are oriented around a central point and extend as far out as a given radius\n * It is built counter-clockwise from a start angle and a given central angle\n * It can also be used to create regular polygons, where the number of segments determines the number of sides.\n * @example\n * ```typescript\n * const geometry = new THREE.CircleGeometry(5, 32);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const circle = new THREE.Mesh(geometry, material);\n * scene.add(circle);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/CircleGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/CircleGeometry.js | Source}\n */\nexport class CircleGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link CircleGeometry}\n     * @param radius Radius of the circle. Expects a `Float`. Default `1`\n     * @param segments Number of segments (triangles). Expects a `Integer`. Minimum `3`. Default `32`\n     * @param thetaStart Start angle for first segment. Expects a `Float`. Default `0`, _(three o'clock position)_.\n     * @param thetaLength The central angle, often called theta, of the circular sector. Expects a `Float`. Default `Math.PI * 2`, _which makes for a complete circle_.\n     */\n    constructor(radius?: number, segments?: number, thetaStart?: number, thetaLength?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `CircleGeometry`\n     */\n    override readonly type: string | \"CircleGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly radius: number;\n        readonly segments: number;\n        readonly thetaStart: number;\n        readonly thetaLength: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): CircleGeometry;\n}\n",
      "@types/three@~0/src/geometries/ConeGeometry.d.ts": "import { CylinderGeometry } from \"./CylinderGeometry.d.ts\";\n\n/**\n * A class for generating cone geometries.\n * @example\n * ```typescript\n * const geometry = new THREE.ConeGeometry(5, 20, 32);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const cone = new THREE.Mesh(geometry, material);\n * scene.add(cone);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/ConeGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/ConeGeometry.js | Source}\n */\nexport class ConeGeometry extends CylinderGeometry {\n    /**\n     * Create a new instance of {@link ConeGeometry}\n     * @param radius Radius of the cone base. Expects a `Float`. Default `1`\n     * @param height Height of the cone. Expects a `Float`. Default `1`\n     * @param radialSegments Number of segmented faces around the circumference of the cone. Expects a `Integer`. Default `32`\n     * @param heightSegments Number of rows of faces along the height of the cone. Expects a `Integer`. Default `1`\n     * @param openEnded A Boolean indicating whether the base of the cone is open or capped. Default `false`, _meaning capped_.\n     * @param thetaStart Start angle for first segment. Expects a `Float`. Default `0`, _(three o'clock position)_.\n     * @param thetaLength The central angle, often called theta, of the circular sector. Expects a `Float`. Default `Math.PI * 2`, _which makes for a complete cone_.\n     */\n    constructor(\n        radius?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `ConeGeometry`\n     */\n    override readonly type: string | \"ConeGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks {@link radiusTop} and {@link radiusBottom} are from base {@link THREE.CylinderGeometry} class.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    override readonly parameters: {\n        readonly radius: number;\n        readonly radiusTop: number;\n        readonly radiusBottom: number;\n        readonly height: number;\n        readonly radialSegments: number;\n        readonly heightSegments: number;\n        readonly openEnded: boolean;\n        readonly thetaStart: number;\n        readonly thetaLength: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): ConeGeometry;\n}\n",
      "@types/three@~0/src/geometries/CylinderGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * A class for generating cylinder geometries.\n * @example\n * ```typescript\n * const geometry = new THREE.CylinderGeometry(5, 5, 20, 32);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const cylinder = new THREE.Mesh(geometry, material);\n * scene.add(cylinder);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/CylinderGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/CylinderGeometry.js | Source}\n */\nexport class CylinderGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link CylinderGeometry}\n     * @param radiusTop Radius of the cylinder at the top. Default `1`\n     * @param radiusBottom Radius of the cylinder at the bottom. Default `1`\n     * @param height Height of the cylinder. Default `1`\n     * @param radialSegments Number of segmented faces around the circumference of the cylinder. Default `32`\n     * @param heightSegments Number of rows of faces along the height of the cylinder. Expects a `Integer`. Default `1`\n     * @param openEnded A Boolean indicating whether the ends of the cylinder are open or capped. Default `false`, _meaning capped_.\n     * @param thetaStart Start angle for first segment. Default `0`, _(three o'clock position)_.\n     * @param thetaLength The central angle, often called theta, of the circular sector. Default `Math.PI * 2`, _which makes for a complete cylinder.\n     */\n    constructor(\n        radiusTop?: number,\n        radiusBottom?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `CylinderGeometry`\n     */\n    override readonly type: string | \"CylinderGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly radiusTop: number;\n        readonly radiusBottom: number;\n        readonly height: number;\n        readonly radialSegments: number;\n        readonly heightSegments: number;\n        readonly openEnded: boolean;\n        readonly thetaStart: number;\n        readonly thetaLength: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: any): CylinderGeometry;\n}\n",
      "@types/three@~0/src/geometries/DodecahedronGeometry.d.ts": "import { PolyhedronGeometry } from \"./PolyhedronGeometry.d.ts\";\n\n/**\n * A class for generating a dodecahedron geometries.\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/DodecahedronGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/DodecahedronGeometry.js | Source}\n */\nexport class DodecahedronGeometry extends PolyhedronGeometry {\n    /**\n     * Create a new instance of {@link DodecahedronGeometry}\n     * @param radius Radius of the dodecahedron. Expects a `Float`. Default `1`\n     * @param detail Setting this to a value greater than 0 adds vertices making it no longer a dodecahedron. Expects a `Integer`. Default `0`\n     */\n    constructor(radius?: number, detail?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `DodecahedronGeometry`\n     */\n    override readonly type: string | \"DodecahedronGeometry\";\n\n    /** @internal */\n    static fromJSON(data: {}): DodecahedronGeometry;\n}\n",
      "@types/three@~0/src/geometries/EdgesGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * This can be used as a helper object to view the edges of a {@link THREE.BufferGeometry | geometry}.\n * @example\n * ```typescript\n * const geometry = new THREE.BoxGeometry(100, 100, 100);\n * const edges = new THREE.EdgesGeometry(geometry);\n * const line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({\n *     color: 0xffffff\n * }));\n * scene.add(line);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_helpers | helpers}\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/EdgesGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/EdgesGeometry.js | Source}\n */\nexport class EdgesGeometry<TBufferGeometry extends BufferGeometry = BufferGeometry> extends BufferGeometry {\n    /**\n     * Create a new instance of {@link EdgesGeometry}\n     * @param geometry Any geometry object. Default `null`.\n     * @param thresholdAngle An edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. Expects a `Integer`. Default `1` _degree_.\n     */\n    constructor(geometry?: TBufferGeometry | null, thresholdAngle?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `EdgesGeometry`\n     */\n    override readonly type: string | \"EdgesGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly geometry: TBufferGeometry | null;\n        readonly thresholdAngle: number;\n    };\n}\n",
      "@types/three@~0/src/geometries/ExtrudeGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Curve } from \"../extras/core/Curve.d.ts\";\nimport { Shape } from \"../extras/core/Shape.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\n\nexport interface ExtrudeGeometryOptions {\n    /**\n     * Number of points on the curves.\n     * Expects a `Integer`.\n     * @defaultValue `12`\n     */\n    curveSegments?: number | undefined;\n\n    /**\n     * Number of points used for subdividing segments along the depth of the extruded spline.\n     * @defaultValue `1`\n     */\n    steps?: number | undefined;\n\n    /**\n     * Depth to extrude the shape.\n     * @defaultValue `1`\n     */\n    depth?: number | undefined;\n\n    /**\n     * Turn on bevel. Applying beveling to the shape.\n     * @defaultValue `true`\n     */\n    bevelEnabled?: boolean | undefined;\n\n    /**\n     * How deep into the original shape the bevel goes.\n     * Expects a `Float`.\n     * @defaultValue `0.2`\n     */\n    bevelThickness?: number | undefined;\n\n    /**\n     * Distance from the shape outline that the bevel extends\n     * Expects a `Float`.\n     * @defaultValue `bevelThickness - 0.1`\n     */\n    bevelSize?: number | undefined;\n\n    /**\n     * Distance from the shape outline that the bevel starts.\n     * Expects a `Float`.\n     * @defaultValue `0`\n     */\n    bevelOffset?: number | undefined;\n\n    /**\n     * Number of bevel layers/segments.\n     * Expects a `Integer`.\n     * @defaultValue `3`\n     */\n    bevelSegments?: number | undefined;\n\n    /**\n     * A 3D spline path along which the shape should be extruded.\n     * @remarks Bevels not supported for path extrusion.\n     */\n    extrudePath?: Curve<Vector3> | undefined;\n\n    /**\n     * A object that provides UV generator functions.\n     */\n    UVGenerator?: UVGenerator | undefined;\n}\n\nexport interface UVGenerator {\n    generateTopUV(\n        geometry: ExtrudeGeometry,\n        vertices: number[],\n        indexA: number,\n        indexB: number,\n        indexC: number,\n    ): Vector2[];\n    generateSideWallUV(\n        geometry: ExtrudeGeometry,\n        vertices: number[],\n        indexA: number,\n        indexB: number,\n        indexC: number,\n        indexD: number,\n    ): Vector2[];\n}\n\n/**\n * Creates extruded geometry from a path shape.\n * @remarks This object extrudes a 2D shape to a 3D geometry.\n * @remarks When creating a Mesh with this geometry, if you'd like to have a separate material used for its face and its extruded sides, you can use an array of materials\n * @remarks The first material will be applied to the face; the second material will be applied to the sides.\n * @example\n * ```typescript\n * const length = 12, width = 8;\n * const shape = new THREE.Shape();\n * shape.moveTo(0, 0);\n * shape.lineTo(0, width);\n * shape.lineTo(length, width);\n * shape.lineTo(length, 0);\n * shape.lineTo(0, 0);\n * const extrudeSettings = {\n *     steps: 2,\n *     depth: 16,\n *     bevelEnabled: true,\n *     bevelThickness: 1,\n *     bevelSize: 1,\n *     bevelOffset: 0,\n *     bevelSegments: 1\n * };\n * const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0x00ff00\n * });\n * const mesh = new THREE.Mesh(geometry, material);\n * scene.add(mesh);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/ExtrudeGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/ExtrudeGeometry.js | Source}\n */\nexport class ExtrudeGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link ExtrudeGeometry}\n     * @param shapes Shape or an array of shapes. Default `new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)])`.\n     * @param options Object that can contain the following parameters. @see {@link ExtrudeGeometryOptions} for defaults.\n     */\n    constructor(shapes?: Shape | Shape[], options?: ExtrudeGeometryOptions);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `ExtrudeGeometry`\n     */\n    override readonly type: string | \"ExtrudeGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly shapes: Shape | Shape[];\n        readonly options: ExtrudeGeometryOptions;\n    };\n\n    addShape(shape: Shape): void;\n\n    /** @internal */\n    static fromJSON(data: {}, shapes: unknown): ExtrudeGeometry;\n}\n",
      "@types/three@~0/src/geometries/IcosahedronGeometry.d.ts": "import { PolyhedronGeometry } from \"./PolyhedronGeometry.d.ts\";\n\n/**\n * A class for generating an icosahedron geometry.\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/IcosahedronGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/IcosahedronGeometry.js | Source}\n */\nexport class IcosahedronGeometry extends PolyhedronGeometry {\n    /**\n     * Create a new instance of {@link IcosahedronGeometry}\n     * @param radius Expects a `Float`. Default `1`\n     * @param detail Setting this to a value greater than 0 adds more vertices making it no longer an icosahedron.\n     *               When detail is greater than 1, it's effectively a sphere. Expects a `Integer`. Default `0`\n     */\n    constructor(radius?: number, detail?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `IcosahedronGeometry`\n     */\n    override readonly type: string | \"IcosahedronGeometry\";\n\n    /** @internal */\n    static fromJSON(data: {}): IcosahedronGeometry;\n}\n",
      "@types/three@~0/src/geometries/LatheGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\n\n/**\n * Creates meshes with axial symmetry like vases\n * @remarks\n * The lathe rotates around the Y axis.\n * @example\n * ```typescript\n * const points = [];\n * for (let i = 0; i & lt; 10; i++) {\n *     points.push(new THREE.Vector2(Math.sin(i * 0.2) * 10 + 5, (i - 5) * 2));\n * }\n * const geometry = new THREE.LatheGeometry(points);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const lathe = new THREE.Mesh(geometry, material);\n * scene.add(lathe);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/LatheGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/LatheGeometry.js | Source}\n */\nexport class LatheGeometry extends BufferGeometry {\n    /**\n     * This creates a {@link LatheGeometry} based on the parameters.\n     * @param points Array of Vector2s. The x-coordinate of each point must be greater than zero.\n     *               Default `[new Vector2(0, -0.5), new Vector2(0.5, 0), new Vector2(0, 0.5)]` _which creates a simple diamond shape_.\n     * @param segments The number of circumference segments to generate. Expects a `Integer`. Default `12`.\n     * @param phiStart The starting angle in radians. Expects a `Float`. Default `0`.\n     * @param phiLength The radian (0 to 2*PI) range of the lathed section 2*PI is a closed lathe, less than 2PI is a portion. Expects a `Float`. Default `Math.PI * 2`.\n     */\n    constructor(points?: Vector2[], segments?: number, phiStart?: number, phiLength?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `LatheGeometry`\n     */\n    override readonly type: string | \"LatheGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly points: Vector2[];\n        readonly segments: number;\n        readonly phiStart: number;\n        readonly phiLength: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): LatheGeometry;\n}\n",
      "@types/three@~0/src/geometries/OctahedronGeometry.d.ts": "import { PolyhedronGeometry } from \"./PolyhedronGeometry.d.ts\";\n\n/**\n * A class for generating an octahedron geometry.\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/OctahedronGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/OctahedronGeometry.js | Source}\n */\nexport class OctahedronGeometry extends PolyhedronGeometry {\n    /**\n     * Create a new instance of {@link OctahedronGeometry}\n     * @param radius Radius of the octahedron. Expects a `Float`. Default `1`\n     * @param detail Setting this to a value greater than zero add vertices making it no longer an octahedron. Expects a `Integer`. Default `0`\n     */\n    constructor(radius?: number, detail?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `OctahedronGeometry`\n     */\n    override readonly type: string | \"OctahedronGeometry\";\n\n    /** @internal */\n    static fromJSON(data: {}): OctahedronGeometry;\n}\n",
      "@types/three@~0/src/geometries/PlaneGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * A class for generating plane geometries.\n * @example\n * ```typescript\n * const geometry = new THREE.PlaneGeometry(1, 1);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00,\n *     side: THREE.DoubleSide\n * });\n * const plane = new THREE.Mesh(geometry, material);\n * scene.add(plane);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/PlaneGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/PlaneGeometry.js | Source}\n */\nexport class PlaneGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link PlaneGeometry}\n     * @param width Width along the X axis. Expects a `Float`. Default `1`\n     * @param height Height along the Y axis. Expects a `Float`. Default `1`\n     * @param widthSegments Number of segmented faces along the width of the sides. Expects a `Integer`. Default `1`\n     * @param heightSegments Number of segmented faces along the height of the sides. Expects a `Integer`. Default `1`\n     */\n    constructor(width?: number, height?: number, widthSegments?: number, heightSegments?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `PlaneGeometry`\n     */\n    override readonly type: string | \"PlaneGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly width: number;\n        readonly height: number;\n        readonly widthSegments: number;\n        readonly heightSegments: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): PlaneGeometry;\n}\n",
      "@types/three@~0/src/geometries/PolyhedronGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * A polyhedron is a solid in three dimensions with flat faces\n * @remarks\n * This class will take an array of vertices, project them onto a sphere, and then divide them up to the desired level of detail\n * This class is used by {@link THREE.DodecahedronGeometry | DodecahedronGeometry}, {@link THREE.IcosahedronGeometry | IcosahedronGeometry},\n * {@link THREE.OctahedronGeometry | OctahedronGeometry}, and {@link THREE.TetrahedronGeometry | TetrahedronGeometry} to generate their respective geometries.\n * @example\n * ```typescript\n * const verticesOfCube = [-1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, ];\n * const indicesOfFaces = [\n * 2, 1, 0, 0, 3, 2,\n * 0, 4, 7, 7, 3, 0,\n * 0, 1, 5, 5, 4, 0,\n * 1, 2, 6, 6, 5, 1,\n * 2, 3, 7, 7, 6, 2,\n * 4, 5, 6, 6, 7, 4];\n * const geometry = new THREE.PolyhedronGeometry(verticesOfCube, indicesOfFaces, 6, 2);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/PolyhedronGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/PolyhedronGeometry.js | Source}\n */\nexport class PolyhedronGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link PolyhedronGeometry}\n     * @param vertices Array of points of the form [1,1,1, -1,-1,-1, ... ]. Default `[]`.\n     * @param indices Array of indices that make up the faces of the form [0,1,2, 2,3,0, ... ]. Default `[]`.\n     * @param radius [page:The radius of the final shape Expects a `Float`. Default `1`\n     * @param detail [page:How many levels to subdivide the geometry. The more detail, the smoother the shape. Expects a `Integer`. Default `0`\n     */\n    constructor(vertices?: number[], indices?: number[], radius?: number, detail?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `PolyhedronGeometry`\n     */\n    override readonly type: string | \"PolyhedronGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly vertices: number[];\n        readonly indices: number[];\n        readonly radius: number;\n        readonly detail: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): PolyhedronGeometry;\n}\n",
      "@types/three@~0/src/geometries/RingGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * A class for generating a two-dimensional ring geometry.\n * @example\n * ```typescript\n * const geometry = new THREE.RingGeometry(1, 5, 32);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00,\n *     side: THREE.DoubleSide\n * });\n * const mesh = new THREE.Mesh(geometry, material);\n * scene.add(mesh);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/RingGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/RingGeometry.js | Source}\n */\nexport class RingGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link RingGeometry}\n     * @param innerRadius Expects a `Float`. Default `0.5`.\n     * @param outerRadius Expects a `Float`. Default `1`.\n     * @param thetaSegments Number of segments. A higher number means the ring will be more round. Minimum is 3. Expects a `Integer`. Default `32`.\n     * @param phiSegments Number of segments per ring segment. Minimum is `1`. Expects a `Integer`. Default `1`.\n     * @param thetaStart Starting angle. Expects a `Float`. Default `0`.\n     * @param thetaLength Central angle. Expects a `Float`. Default `Math.PI * 2`.\n     */\n    constructor(\n        innerRadius?: number,\n        outerRadius?: number,\n        thetaSegments?: number,\n        phiSegments?: number,\n        thetaStart?: number,\n        thetaLength?: number,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `RingGeometry`\n     */\n    override readonly type: string | \"RingGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly innerRadius: number;\n        readonly outerRadius: number;\n        readonly thetaSegments: number;\n        readonly phiSegments: number;\n        readonly thetaStart: number;\n        readonly thetaLength: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): RingGeometry;\n}\n",
      "@types/three@~0/src/geometries/ShapeGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Shape } from \"../extras/core/Shape.d.ts\";\n\n/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n * @example\n * ```typescript\n * const x = 0, y = 0;\n * const heartShape = new THREE.Shape();\n * heartShape.moveTo(x + 5, y + 5);\n * heartShape.bezierCurveTo(x + 5, y + 5, x + 4, y, x, y);\n * heartShape.bezierCurveTo(x - 6, y, x - 6, y + 7, x - 6, y + 7);\n * heartShape.bezierCurveTo(x - 6, y + 11, x - 3, y + 15.4, x + 5, y + 19);\n * heartShape.bezierCurveTo(x + 12, y + 15.4, x + 16, y + 11, x + 16, y + 7);\n * heartShape.bezierCurveTo(x + 16, y + 7, x + 16, y, x + 10, y);\n * heartShape.bezierCurveTo(x + 7, y, x + 5, y + 5, x + 5, y + 5);\n * const geometry = new THREE.ShapeGeometry(heartShape);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0x00ff00\n * });\n * const mesh = new THREE.Mesh(geometry, material);\n * scene.add(mesh);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/ShapeGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/ShapeGeometry.js | Source}\n */\nexport class ShapeGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link ShapeGeometry}\n     * @param shapes Array of shapes or a single {@link THREE.Shape | Shape}. Default `new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)])`, _a single triangle shape_.\n     * @param curveSegments Number of segments per shape. Expects a `Integer`. Default `12`\n     */\n    constructor(shapes?: Shape | Shape[], curveSegments?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `ShapeGeometry`\n     */\n    override readonly type: string | \"ShapeGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly shapes: Shape | Shape[];\n        readonly curveSegments: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): ShapeGeometry;\n}\n",
      "@types/three@~0/src/geometries/SphereGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * A class for generating sphere geometries.\n * @example\n * ```typescript\n * const geometry = new THREE.SphereGeometry(15, 32, 16);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const sphere = new THREE.Mesh(geometry, material);\n * scene.add(sphere);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/SphereGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/SphereGeometry.js | Source}\n */\nexport class SphereGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link SphereGeometry}\n     * @remarks\n     * The geometry is created by sweeping and calculating vertexes\n     * around the **Y** axis (horizontal sweep) and the **Z** axis (vertical sweep)\n     * Thus, incomplete spheres (akin to `'sphere slices'`) can be created\n     * through the use of different values of {@link phiStart}, {@link phiLength}, {@link thetaStart} and {@link thetaLength},\n     * in order to define the points in which we start (or end) calculating those vertices.\n     * @param radius Sphere radius. Expects a `Float`. Default `1`\n     * @param widthSegments Number of horizontal segments. Minimum value is 3, and the Expects a `Integer`. Default `32`\n     * @param heightSegments Number of vertical segments. Minimum value is 2, and the Expects a `Integer`. Default `16`\n     * @param phiStart Specify horizontal starting angle. Expects a `Float`. Default `0`\n     * @param phiLength Specify horizontal sweep angle size. Expects a `Float`. Default `Math.PI * 2`\n     * @param thetaStart Specify vertical starting angle. Expects a `Float`. Default `0`\n     * @param thetaLength Specify vertical sweep angle size. Expects a `Float`. Default `Math.PI`\n     */\n    constructor(\n        radius?: number,\n        widthSegments?: number,\n        heightSegments?: number,\n        phiStart?: number,\n        phiLength?: number,\n        thetaStart?: number,\n        thetaLength?: number,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `SphereGeometry`\n     */\n    override readonly type: string | \"SphereGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly radius: number;\n        readonly widthSegments: number;\n        readonly heightSegments: number;\n        readonly phiStart: number;\n        readonly phiLength: number;\n        readonly thetaStart: number;\n        readonly thetaLength: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): SphereGeometry;\n}\n",
      "@types/three@~0/src/geometries/TetrahedronGeometry.d.ts": "import { PolyhedronGeometry } from \"./PolyhedronGeometry.d.ts\";\n\n/**\n * A class for generating a tetrahedron geometries.\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/TetrahedronGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/TetrahedronGeometry.js | Source}\n */\nexport class TetrahedronGeometry extends PolyhedronGeometry {\n    /**\n     * Create a new instance of {@link TetrahedronGeometry}\n     * @param radius Radius of the tetrahedron. Expects a `Float`. Default `1`\n     * @param detail Setting this to a value greater than 0 adds vertices making it no longer a tetrahedron. Expects a `Integer`. Default `0`\n     */\n    constructor(radius?: number, detail?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `TetrahedronGeometry`\n     */\n    override readonly type: string | \"TetrahedronGeometry\";\n\n    /** @internal */\n    static fromJSON(data: {}): TetrahedronGeometry;\n}\n",
      "@types/three@~0/src/geometries/TorusGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * A class for generating torus geometries.\n * @example\n * ```typescript\n * const geometry = new THREE.TorusGeometry(10, 3, 16, 100);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const torus = new THREE.Mesh(geometry, material);\n * scene.add(torus);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/TorusGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/TorusGeometry.js | Source}\n */\nexport class TorusGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link TorusGeometry}\n     * @param radius Radius of the torus, from the center of the torus to the center of the tube. Expects a `Float`. Default `1`.\n     * @param tube Radius of the tube. Expects a `Float`. Default `0.4`.\n     * @param radialSegments Expects a `Integer`.Default is `12`.\n     * @param tubularSegments Expects a `Integer`. Default `48`.\n     * @param arc Central angle. Expects a `Float`. Default `Math.PI * 2`\n     */\n    constructor(radius?: number, tube?: number, radialSegments?: number, tubularSegments?: number, arc?: number);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `TorusGeometry`\n     */\n    override readonly type: string | \"TorusGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly radius: number;\n        readonly tube: number;\n        readonly radialSegments: number;\n        readonly tubularSegments: number;\n        readonly arc: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: any): TorusGeometry;\n}\n",
      "@types/three@~0/src/geometries/TorusKnotGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * Creates a torus knot, the particular shape of which is defined by a pair of coprime integers, p and q\n * If p and q are not coprime, the result will be a torus link.\n * @example\n * ```typescript\n * const geometry = new THREE.TorusKnotGeometry(10, 3, 100, 16);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0xffff00\n * });\n * const torusKnot = new THREE.Mesh(geometry, material);\n * scene.add(torusKnot);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/TorusKnotGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/TorusKnotGeometry.js | Source}\n */\nexport class TorusKnotGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link TorusKnotGeometry}\n     * @param radius Radius of the torus.. Default `1`.\n     * @param tube Expects a `Float`. Default `0.4`.\n     * @param tubularSegments Expects a `Integer`. Default `64`.\n     * @param radialSegments Expects a `Integer`. Default `8`.\n     * @param p This value determines, how many times the geometry winds around its axis of rotational symmetry. Expects a `Integer`. Default `2`.\n     * @param q This value determines, how many times the geometry winds around a circle in the interior of the torus. Expects a `Integer`. Default `3`.\n     */\n    constructor(\n        radius?: number,\n        tube?: number,\n        tubularSegments?: number,\n        radialSegments?: number,\n        p?: number,\n        q?: number,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `TorusKnotGeometry`\n     */\n    override readonly type: string | \"TorusKnotGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly radius: number;\n        readonly tube: number;\n        readonly tubularSegments: number;\n        readonly radialSegments: number;\n        readonly p: number;\n        readonly q: number;\n    };\n\n    /** @internal */\n    static fromJSON(data: {}): TorusKnotGeometry;\n}\n",
      "@types/three@~0/src/geometries/TubeGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\nimport { Curve } from \"../extras/core/Curve.d.ts\";\nimport { Vector3 } from \"../math/Vector3.d.ts\";\n\n/**\n * Creates a tube that extrudes along a 3d curve.\n * @example\n * ```typescript\n * class CustomSinCurve extends THREE.Curve {\n *     constructor(scale = 1) {\n *         super();\n *         this.scale = scale;\n *     }\n *     getPoint(t, optionalTarget = new THREE.Vector3()) {\n *         const tx = t * 3 - 1.5;\n *         const ty = Math.sin(2 * Math.PI * t);\n *         const tz = 0;\n *         return optionalTarget.set(tx, ty, tz).multiplyScalar(this.scale);\n *     }\n * }\n * const path = new CustomSinCurve(10);\n * const geometry = new THREE.TubeGeometry(path, 20, 2, 8, false);\n * const material = new THREE.MeshBasicMaterial({\n *     color: 0x00ff00\n * });\n * const mesh = new THREE.Mesh(geometry, material);\n * scene.add(mesh);\n * ```\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/TubeGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/TubeGeometry.js | Source}\n */\nexport class TubeGeometry extends BufferGeometry {\n    /**\n     * Create a new instance of {@link TubeGeometry}\n     * @param path A 3D path that inherits from the {@link THREE.Curve | Curve} base class.\n     *             Default {@link THREE.QuadraticBezierCurve3 | new THREE.QuadraticBezierCurve3(new Vector3(-1, -1, 0 ), new Vector3(-1, 1, 0), new Vector3(1, 1, 0))}.\n     * @param tubularSegments The number of segments that make up the tube. Expects a `Integer`. Default `64`.\n     * @param radius The radius of the tube. Expects a `Float`. Default `1`.\n     * @param radialSegments The number of segments that make up the cross-section. Expects a `Integer`. Default `8`.\n     * @param closed Is the tube open or closed. Default `false`.\n     */\n    constructor(\n        path?: Curve<Vector3>,\n        tubularSegments?: number,\n        radius?: number,\n        radialSegments?: number,\n        closed?: boolean,\n    );\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `TubeGeometry`\n     */\n    override readonly type: string | \"TubeGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly path: Curve<Vector3>;\n        readonly tubularSegments: number;\n        readonly radius: number;\n        readonly radialSegments: number;\n        readonly closed: boolean;\n    };\n\n    /**\n     * An array of {@link THREE.Vector3 | Vector3} tangents\n     */\n    tangents: Vector3[];\n\n    /**\n     * An array of {@link THREE.Vector3 | Vector3} normals\n     */\n    normals: Vector3[];\n\n    /**\n     * An array of {@link THREE.Vector3 | Vector3} binormals\n     */\n    binormals: Vector3[];\n\n    /** @internal */\n    static fromJSON(data: {}): TubeGeometry;\n}\n",
      "@types/three@~0/src/geometries/WireframeGeometry.d.ts": "import { BufferGeometry } from \"../core/BufferGeometry.d.ts\";\n\n/**\n * This can be used as a helper object to view a {@link BufferGeometry | geometry} as a wireframe.\n * @example\n * ```typescript\n * const geometry = new THREE.SphereGeometry(100, 100, 100);\n * const wireframe = new THREE.WireframeGeometry(geometry);\n * const line = new THREE.LineSegments(wireframe);\n * line.material.depthTest = false;\n * line.material.opacity = 0.25;\n * line.material.transparent = true;\n * scene.add(line);\n * ```\n * @see Example: {@link https://threejs.org/examples/#webgl_helpers | helpers}\n * @see {@link https://threejs.org/docs/index.html#api/en/geometries/WireframeGeometry | Official Documentation}\n * @see {@link https://github.com/mrdoob/three.js/blob/master/src/geometries/WireframeGeometry.js | Source}\n */\nexport class WireframeGeometry<TBufferGeometry extends BufferGeometry = BufferGeometry> extends BufferGeometry {\n    /**\n     * Create a new instance of {@link WireframeGeometry}\n     * @param geometry Any geometry object. Default `null`.\n     */\n    constructor(geometry?: TBufferGeometry);\n\n    /**\n     * A Read-only _string_ to check if `this` object type.\n     * @remarks Sub-classes will update this value.\n     * @defaultValue `WireframeGeometry`\n     */\n    override readonly type: string | \"WireframeGeometry\";\n\n    /**\n     * An object with a property for each of the constructor parameters.\n     * @remarks Any modification after instantiation does not change the geometry.\n     */\n    readonly parameters: {\n        readonly geometry: TBufferGeometry;\n    };\n}\n",
      "@types/three@~0/src/materials/LineBasicMaterial.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface LineBasicMaterialParameters extends MaterialParameters {\n    color?: ColorRepresentation | undefined;\n    fog?: boolean | undefined;\n    linewidth?: number | undefined;\n    linecap?: string | undefined;\n    linejoin?: string | undefined;\n}\n\nexport class LineBasicMaterial extends Material {\n    constructor(parameters?: LineBasicMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LineBasicMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLineBasicMaterial: true;\n\n    /**\n     * @default 'LineBasicMaterial'\n     */\n    type: string;\n\n    /**\n     * @default 0xffffff\n     */\n    color: Color;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default true\n     */\n    fog: boolean;\n\n    /**\n     * @default 1\n     */\n    linewidth: number;\n\n    /**\n     * @default 'round'\n     */\n    linecap: string;\n\n    /**\n     * @default 'round'\n     */\n    linejoin: string;\n\n    /**\n     * Sets the color of the lines using data from a {@link Texture}.\n     */\n    map: Texture | null;\n\n    setValues(parameters: LineBasicMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshBasicMaterial.d.ts": "import { Combine } from \"../constants.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Euler } from \"../math/Euler.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\n/**\n * parameters is an object with one or more properties defining the material's appearance.\n */\nexport interface MeshBasicMaterialParameters extends MaterialParameters {\n    color?: ColorRepresentation | undefined;\n    opacity?: number | undefined;\n    map?: Texture | null | undefined;\n    lightMap?: Texture | null;\n    lightMapIntensity?: number | undefined;\n    aoMap?: Texture | null | undefined;\n    aoMapIntensity?: number | undefined;\n    specularMap?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    fog?: boolean | undefined;\n    envMap?: Texture | null | undefined;\n    envMapRotation?: Euler | undefined;\n    combine?: Combine | undefined;\n    reflectivity?: number | undefined;\n    refractionRatio?: number | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n    wireframeLinecap?: string | undefined;\n    wireframeLinejoin?: string | undefined;\n}\n\nexport class MeshBasicMaterial extends Material {\n    constructor(parameters?: MeshBasicMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshBasicMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshBasicMaterial: true;\n\n    /**\n     * @default 'MeshBasicMaterial'\n     */\n    type: string;\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    lightMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    lightMapIntensity: number;\n\n    /**\n     * @default null\n     */\n    aoMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    aoMapIntensity: number;\n\n    /**\n     * @default null\n     */\n    specularMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    envMap: Texture | null;\n\n    /**\n     * The rotation of the environment map in radians. Default is `(0,0,0)`.\n     */\n    envMapRotation: Euler;\n\n    /**\n     * @default THREE.MultiplyOperation\n     */\n    combine: Combine;\n\n    /**\n     * @default 1\n     */\n    reflectivity: number;\n\n    /**\n     * @default 0.98\n     */\n    refractionRatio: number;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinecap: string;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinejoin: string;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshBasicMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/LineDashedMaterial.d.ts": "import { LineBasicMaterial, LineBasicMaterialParameters } from \"./LineBasicMaterial.d.ts\";\n\nexport interface LineDashedMaterialParameters extends LineBasicMaterialParameters {\n    scale?: number | undefined;\n    dashSize?: number | undefined;\n    gapSize?: number | undefined;\n}\n\nexport class LineDashedMaterial extends LineBasicMaterial {\n    constructor(parameters?: LineDashedMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link LineDashedMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isLineDashedMaterial: true;\n\n    /**\n     * @default 'LineDashedMaterial'\n     */\n    type: string;\n\n    /**\n     * @default 1\n     */\n    scale: number;\n\n    /**\n     * @default 1\n     */\n    dashSize: number;\n\n    /**\n     * @default 1\n     */\n    gapSize: number;\n\n    setValues(parameters: LineDashedMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshDepthMaterial.d.ts": "import { DepthPackingStrategies } from \"../constants.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshDepthMaterialParameters extends MaterialParameters {\n    map?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    depthPacking?: DepthPackingStrategies | undefined;\n    displacementMap?: Texture | null | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n}\n\nexport class MeshDepthMaterial extends Material {\n    constructor(parameters?: MeshDepthMaterialParameters);\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshDepthMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshDepthMaterial: true;\n\n    /**\n     * @default 'MeshDepthMaterial'\n     */\n    type: string;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default THREE.BasicDepthPacking\n     */\n    depthPacking: DepthPackingStrategies;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * @default false\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshDepthMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshDistanceMaterial.d.ts": "import { Vector3 } from \"../math/Vector3.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshDistanceMaterialParameters extends MaterialParameters {\n    map?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    displacementMap?: Texture | null | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    farDistance?: number | undefined;\n    nearDistance?: number | undefined;\n    referencePosition?: Vector3 | undefined;\n}\n\nexport class MeshDistanceMaterial extends Material {\n    constructor(parameters?: MeshDistanceMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshDistanceMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshDistanceMaterial: true;\n\n    /**\n     * @default 'MeshDistanceMaterial'\n     */\n    type: string;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default false\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshDistanceMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshLambertMaterial.d.ts": "import { Combine, NormalMapTypes } from \"../constants.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Euler } from \"../math/Euler.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshLambertMaterialParameters extends MaterialParameters {\n    bumpMap?: Texture | undefined;\n    bumpScale?: number | undefined;\n    color?: ColorRepresentation | undefined;\n    displacementMap?: Texture | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    emissive?: ColorRepresentation | undefined;\n    emissiveIntensity?: number | undefined;\n    emissiveMap?: Texture | null | undefined;\n    flatShading?: boolean | undefined;\n    map?: Texture | null | undefined;\n    lightMap?: Texture | null | undefined;\n    lightMapIntensity?: number | undefined;\n    normalMap?: Texture | undefined;\n    normalScale?: Vector2 | undefined;\n    aoMap?: Texture | null | undefined;\n    aoMapIntensity?: number | undefined;\n    specularMap?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    envMap?: Texture | null | undefined;\n    envMapRotation?: Euler | undefined;\n    combine?: Combine | undefined;\n    reflectivity?: number | undefined;\n    refractionRatio?: number | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n    wireframeLinecap?: string | undefined;\n    wireframeLinejoin?: string | undefined;\n    fog?: boolean | undefined;\n}\n\nexport class MeshLambertMaterial extends Material {\n    constructor(parameters?: MeshLambertMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshLambertMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshLambertMaterial: true;\n\n    /**\n     * @default 'MeshLambertMaterial'\n     */\n    type: string;\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default null\n     */\n    bumpMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    bumpScale: number;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default new THREE.Color( 0x000000 )\n     */\n    emissive: Color;\n\n    /**\n     * @default 1\n     */\n    emissiveIntensity: number;\n\n    /**\n     * @default null\n     */\n    emissiveMap: Texture | null;\n\n    /**\n     * @default false\n     */\n    flatShading: boolean;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    lightMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    lightMapIntensity: number;\n\n    /**\n     * @default null\n     */\n    normalMap: Texture | null;\n\n    normalMapType: NormalMapTypes;\n\n    /**\n     * @default new THREE.Vector2( 1, 1 )\n     */\n    normalScale: Vector2;\n\n    /**\n     * @default null\n     */\n    aoMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    aoMapIntensity: number;\n\n    /**\n     * @default null\n     */\n    specularMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    envMap: Texture | null;\n\n    /**\n     * The rotation of the environment map in radians. Default is `(0,0,0)`.\n     */\n    envMapRotation: Euler;\n\n    /**\n     * @default THREE.MultiplyOperation\n     */\n    combine: Combine;\n\n    /**\n     * @default 1\n     */\n    reflectivity: number;\n\n    /**\n     * @default 0.98\n     */\n    refractionRatio: number;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinecap: string;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinejoin: string;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshLambertMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshMatcapMaterial.d.ts": "import { NormalMapTypes } from \"../constants.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshMatcapMaterialParameters extends MaterialParameters {\n    color?: ColorRepresentation | undefined;\n    matcap?: Texture | null | undefined;\n    map?: Texture | null | undefined;\n    bumpMap?: Texture | null | undefined;\n    bumpScale?: number | undefined;\n    normalMap?: Texture | null | undefined;\n    normalMapType?: NormalMapTypes | undefined;\n    normalScale?: Vector2 | undefined;\n    displacementMap?: Texture | null | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    alphaMap?: Texture | null | undefined;\n    fog?: boolean | undefined;\n    flatShading?: boolean | undefined;\n}\n\nexport class MeshMatcapMaterial extends Material {\n    constructor(parameters?: MeshMatcapMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshMatcapMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshMatcapMaterial: true;\n\n    /**\n     * @default 'MeshMatcapMaterial'\n     */\n    type: string;\n\n    /**\n     * @default { 'MATCAP': '' }\n     */\n    defines: { [key: string]: any };\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default null\n     */\n    matcap: Texture | null;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    bumpMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    bumpScale: number;\n\n    /**\n     * @default null\n     */\n    normalMap: Texture | null;\n\n    /**\n     * @default THREE.TangentSpaceNormalMap\n     */\n    normalMapType: NormalMapTypes;\n\n    /**\n     * @default new Vector2( 1, 1 )\n     */\n    normalScale: Vector2;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * Define whether the material is rendered with flat shading. Default is false.\n     * @default false\n     */\n    flatShading: boolean;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshMatcapMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshNormalMaterial.d.ts": "import { NormalMapTypes } from \"../constants.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshNormalMaterialParameters extends MaterialParameters {\n    bumpMap?: Texture | null | undefined;\n    bumpScale?: number | undefined;\n    normalMap?: Texture | null | undefined;\n    normalMapType?: NormalMapTypes | undefined;\n    normalScale?: Vector2 | undefined;\n    displacementMap?: Texture | null | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n\n    flatShading?: boolean | undefined;\n}\n\nexport class MeshNormalMaterial extends Material {\n    constructor(parameters?: MeshNormalMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshNormalMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshNormalMaterial: true;\n\n    /**\n     * @default 'MeshNormalMaterial'\n     */\n    type: string;\n\n    /**\n     * @default null\n     */\n    bumpMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    bumpScale: number;\n\n    /**\n     * @default null\n     */\n    normalMap: Texture | null;\n\n    /**\n     * @default THREE.TangentSpaceNormalMap\n     */\n    normalMapType: NormalMapTypes;\n\n    /**\n     * @default new THREE.Vector2( 1, 1 )\n     */\n    normalScale: Vector2;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * Define whether the material is rendered with flat shading. Default is false.\n     * @default false\n     */\n    flatShading: boolean;\n\n    setValues(parameters: MeshNormalMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshPhongMaterial.d.ts": "import { Combine, NormalMapTypes } from \"../constants.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Euler } from \"../math/Euler.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshPhongMaterialParameters extends MaterialParameters {\n    /** geometry color in hexadecimal. Default is 0xffffff. */\n    color?: ColorRepresentation | undefined;\n    specular?: ColorRepresentation | undefined;\n    shininess?: number | undefined;\n    opacity?: number | undefined;\n    map?: Texture | null | undefined;\n    lightMap?: Texture | null | undefined;\n    lightMapIntensity?: number | undefined;\n    aoMap?: Texture | null | undefined;\n    aoMapIntensity?: number | undefined;\n    emissive?: ColorRepresentation | undefined;\n    emissiveIntensity?: number | undefined;\n    emissiveMap?: Texture | null | undefined;\n    bumpMap?: Texture | null | undefined;\n    bumpScale?: number | undefined;\n    normalMap?: Texture | null | undefined;\n    normalMapType?: NormalMapTypes | undefined;\n    normalScale?: Vector2 | undefined;\n    displacementMap?: Texture | null | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    specularMap?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    envMap?: Texture | null | undefined;\n    envMapRotation?: Euler | undefined;\n    combine?: Combine | undefined;\n    reflectivity?: number | undefined;\n    refractionRatio?: number | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n    wireframeLinecap?: string | undefined;\n    wireframeLinejoin?: string | undefined;\n    fog?: boolean | undefined;\n    flatShading?: boolean | undefined;\n}\n\nexport class MeshPhongMaterial extends Material {\n    constructor(parameters?: MeshPhongMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshPhongMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshPhongMaterial: true;\n\n    /**\n     * @default 'MeshNormalMaterial'\n     */\n    type: string;\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default new THREE.Color( 0x111111 )\n     */\n    specular: Color;\n\n    /**\n     * @default 30\n     */\n    shininess: number;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    lightMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    lightMapIntensity: number;\n\n    /**\n     * @default null\n     */\n    aoMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    aoMapIntensity: number;\n\n    /**\n     * @default new THREE.Color( 0x000000 )\n     */\n    emissive: Color;\n\n    /**\n     * @default 1\n     */\n    emissiveIntensity: number;\n\n    /**\n     * @default null\n     */\n    emissiveMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    bumpMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    bumpScale: number;\n\n    /**\n     * @default null\n     */\n    normalMap: Texture | null;\n\n    /**\n     * @default THREE.TangentSpaceNormalMap\n     */\n    normalMapType: NormalMapTypes;\n\n    /**\n     * @default new Vector2( 1, 1 )\n     */\n    normalScale: Vector2;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default null\n     */\n    specularMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    envMap: Texture | null;\n\n    /**\n     * The rotation of the environment map in radians. Default is `(0,0,0)`.\n     */\n    envMapRotation: Euler;\n\n    /**\n     * @default THREE.MultiplyOperation\n     */\n    combine: Combine;\n\n    /**\n     * @default 1\n     */\n    reflectivity: number;\n\n    /**\n     * @default 0.98\n     */\n    refractionRatio: number;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinecap: string;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinejoin: string;\n\n    /**\n     * Define whether the material is rendered with flat shading. Default is false.\n     * @default false\n     */\n    flatShading: boolean;\n\n    /**\n     * @deprecated Use {@link MeshStandardMaterial THREE.MeshStandardMaterial} instead.\n     */\n    metal: boolean;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshPhongMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshPhysicalMaterial.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { MeshStandardMaterial, MeshStandardMaterialParameters } from \"./MeshStandardMaterial.d.ts\";\n\nexport interface MeshPhysicalMaterialParameters extends MeshStandardMaterialParameters {\n    anisotropyRotation?: number | undefined;\n    anisotropyMap?: Texture | null | undefined;\n\n    clearcoatMap?: Texture | null | undefined;\n    clearcoatRoughness?: number | undefined;\n    clearcoatRoughnessMap?: Texture | null | undefined;\n    clearcoatNormalScale?: Vector2 | undefined;\n    clearcoatNormalMap?: Texture | null | undefined;\n\n    ior?: number | undefined;\n\n    reflectivity?: number | undefined;\n\n    iridescenceMap?: Texture | null | undefined;\n    iridescenceIOR?: number | undefined;\n    iridescenceThicknessRange?: [number, number] | undefined;\n    iridescenceThicknessMap?: Texture | null | undefined;\n\n    sheenColor?: ColorRepresentation | undefined;\n    sheenColorMap?: Texture | null | undefined;\n    sheenRoughness?: number | undefined;\n    sheenRoughnessMap?: Texture | null | undefined;\n\n    transmissionMap?: Texture | null | undefined;\n\n    thickness?: number | undefined;\n    thicknessMap?: Texture | null | undefined;\n    attenuationDistance?: number | undefined;\n    attenuationColor?: ColorRepresentation | undefined;\n\n    specularIntensity?: number | undefined;\n    specularIntensityMap?: Texture | null | undefined;\n    specularColor?: ColorRepresentation | undefined;\n    specularColorMap?: Texture | null | undefined;\n\n    anisotropy?: number | undefined;\n    clearcoat?: number | undefined;\n    iridescence?: number | undefined;\n    dispersion?: number | undefined;\n    sheen?: number | undefined;\n    transmission?: number | undefined;\n}\n\nexport class MeshPhysicalMaterial extends MeshStandardMaterial {\n    constructor(parameters?: MeshPhysicalMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshPhysicalMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshPhysicalMaterial: true;\n\n    /**\n     * @default { 'STANDARD': '', 'PHYSICAL': '' }\n     */\n    defines: { [key: string]: any };\n\n    /**\n     * @default 'MeshPhysicalMaterial'\n     */\n    type: string;\n\n    /**\n     * @default 0\n     */\n    anisotropyRotation?: number;\n\n    /**\n     * @default null\n     */\n    anisotropyMap?: Texture | null;\n\n    /**\n     * @default null\n     */\n    clearcoatMap: Texture | null;\n\n    /**\n     * @default 0\n     */\n    clearcoatRoughness: number;\n\n    /**\n     * @default null\n     */\n    clearcoatRoughnessMap: Texture | null;\n\n    /**\n     * @default new THREE.Vector2( 1, 1 )\n     */\n    clearcoatNormalScale: Vector2;\n\n    /**\n     * @default null\n     */\n    clearcoatNormalMap: Texture | null;\n\n    /**\n     * @default 1.5\n     */\n    ior: number;\n\n    /**\n     * @default 0.5\n     */\n    get reflectivity(): number;\n    set reflectivity(reflectivity: number);\n\n    /**\n     * @default null\n     */\n    iridescenceMap: Texture | null;\n\n    /**\n     * @default 1.3\n     */\n    iridescenceIOR: number;\n\n    /**\n     * @default [100, 400]\n     */\n    iridescenceThicknessRange: [number, number];\n\n    /**\n     * @default null\n     */\n    iridescenceThicknessMap: Texture | null;\n\n    /**\n     * @default Color( 0x000000 )\n     */\n    sheenColor: Color;\n\n    /**\n     * @default null\n     */\n    sheenColorMap: Texture | null;\n\n    /**\n     * @default 1.0\n     */\n    sheenRoughness: number;\n\n    /**\n     * @default null\n     */\n    sheenRoughnessMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    transmissionMap: Texture | null;\n\n    /**\n     * @default 0.01\n     */\n    thickness: number;\n\n    /**\n     * @default null\n     */\n    thicknessMap: Texture | null;\n\n    /**\n     * @default 0.0\n     */\n    attenuationDistance: number;\n\n    /**\n     * @default Color( 1, 1, 1 )\n     */\n    attenuationColor: Color;\n\n    /**\n     * @default 1.0\n     */\n    specularIntensity: number;\n\n    /**\n     * @default null\n     */\n    specularIntensityMap: Texture | null;\n\n    /**\n     * @default Color(1, 1, 1)\n     */\n    specularColor: Color;\n\n    /**\n     * @default null\n     */\n    specularColorMap: Texture | null;\n\n    /**\n     * @default 0\n     */\n    get anisotropy(): number;\n    set anisotropy(value: number);\n\n    /**\n     * @default 0\n     */\n    get clearcoat(): number;\n    set clearcoat(value: number);\n\n    /**\n     * @default 0\n     */\n    get iridescence(): number;\n    set iridescence(value: number);\n\n    /**\n     * @default 0\n     */\n    get dispersion(): number;\n    set dispersion(value: number);\n\n    /**\n     * @default 0.0\n     */\n    get sheen(): number;\n    set sheen(value: number);\n\n    /**\n     * @default 0\n     */\n    get transmission(): number;\n    set transmission(value: number);\n}\n",
      "@types/three@~0/src/materials/MeshStandardMaterial.d.ts": "import { NormalMapTypes } from \"../constants.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Euler } from \"../math/Euler.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshStandardMaterialParameters extends MaterialParameters {\n    color?: ColorRepresentation | undefined;\n    roughness?: number | undefined;\n    metalness?: number | undefined;\n    map?: Texture | null | undefined;\n    lightMap?: Texture | null | undefined;\n    lightMapIntensity?: number | undefined;\n    aoMap?: Texture | null | undefined;\n    aoMapIntensity?: number | undefined;\n    emissive?: ColorRepresentation | undefined;\n    emissiveIntensity?: number | undefined;\n    emissiveMap?: Texture | null | undefined;\n    bumpMap?: Texture | null | undefined;\n    bumpScale?: number | undefined;\n    normalMap?: Texture | null | undefined;\n    normalMapType?: NormalMapTypes | undefined;\n    normalScale?: Vector2 | undefined;\n    displacementMap?: Texture | null | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    roughnessMap?: Texture | null | undefined;\n    metalnessMap?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    envMap?: Texture | null | undefined;\n    envMapRotation?: Euler | undefined;\n    envMapIntensity?: number | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n    fog?: boolean | undefined;\n    flatShading?: boolean | undefined;\n}\n\nexport class MeshStandardMaterial extends Material {\n    constructor(parameters?: MeshStandardMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshStandardMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshStandardMaterial: true;\n\n    /**\n     * @default 'MeshStandardMaterial'\n     */\n    type: string;\n\n    /**\n     * @default { 'STANDARD': '' }\n     */\n    defines: { [key: string]: any };\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default 1\n     */\n    roughness: number;\n\n    /**\n     * @default 0\n     */\n    metalness: number;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    lightMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    lightMapIntensity: number;\n\n    /**\n     * @default null\n     */\n    aoMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    aoMapIntensity: number;\n\n    /**\n     * @default new THREE.Color( 0x000000 )\n     */\n    emissive: Color;\n\n    /**\n     * @default 1\n     */\n    emissiveIntensity: number;\n\n    /**\n     * @default null\n     */\n    emissiveMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    bumpMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    bumpScale: number;\n\n    /**\n     * @default null\n     */\n    normalMap: Texture | null;\n\n    /**\n     * @default THREE.TangentSpaceNormalMap\n     */\n    normalMapType: NormalMapTypes;\n\n    /**\n     * @default new THREE.Vector2( 1, 1 )\n     */\n    normalScale: Vector2;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default null\n     */\n    roughnessMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    metalnessMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    envMap: Texture | null;\n\n    /**\n     * The rotation of the environment map in radians. Default is `(0,0,0)`.\n     */\n    envMapRotation: Euler;\n\n    /**\n     * @default 1\n     */\n    envMapIntensity: number;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinecap: string;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinejoin: string;\n\n    /**\n     * Define whether the material is rendered with flat shading. Default is false.\n     * @default false\n     */\n    flatShading: boolean;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshStandardMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/MeshToonMaterial.d.ts": "import { NormalMapTypes } from \"../constants.d.ts\";\nimport { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Vector2 } from \"../math/Vector2.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface MeshToonMaterialParameters extends MaterialParameters {\n    /** geometry color in hexadecimal. Default is 0xffffff. */\n    color?: ColorRepresentation | undefined;\n    opacity?: number | undefined;\n    gradientMap?: Texture | null | undefined;\n    map?: Texture | null | undefined;\n    lightMap?: Texture | null | undefined;\n    lightMapIntensity?: number | undefined;\n    aoMap?: Texture | null | undefined;\n    aoMapIntensity?: number | undefined;\n    emissive?: ColorRepresentation | undefined;\n    emissiveIntensity?: number | undefined;\n    emissiveMap?: Texture | null | undefined;\n    bumpMap?: Texture | null | undefined;\n    bumpScale?: number | undefined;\n    normalMap?: Texture | null | undefined;\n    normalMapType?: NormalMapTypes | undefined;\n    normalScale?: Vector2 | undefined;\n    displacementMap?: Texture | null | undefined;\n    displacementScale?: number | undefined;\n    displacementBias?: number | undefined;\n    alphaMap?: Texture | null | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n    wireframeLinecap?: string | undefined;\n    wireframeLinejoin?: string | undefined;\n    fog?: boolean | undefined;\n}\n\nexport class MeshToonMaterial extends Material {\n    constructor(parameters?: MeshToonMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link MeshToonMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isMeshToonMaterial: true;\n\n    /**\n     * @default 'MeshToonMaterial'\n     */\n    type: string;\n\n    /**\n     * @default { 'TOON': '' }\n     */\n    defines: { [key: string]: any };\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default null\n     */\n    gradientMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    lightMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    lightMapIntensity: number;\n\n    /**\n     * @default null\n     */\n    aoMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    aoMapIntensity: number;\n\n    /**\n     * @default new THREE.Color( 0x000000 )\n     */\n    emissive: Color;\n\n    /**\n     * @default 1\n     */\n    emissiveIntensity: number;\n\n    /**\n     * @default null\n     */\n    emissiveMap: Texture | null;\n\n    /**\n     * @default null\n     */\n    bumpMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    bumpScale: number;\n\n    /**\n     * @default null\n     */\n    normalMap: Texture | null;\n\n    /**\n     * @default THREE.TangentSpaceNormalMap\n     */\n    normalMapType: NormalMapTypes;\n\n    /**\n     * @default new THREE.Vector2( 1, 1 )\n     */\n    normalScale: Vector2;\n\n    /**\n     * @default null\n     */\n    displacementMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    displacementScale: number;\n\n    /**\n     * @default 0\n     */\n    displacementBias: number;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinecap: string;\n\n    /**\n     * @default 'round'\n     */\n    wireframeLinejoin: string;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: MeshToonMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/PointsMaterial.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface PointsMaterialParameters extends MaterialParameters {\n    color?: ColorRepresentation | undefined;\n    map?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    size?: number | undefined;\n    sizeAttenuation?: boolean | undefined;\n    fog?: boolean | undefined;\n}\n\nexport class PointsMaterial extends Material {\n    constructor(parameters?: PointsMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link PointsMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isPointsMaterial: true;\n\n    /**\n     * @default 'PointsMaterial'\n     */\n    type: string;\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default 1\n     */\n    size: number;\n\n    /**\n     * @default true\n     */\n    sizeAttenuation: boolean;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: PointsMaterialParameters): void;\n}\n",
      "@types/three@~0/src/materials/RawShaderMaterial.d.ts": "import { ShaderMaterial, ShaderMaterialParameters } from \"./ShaderMaterial.d.ts\";\n\nexport class RawShaderMaterial extends ShaderMaterial {\n    constructor(parameters?: ShaderMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link RawShaderMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isRawShaderMaterial: true;\n\n    override readonly type: \"RawShaderMaterial\";\n}\n",
      "@types/three@~0/src/materials/ShaderMaterial.d.ts": "import { GLSLVersion } from \"../constants.d.ts\";\nimport { UniformsGroup } from \"../core/UniformsGroup.d.ts\";\nimport { IUniform } from \"../renderers/shaders/UniformsLib.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface ShaderMaterialParameters extends MaterialParameters {\n    uniforms?: { [uniform: string]: IUniform } | undefined;\n    uniformsGroups?: UniformsGroup[] | undefined;\n    vertexShader?: string | undefined;\n    fragmentShader?: string | undefined;\n    linewidth?: number | undefined;\n    wireframe?: boolean | undefined;\n    wireframeLinewidth?: number | undefined;\n    lights?: boolean | undefined;\n    clipping?: boolean | undefined;\n    fog?: boolean | undefined;\n    extensions?:\n        | {\n            clipCullDistance?: boolean | undefined;\n            multiDraw?: boolean | undefined;\n        }\n        | undefined;\n    glslVersion?: GLSLVersion | undefined;\n}\n\nexport class ShaderMaterial extends Material {\n    constructor(parameters?: ShaderMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link ShaderMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isShaderMaterial: true;\n\n    /**\n     * @default 'ShaderMaterial'\n     */\n    type: string;\n\n    /**\n     * @default {}\n     */\n    defines: { [key: string]: any };\n\n    /**\n     * @default {}\n     */\n    uniforms: { [uniform: string]: IUniform };\n\n    uniformsGroups: UniformsGroup[];\n\n    vertexShader: string;\n\n    fragmentShader: string;\n\n    /**\n     * @default 1\n     */\n    linewidth: number;\n\n    /**\n     * @default false\n     */\n    wireframe: boolean;\n\n    /**\n     * @default 1\n     */\n    wireframeLinewidth: number;\n\n    /**\n     * @default false\n     */\n    fog: boolean;\n\n    /**\n     * @default false\n     */\n    lights: boolean;\n\n    /**\n     * @default false\n     */\n    clipping: boolean;\n\n    /**\n     * @default {\n     *   clipCullDistance: false,\n     *   multiDraw: false\n     * }\n     */\n    extensions: {\n        clipCullDistance: boolean;\n        multiDraw: boolean;\n    };\n\n    /**\n     * @default { 'color': [ 1, 1, 1 ], 'uv': [ 0, 0 ], 'uv1': [ 0, 0 ] }\n     */\n    defaultAttributeValues: any;\n\n    /**\n     * @default undefined\n     */\n    index0AttributeName: string | undefined;\n\n    /**\n     * @default false\n     */\n    uniformsNeedUpdate: boolean;\n\n    /**\n     * @default null\n     */\n    glslVersion: GLSLVersion | null;\n\n    setValues(parameters: ShaderMaterialParameters): void;\n    toJSON(meta: any): any;\n}\n",
      "@types/three@~0/src/materials/ShadowMaterial.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface ShadowMaterialParameters extends MaterialParameters {\n    color?: ColorRepresentation | undefined;\n    fog?: boolean | undefined;\n}\n\nexport class ShadowMaterial extends Material {\n    constructor(parameters?: ShadowMaterialParameters);\n\n    /**\n     * Read-only flag to check if a given object is of type {@link ShadowMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isShadowMaterial: true;\n\n    /**\n     * @default 'ShadowMaterial'\n     */\n    type: string;\n\n    /**\n     * @default new THREE.Color( 0x000000 )\n     */\n    color: Color;\n\n    /**\n     * @default true\n     */\n    transparent: boolean;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n}\n",
      "@types/three@~0/src/materials/SpriteMaterial.d.ts": "import { Color, ColorRepresentation } from \"../math/Color.d.ts\";\nimport { Texture } from \"../textures/Texture.d.ts\";\nimport { Material, MaterialParameters } from \"./Material.d.ts\";\n\nexport interface SpriteMaterialParameters extends MaterialParameters {\n    color?: ColorRepresentation | undefined;\n    map?: Texture | null | undefined;\n    alphaMap?: Texture | null | undefined;\n    rotation?: number | undefined;\n    sizeAttenuation?: boolean | undefined;\n    fog?: boolean | undefined;\n}\n\nexport class SpriteMaterial extends Material {\n    constructor(parameters?: SpriteMaterialParameters);\n    /**\n     * Read-only flag to check if a given object is of type {@link SpriteMaterial}.\n     * @remarks This is a _constant_ value\n     * @defaultValue `true`\n     */\n    readonly isSpriteMaterial: true;\n\n    /**\n     * @default 'SpriteMaterial'\n     */\n    type: string;\n\n    /**\n     * @default new THREE.Color( 0xffffff )\n     */\n    color: Color;\n\n    /**\n     * @default null\n     */\n    map: Texture | null;\n\n    /**\n     * @default null\n     */\n    alphaMap: Texture | null;\n\n    /**\n     * @default 0\n     */\n    rotation: number;\n\n    /**\n     * @default true\n     */\n    sizeAttenuation: boolean;\n\n    /**\n     * @default true\n     */\n    transparent: boolean;\n\n    /**\n     * Whether the material is affected by fog. Default is true.\n     * @default fog\n     */\n    fog: boolean;\n\n    setValues(parameters: SpriteMaterialParameters): void;\n    copy(source: SpriteMaterial): this;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLAttributes.d.ts": "import { BufferAttribute } from \"../../core/BufferAttribute.d.ts\";\nimport { GLBufferAttribute } from \"../../core/GLBufferAttribute.d.ts\";\nimport { InterleavedBufferAttribute } from \"../../core/InterleavedBufferAttribute.d.ts\";\n\nexport class WebGLAttributes {\n    constructor(gl: WebGLRenderingContext | WebGL2RenderingContext);\n\n    get(attribute: BufferAttribute | InterleavedBufferAttribute | GLBufferAttribute):\n        | {\n            buffer: WebGLBuffer;\n            type: number;\n            bytesPerElement: number;\n            version: number;\n            size: number;\n        }\n        | undefined;\n\n    remove(attribute: BufferAttribute | InterleavedBufferAttribute | GLBufferAttribute): void;\n\n    update(attribute: BufferAttribute | InterleavedBufferAttribute | GLBufferAttribute, bufferType: number): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLBindingStates.d.ts": "import { BufferAttribute } from \"../../core/BufferAttribute.d.ts\";\nimport { BufferGeometry } from \"../../core/BufferGeometry.d.ts\";\nimport { Object3D } from \"../../core/Object3D.d.ts\";\nimport { Material } from \"../../materials/Material.d.ts\";\nimport { WebGLAttributes } from \"./WebGLAttributes.d.ts\";\nimport { WebGLProgram } from \"./WebGLProgram.d.ts\";\n\nexport class WebGLBindingStates {\n    constructor(gl: WebGLRenderingContext, attributes: WebGLAttributes);\n\n    setup(\n        object: Object3D,\n        material: Material,\n        program: WebGLProgram,\n        geometry: BufferGeometry,\n        index: BufferAttribute,\n    ): void;\n    reset(): void;\n    resetDefaultState(): void;\n    dispose(): void;\n    releaseStatesOfGeometry(): void;\n    releaseStatesOfProgram(): void;\n    initAttributes(): void;\n    enableAttribute(attribute: number): void;\n    disableUnusedAttributes(): void;\n}\n",
      "@types/three@~0/src/renderers/webgl/WebGLCubeMaps.d.ts": "import { WebGLRenderer } from \"../WebGLRenderer.d.ts\";\n\nexport class WebGLCubeMaps {\n    constructor(renderer: WebGLRenderer);\n\n    get(texture: any): any;\n    dispose(): void;\n}\n",
      "@types/three@~0/src/textures/types.d.ts": "export interface TextureImageData {\n    data: Uint8Array | Uint8ClampedArray;\n    height: number;\n    width: number;\n}\n\nexport interface Texture3DImageData extends TextureImageData {\n    depth: number;\n}\n",
      "@solid-primitives/resize-observer@2.0.25/dist/index.d.ts": "import { MaybeAccessor, Many } from \"@solid-primitives/utils@6.2.3/dist/index/index.d.ts\";\nimport { Accessor } from \"solid-js@1.8.16/types/index.d.ts\";\ntype ResizeHandler = (rect: DOMRectReadOnly, element: Element, entry: ResizeObserverEntry) => void;\ntype Size = {\n    width: number;\n    height: number;\n};\ntype NullableSize = {\n    width: number;\n    height: number;\n} | {\n    width: null;\n    height: null;\n};\n/**\n * Instantiate a new ResizeObserver that automatically get's disposed on cleanup.\n *\n * @param callback handler called once element size changes\n * @param options ResizeObserver options\n * @returns `observe` and `unobserve` functions\n */\ndeclare function makeResizeObserver<T extends Element>(callback: ResizeObserverCallback, options?: ResizeObserverOptions): {\n    observe: (ref: T) => void;\n    unobserve: (ref: T) => void;\n};\n/**\n * Create resize observer instance, listening for changes to size of the reactive {@link targets} array.\n *\n * @param targets Elements to be observed. Can be a reactive signal or store top-level array.\n * @param onResize - Function handler to trigger on element resize\n *\n * @example\n * ```tsx\n * let ref\n * createResizeObserver(() => ref, ({ width, height }, el) => {\n *   if (el === ref) console.log(width, height)\n * });\n * <div ref={ref}/>\n * ```\n */\ndeclare function createResizeObserver(targets: MaybeAccessor<Many<Element | undefined | null>>, onResize: ResizeHandler, options?: ResizeObserverOptions): void;\n/**\n * @returns object with width and height dimensions of window, page and screen.\n */\ndeclare function getWindowSize(): Size;\n/**\n * Creates a reactive store-like object of current width and height dimensions of window, page and screen.\n * @example\n * const size = createWindowSize();\n * createEffect(() => {\n *   console.log(size.width, size.height)\n * })\n */\ndeclare function createWindowSize(): Readonly<Size>;\n/**\n * Returns a reactive store-like object of current width and height dimensions of window, page and screen.\n *\n * This is a [singleton root](https://github.com/solidjs-community/solid-primitives/tree/main/packages/rootless#createSingletonRoot) primitive.\n *\n * @example\n * const size = useWindowSize();\n * createEffect(() => {\n *   console.log(size.width, size.height)\n * })\n */\ndeclare const useWindowSize: typeof createWindowSize;\n/**\n * @param target html element\n * @returns object with width and height dimensions of provided {@link target} element.\n */\ndeclare function getElementSize(target: Element | false | undefined | null): NullableSize;\n/**\n * Creates a reactive store-like object of current width and height dimensions of {@link target} element.\n * @param target html element to track the size of. Can be a reactive signal.\n * @returns `{ width: number, height: number }`\n * @example\n * const size = createElementSize(document.body);\n * createEffect(() => {\n *   console.log(size.width, size.height)\n * })\n */\ndeclare function createElementSize(target: Element): Readonly<Size>;\ndeclare function createElementSize(target: Accessor<Element | false | undefined | null>): Readonly<NullableSize>;\nexport { NullableSize, ResizeHandler, Size, createElementSize, createResizeObserver, createWindowSize, getElementSize, getWindowSize, makeResizeObserver, useWindowSize };\n",
      "@solid-primitives/utils@6.2.3/dist/index/index.d.ts": "import { Accessor, AccessorArray, NoInfer, EffectFunction, onCleanup, SignalOptions, createSignal } from \"solid-js@1.8.16/types/index.d.ts\";\nexport { EffectOptions, OnOptions } from \"solid-js@1.8.16/types/index.d.ts\";\nexport { isServer } from \"solid-js@1.8.16/web/types/index.d.ts\";\nimport { N as Noop, A as AnyClass, a as AnyObject, M as MaybeAccessorValue, b as MaybeAccessor, c as AnyFunction } from '../types-d58cbe2f.d.ts';\nexport { f as AccessReturnTypes, k as AnyStatic, i as DeepPartialAny, D as Directive, E as ExtractIfPossible, m as Falsy, F as FalsyValue, I as ItemsOf, e as ItemsOfMany, d as Many, g as Modify, h as ModifyDeep, r as Narrow, s as NoInfer, j as NonIterable, O as OnAccessEffectFunction, n as Position, P as PrimitiveValue, R as RequiredKeys, S as SetterParam, p as Simplify, o as Size, T as Tail, l as Truthy, q as UnboxLazy, U as UnionToIntersection, V as Values } from '../types-d58cbe2f.d.ts';\nexport { ResolvedChildren, ResolvedJSXElement } from \"solid-js@1.8.16/types/reactive/signal.d.ts\";\ndeclare const isClient: boolean;\ndeclare const isDev: boolean;\ndeclare const isProd: boolean;\n/** no operation */\ndeclare const noop: Noop;\ndeclare const trueFn: () => boolean;\ndeclare const falseFn: () => boolean;\n/** @deprecated use {@link equalFn} from \"solid-js\" */\ndeclare const defaultEquals: <T>(a: T, b: T) => boolean;\ndeclare const EQUALS_FALSE_OPTIONS: {\n    readonly equals: false;\n};\ndeclare const INTERNAL_OPTIONS: {\n    readonly internal: true;\n};\n/**\n * Check if the value is an instance of ___\n */\ndeclare const ofClass: (v: any, c: AnyClass) => boolean;\n/** Check if value is typeof \"object\" or \"function\" */\ndeclare function isObject(value: any): value is AnyObject;\ndeclare const isNonNullable: <T>(i: T) => i is NonNullable<T>;\ndeclare const filterNonNullable: <T extends readonly unknown[]>(arr: T) => NonNullable<T[number]>[];\ndeclare const compare: (a: any, b: any) => number;\n/**\n * Check shallow array equality\n */\ndeclare const arrayEquals: (a: readonly unknown[], b: readonly unknown[]) => boolean;\n/**\n * Returns a function that will call all functions in the order they were chained with the same arguments.\n */\ndeclare function chain<Args extends [\n] | any[]>(callbacks: {\n    [Symbol.iterator](): IterableIterator<((...args: Args) => any) | undefined>;\n}): (...args: Args) => void;\n/**\n * Returns a function that will call all functions in the reversed order with the same arguments.\n */\ndeclare function reverseChain<Args extends [\n] | any[]>(callbacks: (((...args: Args) => any) | undefined)[]): (...args: Args) => void;\ndeclare const clamp: (n: number, min: number, max: number) => number;\n/**\n * Accesses the value of a MaybeAccessor\n * @example\n * ```ts\n * access(\"foo\") // => \"foo\"\n * access(() => \"foo\") // => \"foo\"\n * ```\n */\ndeclare const access: <T extends unknown>(v: T) => MaybeAccessorValue<T>;\ndeclare const asArray: <T>(value: T) => (T extends any[] ? T[number] : NonNullable<T>)[];\n/**\n * Access an array of MaybeAccessors\n * @example\n * const list = [1, 2, () => 3)] // T: MaybeAccessor<number>[]\n * const newList = accessArray(list) // T: number[]\n */\ndeclare const accessArray: <A extends unknown>(list: readonly A[]) => MaybeAccessorValue<A>[];\n/**\n * Run the function if the accessed value is not `undefined` nor `null`\n * @param value\n * @param fn\n */\ndeclare const withAccess: <T, A extends MaybeAccessor<T>, V = MaybeAccessorValue<A>>(value: A, fn: (value: NonNullable<V>) => void) => void;\ndeclare const asAccessor: <A extends unknown>(v: A) => Accessor<MaybeAccessorValue<A>>;\n/** If value is a function – call it with a given arguments – otherwise get the value as is */\ndeclare function accessWith<T>(valueOrFn: T, ...args: T extends AnyFunction ? Parameters<T> : never): T extends AnyFunction ? ReturnType<T> : T;\n/**\n * Solid's `on` helper, but always defers and returns a provided initial value when if does instead of `undefined`.\n *\n * @param deps\n * @param fn\n * @param initialValue\n */\ndeclare function defer<S, Next extends Prev, Prev = Next>(deps: AccessorArray<S> | Accessor<S>, fn: (input: S, prevInput: S, prev: undefined | NoInfer<Prev>) => Next, initialValue: Next): EffectFunction<undefined | NoInfer<Next>, NoInfer<Next>>;\ndeclare function defer<S, Next extends Prev, Prev = Next>(deps: AccessorArray<S> | Accessor<S>, fn: (input: S, prevInput: S, prev: undefined | NoInfer<Prev>) => Next, initialValue?: undefined): EffectFunction<undefined | NoInfer<Next>>;\n/**\n * Get entries of an object\n */\ndeclare const entries: <T extends object>(obj: T) => [\n    keyof T,\n    T[keyof T]\n][];\n/**\n * Get keys of an object\n */\ndeclare const keys: <T extends object>(object: T) => (keyof T)[];\n/**\n * Solid's `onCleanup` that doesn't warn in development if used outside of a component.\n */\ndeclare const tryOnCleanup: typeof onCleanup;\ndeclare const createCallbackStack: <A0 = void, A1 = void, A2 = void, A3 = void>() => {\n    push: (...callbacks: ((arg0: A0, arg1: A1, arg2: A2, arg3: A3) => void)[]) => void;\n    execute: (arg0: A0, arg1: A1, arg2: A2, arg3: A3) => void;\n    clear: VoidFunction;\n};\n/**\n * Group synchronous function calls.\n * @param fn\n * @returns `fn`\n */\ndeclare function createMicrotask<A extends any[] | [\n]>(fn: (...a: A) => void): (...a: A) => void;\n/**\n * A hydratable version of the {@link createSignal}. It will use the serverValue on the server and the update function on the client. If initialized during hydration it will use serverValue as the initial value and update it once hydration is complete.\n *\n * @param serverValue initial value of the state on the server\n * @param update called once on the client or on hydration to initialize the value\n * @param options {@link SignalOptions}\n * @returns\n * ```ts\n * [state: Accessor<T>, setState: Setter<T>]\n * ```\n * @see {@link createSignal}\n */\ndeclare function createHydratableSignal<T>(serverValue: T, update: () => T, options?: SignalOptions<T>): ReturnType<typeof createSignal<T>>;\n/** @deprecated use {@link createHydratableSignal} instead */\ndeclare const createHydrateSignal: typeof createHydratableSignal;\n/**\n * Handle items removed and added to the array by diffing it by refference.\n *\n * @param current new array instance\n * @param prev previous array copy\n * @param handleAdded called once for every added item to array\n * @param handleRemoved called once for every removed from array\n */\ndeclare function handleDiffArray<T>(current: readonly T[], prev: readonly T[], handleAdded: (item: T) => void, handleRemoved: (item: T) => void): void;\nexport { AnyClass, AnyFunction, AnyObject, EQUALS_FALSE_OPTIONS, INTERNAL_OPTIONS, MaybeAccessor, MaybeAccessorValue, Noop, access, accessArray, accessWith, arrayEquals, asAccessor, asArray, chain, clamp, compare, createCallbackStack, createHydratableSignal, createHydrateSignal, createMicrotask, defaultEquals, defer, entries, falseFn, filterNonNullable, handleDiffArray, isClient, isDev, isNonNullable, isObject, isProd, keys, noop, ofClass, reverseChain, trueFn, tryOnCleanup, withAccess };\n",

      "@solid-primitives/utils@6.2.3/dist/types-d58cbe2f.d.ts": "import { Accessor, Setter } from \"solid-js@1.8.16/types/index.d.ts\";\n/**\n * Can be single or in an array\n */\ntype Many<T> = T | T[];\ntype Values<O extends Object> = O[keyof O];\ntype Noop = (...a: any[]) => void;\ntype Directive<P = true> = (el: Element, props: Accessor<P>) => void;\n/**\n * Infers the type of the array elements\n */\ntype ItemsOf<T> = T extends (infer E)[] ? E : never;\ntype ItemsOfMany<T> = T extends any[] ? ItemsOf<T> : T;\ntype SetterParam<T> = Parameters<Setter<T>>[0];\n/**\n * T or a reactive/non-reactive function returning T\n */\ntype MaybeAccessor<T> = T | Accessor<T>;\n/**\n * Accessed value of a MaybeAccessor\n * @example\n * ```ts\n * MaybeAccessorValue<MaybeAccessor<string>>\n * // => string\n * MaybeAccessorValue<MaybeAccessor<() => string>>\n * // => string | (() => string)\n * MaybeAccessorValue<MaybeAccessor<string> | Function>\n * // => string | void\n * ```\n */\ntype MaybeAccessorValue<T extends MaybeAccessor<any>> = T extends () => any ? ReturnType<T> : T;\ntype OnAccessEffectFunction<S, Prev, Next extends Prev = Prev> = (input: AccessReturnTypes<S>, prevInput: AccessReturnTypes<S>, v: Prev) => Next;\ntype AccessReturnTypes<S> = S extends MaybeAccessor<any>[] ? {\n    [I in keyof S]: AccessReturnTypes<S[I]>;\n} : MaybeAccessorValue<S>;\n/** Allows to make shallow overwrites to an interface */\ntype Modify<T, R> = Omit<T, keyof R> & R;\n/** Allows to make nested overwrites to an interface */\ntype ModifyDeep<A extends AnyObject, B extends DeepPartialAny<A>> = {\n    [K in keyof A]: B[K] extends never ? A[K] : B[K] extends AnyObject ? ModifyDeep<A[K], B[K]> : B[K];\n} & (A extends AnyObject ? Omit<B, keyof A> : A);\n/** Makes each property optional and turns each leaf property into any, allowing for type overrides by narrowing any. */\ntype DeepPartialAny<T> = {\n    [P in keyof T]?: T[P] extends AnyObject ? DeepPartialAny<T[P]> : any;\n};\n/** Removes the `[...list]` functionality */\ntype NonIterable<T> = T & {\n    [Symbol.iterator]: never;\n};\n/** Get the required keys of an object */\ntype RequiredKeys<T> = keyof {\n    [K in keyof T as T extends {\n        [_ in K]: unknown;\n    } ? K : never]: 0;\n};\n/** Remove the first item of a tuple [1, 2, 3, 4] => [2, 3, 4] */\ntype Tail<T extends any[]> = ((...t: T) => void) extends (x: any, ...u: infer U) => void ? U : never;\n/** `A | B => A & B` */\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\ntype ExtractIfPossible<T, U> = Extract<T, U> extends never ? U : Extract<T, U>;\ntype AnyObject = Record<PropertyKey, any>;\ntype AnyStatic = [\n] | any[] | AnyObject;\ntype AnyFunction = (...args: any[]) => any;\ntype AnyClass = abstract new (...args: any) => any;\ntype PrimitiveValue = PropertyKey | boolean | bigint | null | undefined;\ntype FalsyValue = false | 0 | \"\" | null | undefined;\ntype Truthy<T> = Exclude<T, FalsyValue>;\ntype Falsy<T> = Extract<T, FalsyValue>;\ntype Position = {\n    x: number;\n    y: number;\n};\ntype Size = {\n    width: number;\n    height: number;\n};\n/** Unwraps the type definition of an object, making it more readable */\ntype Simplify<T> = T extends object ? {\n    [K in keyof T]: T[K];\n} : T;\n/** Unboxes type definition, making it more readable */\ntype UnboxLazy<T> = T extends () => infer U ? U : T;\ntype RawNarrow<T> = (T extends [\n] ? [\n] : never) | (T extends string | number | bigint | boolean ? T : never) | {\n    [K in keyof T]: T[K] extends Function ? T[K] : RawNarrow<T[K]>;\n};\ntype Narrow<T> = T extends [\n] ? T : RawNarrow<T>;\ntype NoInfer<T> = [\n    T\n][T extends any ? 0 : never];\nexport { AnyClass as A, Directive as D, ExtractIfPossible as E, FalsyValue as F, ItemsOf as I, MaybeAccessorValue as M, Noop as N, OnAccessEffectFunction as O, PrimitiveValue as P, RequiredKeys as R, SetterParam as S, Tail as T, UnionToIntersection as U, Values as V, AnyObject as a, MaybeAccessor as b, AnyFunction as c, Many as d, ItemsOfMany as e, AccessReturnTypes as f, Modify as g, ModifyDeep as h, DeepPartialAny as i, NonIterable as j, AnyStatic as k, Truthy as l, Falsy as m, Position as n, Size as o, Simplify as p, UnboxLazy as q, Narrow as r, NoInfer as s };\n"
    }
  },
  "files": {
    "src/sum.js": "export const sum = (a,b) => a + b",
    "src/export.js": "export {sum} from \"./sum\"",
    "src/index.tsx": "\nimport { render } from \"solid-js/web\";\nimport { createSignal } from \"solid-js\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport {Canvas, T, extend, useFrame} from \"solid-three\"\n\nextend(THREE);\n\nfunction Box() {\n  let mesh: THREE.Mesh | undefined;\n  const [hovered, setHovered] = createSignal(false);\n\n  useFrame(() => (mesh!.rotation.y += 0.01));\n\n  return (\n    <>\n      <T.Mesh\n        ref={mesh}\n        onPointerEnter={e => setHovered(true)}\n        onPointerLeave={e => setHovered(false)}\n      >\n        <T.BoxGeometry />\n        <T.MeshStandardMaterial color={hovered() ? \"green\" : \"red\"} />\n      </T.Mesh>\n    </>\n  );\n}\n\n\nexport const App = () => {\n  return (\n    <Canvas camera={{ position: new Vector3(0, 0, 5) }}>\n      <T.AmbientLight color={[0.5, 0.5, 0.5]} />\n      <T.PointLight position={[2, 2, 5]} rotation={[0, Math.PI / 3, 0]} />\n      <Box />\n    </Canvas>\n  );\n};\n\nrender(() => <App />, document.body);\n          \n          \n",
    "node_modules/solid-three/dist/chunk/QL6C2ENI.js": "import { createContext, useContext, createResource, splitProps, createRenderEffect, children, untrack, onCleanup, mapArray, createSignal, mergeProps, createMemo } from 'solid-js';\nimport * as THREE from 'three';\nimport { Object3D, Layers, Color, Texture, RGBAFormat, UnsignedByteType, Material, BufferGeometry, Fog, Vector2, Camera, OrthographicCamera, PerspectiveCamera, Scene, Raycaster, WebGLRenderer, PCFSoftShadowMap, NoToneMapping, ACESFilmicToneMapping, BasicShadowMap, PCFShadowMap, VSMShadowMap } from 'three';\n\n// src/augment.ts\nvar $S3C = Symbol(\"solid-three\");\nvar augment = (instance, augmentation) => {\n  instance[$S3C] = { children: /* @__PURE__ */ new Set(), ...augmentation };\n  return instance;\n};\nfunction useThree(callback) {\n  const store = useContext(threeContext);\n  if (!store) {\n    throw new Error(\"S3F: Hooks can only be used within the Canvas component!\");\n  }\n  if (callback)\n    return () => callback(store);\n  return store;\n}\nvar threeContext = createContext(null);\nvar useFrame = (callback) => {\n  const addFrameListener = useContext(frameContext);\n  if (!addFrameListener) {\n    throw new Error(\"S3F: Hooks can only be used within the Canvas component!\");\n  }\n  addFrameListener(callback);\n};\nvar frameContext = createContext();\nvar useLoader = (Constructor, args, setup) => {\n  let cache = LOADER_CACHE.get(Constructor);\n  if (!cache) {\n    cache = {\n      loader: new Constructor(),\n      resources: {}\n    };\n    LOADER_CACHE.set(Constructor, cache);\n  }\n  const { loader, resources } = cache;\n  setup?.(loader);\n  const load = (arg) => {\n    if (resources[arg])\n      return resources[arg];\n    return resources[arg] = new Promise(\n      (resolve2, reject) => loader.load(\n        arg,\n        (value) => {\n          resources[arg] = value;\n          resolve2(value);\n        },\n        void 0,\n        reject\n      )\n    );\n  };\n  const [resource] = createResource(\n    args,\n    (args2) => Array.isArray(args2) ? Promise.all(args2.map((arg) => load(arg))) : load(args2)\n  );\n  return resource;\n};\nvar LOADER_CACHE = /* @__PURE__ */ new Map();\n\n// src/utils/is-augmented-element.ts\nvar isAugmentedElement = (element) => typeof element === \"object\" && $S3C in element;\n\n// src/utils/remove-element-from-array.ts\nvar removeElementFromArray = (array, value) => {\n  const index = array.indexOf(value);\n  if (index !== -1)\n    array.splice(index, 1);\n  return array;\n};\n\n// src/create-events.ts\nvar isEventType = (type) => /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel|Mouse)/.test(type);\nvar createEvents = (context) => {\n  const eventRegistry = {\n    onMouseMove: [],\n    onMouseUp: [],\n    onMouseDown: [],\n    onPointerMove: [],\n    onPointerUp: [],\n    onPointerDown: [],\n    onWheel: [],\n    onClick: [],\n    onDoubleClick: []\n  };\n  const createThreeEvent = (nativeEvent) => {\n    const event = {\n      ...nativeEvent,\n      nativeEvent,\n      stopped: false,\n      stopPropagation: () => event.stopped = true\n    };\n    return event;\n  };\n  const raycast = (nativeEvent, type) => {\n    context.setPointer((pointer) => {\n      pointer.x = nativeEvent.offsetX / window.innerWidth * 2 - 1;\n      pointer.y = -(nativeEvent.offsetY / window.innerHeight) * 2 + 1;\n      return pointer;\n    });\n    context.raycaster.setFromCamera(context.pointer, context.camera);\n    const duplicates = /* @__PURE__ */ new Set();\n    const intersections = context.raycaster.intersectObjects(eventRegistry[type], true);\n    return intersections.sort((a, b) => a.distance - b.distance).filter(({ object }) => {\n      if (duplicates.has(object))\n        return false;\n      duplicates.add(object);\n      return true;\n    });\n  };\n  const bubbleDown = (element, type, event) => {\n    let node = element.parent;\n    while (node) {\n      if (event.stopped)\n        break;\n      if (isAugmentedElement(node)) {\n        node[$S3C].props[type]?.(event);\n      }\n      node = node.parent;\n    }\n  };\n  const createMoveHandler = (type) => (nativeEvent) => {\n    const moveEvent = createThreeEvent(nativeEvent);\n    const enterEvent = createThreeEvent(nativeEvent);\n    let staleIntersects = new Set(priorIntersects[type]);\n    for (const intersection of raycast(nativeEvent, `on${type}Move`)) {\n      const props = intersection.object[$S3C].props;\n      if (!enterEvent.stopped && !priorIntersects[type].has(intersection.object)) {\n        props[`on${type}Enter`]?.(enterEvent);\n        bubbleDown(intersection.object, `on${type}Enter`, enterEvent);\n      }\n      if (!moveEvent.stopped) {\n        props[`on${type}Move`]?.(moveEvent);\n        bubbleDown(intersection.object, `on${type}Move`, moveEvent);\n      }\n      staleIntersects.delete(intersection.object);\n      priorIntersects[type].add(intersection.object);\n      if (moveEvent.stopped && enterEvent.stopped)\n        break;\n    }\n    if (priorMoveEvents[type]) {\n      const leaveEvent = createThreeEvent(priorMoveEvents[type]);\n      for (const object of staleIntersects.values()) {\n        priorIntersects[type].delete(object);\n        if (!leaveEvent.stopped) {\n          const props = object[$S3C].props;\n          props[`on${type}Leave`]?.(leaveEvent);\n          bubbleDown(object, `on${type}Leave`, leaveEvent);\n        }\n      }\n    }\n    priorMoveEvents[type] = nativeEvent;\n  };\n  const priorIntersects = {\n    Mouse: /* @__PURE__ */ new Set(),\n    Pointer: /* @__PURE__ */ new Set()\n  };\n  const priorMoveEvents = {\n    Mouse: void 0,\n    Pointer: void 0\n  };\n  const createEventHandler = (type) => (nativeEvent) => {\n    const event = createThreeEvent(nativeEvent);\n    for (const { object } of raycast(nativeEvent, type)) {\n      object[$S3C].props[type]?.(event);\n      bubbleDown(object, type, event);\n      if (event.stopped)\n        break;\n    }\n  };\n  context.canvas.addEventListener(\"mousemove\", createMoveHandler(\"Mouse\"));\n  context.canvas.addEventListener(\"pointermove\", createMoveHandler(\"Pointer\"));\n  context.canvas.addEventListener(\"mousedown\", createEventHandler(\"onMouseDown\"));\n  context.canvas.addEventListener(\"pointerdown\", createEventHandler(\"onPointerDown\"));\n  context.canvas.addEventListener(\"mouseup\", createEventHandler(\"onMouseUp\"));\n  context.canvas.addEventListener(\"pointerup\", createEventHandler(\"onPointerUp\"));\n  context.canvas.addEventListener(\"wheel\", createEventHandler(\"onWheel\"));\n  context.canvas.addEventListener(\"click\", createEventHandler(\"onClick\"));\n  context.canvas.addEventListener(\"dblclick\", createEventHandler(\"onDoubleClick\"));\n  const addEventListener = (object, type) => {\n    const isDerivedEvent = type.includes(\"Enter\") || type.includes(\"Leave\");\n    const isPointerEvent = type.includes(\"Pointer\");\n    const derivedType = isDerivedEvent ? `on${isPointerEvent ? \"Pointer\" : \"Mouse\"}Move` : type;\n    if (!eventRegistry[derivedType].find((value) => value === object)) {\n      eventRegistry[derivedType].push(object);\n    }\n    onCleanup(() => {\n      if (derivedType.includes(\"Move\")) {\n        const props = object[$S3C].props;\n        if (isPointerEvent) {\n          if (\"onPointerMove\" in props || \"onPointerEnter\" in props || \"onPointerLeave\" in props) {\n            return;\n          }\n        } else {\n          if (\"onMouseMove\" in props || \"onMouseEnter\" in props || \"onMouseLeave\" in props) {\n            return;\n          }\n        }\n      }\n      removeElementFromArray(eventRegistry[type], object);\n    });\n  };\n  return { addEventListener, eventRegistry };\n};\nvar addToEventListeners = (object, type) => {\n  const addToEventListeners2 = useContext(eventContext);\n  if (!addToEventListeners2) {\n    throw new Error(\"S3F: Hooks can only be used within the Canvas component!\");\n  }\n  addToEventListeners2(object, type);\n};\nvar eventContext = createContext();\ncreateContext();\nvar useCanvasProps = () => {\n  const canvasProps = useContext(canvasPropsContext);\n  if (!canvasProps) {\n    throw new Error(\"S3F: Hooks can only be used within the Canvas component!\");\n  }\n  return canvasProps;\n};\nvar canvasPropsContext = createContext();\n\n// src/utils/has-colorspace.ts\nvar hasColorSpace = (object) => \"colorSpace\" in object || \"outputColorSpace\" in object;\n\n// src/utils/resolve.ts\nfunction resolve(child, recursive = false) {\n  return typeof child !== \"function\" ? child : recursive ? resolve(child()) : child();\n}\n\n// src/props.ts\nfunction manageProps(object, props) {\n  const [local, instanceProps] = splitProps(props, [\"ref\", \"args\", \"object\", \"attach\", \"children\"]);\n  createRenderEffect(() => {\n    if (local.ref instanceof Function)\n      local.ref(object());\n    else\n      local.ref = object();\n  });\n  const childrenAccessor = children(() => props.children);\n  createRenderEffect(\n    () => manageSceneGraph(object(), childrenAccessor)\n  );\n  createRenderEffect(() => {\n    const keys = Object.keys(instanceProps);\n    for (const key of keys) {\n      const subKeys = keys.filter((_key) => key !== _key && _key.includes(key));\n      createRenderEffect(() => {\n        applyProp(object(), key, instanceProps[key]);\n        for (const subKey of subKeys) {\n          applyProp(object(), subKey, instanceProps[subKey]);\n        }\n      });\n    }\n    untrack(() => props.onUpdate)?.(object());\n  });\n  onCleanup(() => object()?.dispose?.());\n}\nvar NEEDS_UPDATE = [\n  \"map\",\n  \"envMap\",\n  \"bumpMap\",\n  \"normalMap\",\n  \"transparent\",\n  \"morphTargets\",\n  \"skinning\",\n  \"alphaTest\",\n  \"useVertexColors\",\n  \"flatShading\"\n];\nvar applyProp = (source, type, value) => {\n  if (!source) {\n    return;\n  }\n  if (value === void 0)\n    return;\n  if (type.indexOf(\"-\") > -1) {\n    const [property, ...rest] = type.split(\"-\");\n    applyProp(source[property], rest.join(\"-\"), value);\n    return;\n  }\n  if (NEEDS_UPDATE.includes(type) && (!source[type] && value || source[type] && !value)) {\n    source.needsUpdate = true;\n  }\n  if (hasColorSpace(source)) {\n    const sRGBEncoding2 = 3001;\n    const SRGBColorSpace = \"srgb\";\n    const LinearSRGBColorSpace = \"srgb-linear\";\n    if (type === \"encoding\") {\n      type = \"colorSpace\";\n      value = value === sRGBEncoding2 ? SRGBColorSpace : LinearSRGBColorSpace;\n    } else if (type === \"outputEncoding\") {\n      type = \"outputColorSpace\";\n      value = value === sRGBEncoding2 ? SRGBColorSpace : LinearSRGBColorSpace;\n    }\n  }\n  if (isEventType(type)) {\n    if (source instanceof Object3D) {\n      addToEventListeners(source, type);\n    }\n    return;\n  }\n  const target = source[type];\n  const context = useThree();\n  const canvasProps = useCanvasProps();\n  try {\n    if (target?.copy && target?.constructor === value?.constructor) {\n      target.copy(value);\n    } else if (target instanceof Layers && value instanceof Layers) {\n      target.mask = value.mask;\n    } else if (target?.set && Array.isArray(value)) {\n      if (target.fromArray)\n        target.fromArray(value);\n      else\n        target.set(...value);\n    } else if (target?.set && typeof value !== \"object\") {\n      const isColor = target instanceof Color;\n      if (!isColor && target.setScalar && typeof value === \"number\")\n        target.setScalar(value);\n      else if (value !== void 0)\n        target.set(value);\n    } else {\n      source[type] = value;\n      if (source[type] instanceof Texture && source[type].format === RGBAFormat && source[type].type === UnsignedByteType) {\n        createRenderEffect(() => {\n          canvasProps.linear;\n          canvasProps.flat;\n          const texture = source[type];\n          if (hasColorSpace(texture) && hasColorSpace(context.gl)) {\n            texture.colorSpace = context.gl.outputColorSpace;\n          } else {\n            texture.encoding = context.gl.outputEncoding;\n          }\n        });\n      }\n    }\n  } finally {\n    if (canvasProps.frameloop === \"demand\") {\n      context.requestRender();\n    }\n  }\n};\nvar manageSceneGraph = (parent, childAccessor) => {\n  createRenderEffect(\n    mapArray(\n      () => {\n        const result = resolve(childAccessor, true);\n        return Array.isArray(result) ? result : result ? [result] : [];\n      },\n      (child) => createRenderEffect(() => {\n        if (!child) {\n          return;\n        }\n        parent[$S3C].children.add(child);\n        onCleanup(() => parent[$S3C].children.delete(child));\n        let attachProp = child[$S3C].props.attach;\n        if (typeof attachProp === \"function\") {\n          const cleanup = attachProp(parent, child);\n          onCleanup(cleanup);\n          return;\n        }\n        if (!attachProp) {\n          if (child instanceof Material)\n            attachProp = \"material\";\n          else if (child instanceof BufferGeometry)\n            attachProp = \"geometry\";\n          else if (child instanceof Fog)\n            attachProp = \"fog\";\n        }\n        if (attachProp) {\n          let target = parent;\n          const path = attachProp.split(\"-\");\n          while (true) {\n            const property = path.shift();\n            if (path.length === 0) {\n              target[property] = child;\n              onCleanup(() => parent[attachProp] = void 0);\n              break;\n            } else {\n              target = parent[property];\n            }\n          }\n          return;\n        }\n        if (child instanceof Object3D && parent instanceof Object3D && !parent.children.includes(child)) {\n          parent.add(child);\n          onCleanup(() => parent.remove(child));\n          return child;\n        }\n      })\n    )\n  );\n};\nfunction defaultProps(props, defaults) {\n  return mergeProps(defaults, props);\n}\n\n// src/utils/with-context.ts\nfunction withContext(children3, context, value) {\n  let result;\n  context.Provider({\n    value,\n    children: () => {\n      result = children3();\n      return \"\";\n    }\n  });\n  return () => result;\n}\nfunction withMultiContexts(children3, values) {\n  let result;\n  const fn = (index) => {\n    const [context, value] = values[index];\n    context.Provider({\n      value,\n      children: () => {\n        if (index < values.length - 1) {\n          fn(index + 1);\n        } else {\n          result = children3();\n        }\n        return \"\";\n      }\n    });\n  };\n  fn(0);\n  return () => result;\n}\n\n// src/create-three.tsx\nfunction createThree(canvas, props) {\n  const canvasProps = defaultProps(props, {\n    frameloop: \"always\"\n  });\n  const [pointer, setPointer] = createSignal(new Vector2(), {\n    equals: false\n  });\n  const frameListeners = [];\n  const addFrameListener = (callback) => {\n    frameListeners.push(callback);\n    const cleanup = () => removeElementFromArray(frameListeners, callback);\n    onCleanup(cleanup);\n    return cleanup;\n  };\n  const {\n    camera,\n    gl,\n    raycaster,\n    scene\n  } = createCoreElements(canvas, canvasProps);\n  const handleXRFrame = (timestamp, frame) => {\n    if (canvasProps.frameloop === \"never\")\n      return;\n    render(timestamp, frame);\n  };\n  const handleSessionChange = () => {\n    context.gl.xr.enabled = context.gl.xr.isPresenting;\n    context.gl.xr.setAnimationLoop(context.gl.xr.isPresenting ? handleXRFrame : null);\n  };\n  const xr = {\n    connect() {\n      context.gl.xr.addEventListener(\"sessionstart\", handleSessionChange);\n      context.gl.xr.addEventListener(\"sessionend\", handleSessionChange);\n    },\n    disconnect() {\n      context.gl.xr.removeEventListener(\"sessionstart\", handleSessionChange);\n      context.gl.xr.removeEventListener(\"sessionend\", handleSessionChange);\n    }\n  };\n  let isRenderPending = false;\n  const render = (timestamp, frame) => {\n    isRenderPending = false;\n    context.gl.render(context.scene, context.camera);\n    frameListeners.forEach((listener) => listener(context, timestamp, frame));\n  };\n  const requestRender = () => {\n    if (isRenderPending)\n      return;\n    isRenderPending = true;\n    requestAnimationFrame(render);\n  };\n  const context = {\n    canvas,\n    get camera() {\n      return camera();\n    },\n    get gl() {\n      return gl();\n    },\n    get raycaster() {\n      return raycaster();\n    },\n    get scene() {\n      return scene();\n    },\n    get pointer() {\n      return pointer();\n    },\n    setPointer,\n    render,\n    requestRender,\n    xr\n  };\n  withMultiContexts(() => manageCoreElements(canvasProps, context), [[threeContext, context], [canvasPropsContext, canvasProps]]);\n  const {\n    addEventListener,\n    eventRegistry\n  } = createEvents(context);\n  manageSceneGraph(context.scene, children(withMultiContexts(() => canvasProps.children, [\n    [threeContext, context],\n    [frameContext, addFrameListener],\n    [eventContext, addEventListener],\n    [canvasPropsContext, canvasProps]\n  ])));\n  const loop = (value) => {\n    if (canvasProps.frameloop === \"always\") {\n      requestAnimationFrame(loop);\n      context.render(value);\n    }\n  };\n  createRenderEffect(() => {\n    if (canvasProps.frameloop === \"always\") {\n      requestAnimationFrame(loop);\n    }\n  });\n  return mergeProps(context, {\n    eventRegistry,\n    addFrameListener\n  });\n}\nvar createCoreElements = (canvas, props) => ({\n  camera: createMemo(() => augment(props.camera instanceof Camera ? props.camera : props.orthographic ? new OrthographicCamera() : new PerspectiveCamera(), {\n    get props() {\n      return props.camera || {};\n    }\n  })),\n  scene: createMemo(() => augment(props.scene instanceof Scene ? props.scene : new Scene(), {\n    get props() {\n      return props.scene || {};\n    }\n  })),\n  raycaster: createMemo(() => augment(props.raycaster instanceof Raycaster ? props.raycaster : new Raycaster(), {\n    get props() {\n      return props.raycaster || {};\n    }\n  })),\n  gl: createMemo(() => augment(props.gl instanceof WebGLRenderer ? props.gl : typeof props.gl === \"function\" ? props.gl(canvas) : new WebGLRenderer({\n    canvas\n  }), {\n    get props() {\n      return props.gl || {};\n    }\n  }))\n});\nvar manageCoreElements = (props, context) => {\n  createRenderEffect(() => {\n    if (!props.camera || props.camera instanceof Camera)\n      return;\n    manageProps(() => context.camera, props.camera);\n    context.camera.updateMatrixWorld(true);\n  });\n  createRenderEffect(() => {\n    if (!props.scene || props.scene instanceof Scene)\n      return;\n    manageProps(() => context.scene, props.scene);\n  });\n  createRenderEffect(() => {\n    createRenderEffect(() => {\n      if (context.gl.shadowMap) {\n        const oldEnabled = context.gl.shadowMap.enabled;\n        const oldType = context.gl.shadowMap.type;\n        context.gl.shadowMap.enabled = !!props.shadows;\n        if (typeof props.shadows === \"boolean\") {\n          context.gl.shadowMap.type = PCFSoftShadowMap;\n        } else if (typeof props.shadows === \"string\") {\n          const types = {\n            basic: BasicShadowMap,\n            percentage: PCFShadowMap,\n            soft: PCFSoftShadowMap,\n            variance: VSMShadowMap\n          };\n          context.gl.shadowMap.type = types[props.shadows] ?? PCFSoftShadowMap;\n        } else if (typeof props.shadows === \"object\") {\n          Object.assign(context.gl.shadowMap, props.shadows);\n        }\n        if (oldEnabled !== context.gl.shadowMap.enabled || oldType !== context.gl.shadowMap.type)\n          context.gl.shadowMap.needsUpdate = true;\n      }\n    });\n    manageProps(() => context.gl, {\n      get outputEncoding() {\n        return props.linear ? THREE.LinearEncoding : THREE.sRGBEncoding;\n      },\n      get toneMapping() {\n        return props.flat ? NoToneMapping : ACESFilmicToneMapping;\n      }\n    });\n    if (context.gl.xr)\n      context.xr.connect();\n    if (!props.gl || props.gl instanceof WebGLRenderer)\n      return;\n    manageProps(() => context.gl, props.gl);\n  });\n  createRenderEffect(() => {\n    if (!props.raycaster || props.raycaster instanceof Raycaster)\n      return;\n    manageProps(() => context.raycaster, props.raycaster);\n  });\n};\n\nexport { $S3C, augment, createThree, isAugmentedElement, manageProps, manageSceneGraph, threeContext, useFrame, useLoader, useThree, withContext };\n",
    "node_modules/solid-three/dist/core/index.js": "import { createResizeObserver } from '@solid-primitives/resize-observer'\nimport { createMemo, createRenderEffect, mergeProps as mergeProps$1, splitProps } from 'solid-js'\nimport { insert, mergeProps, spread, template } from 'solid-js/web'\nimport { OrthographicCamera } from 'three'\nimport {\n  augment,\n  createThree,\n  isAugmentedElement,\n  manageProps,\n  manageSceneGraph,\n  threeContext,\n  useThree,\n  withContext,\n} from '../chunk/QL6C2ENI.js'\nexport { $S3C, useFrame, useLoader, useThree } from '../chunk/QL6C2ENI.js'\n\nvar _tmpl$ = /* @__PURE__ */ template(`<canvas>`)\nvar _tmpl$2 = /* @__PURE__ */ template(`<div>`)\nfunction Canvas(_props) {\n  const [props, canvasProps] = splitProps(_props, ['fallback', 'camera', 'children', 'ref'])\n  const canvas = (() => {\n    const _el$ = _tmpl$()\n    _el$.style.setProperty('width', '100%')\n    _el$.style.setProperty('height', '100%')\n    return _el$\n  })()\n  const container = (() => {\n    const _el$2 = _tmpl$2()\n    _el$2.style.setProperty('width', '100%')\n    _el$2.style.setProperty('height', '100%')\n    insert(_el$2, canvas)\n    return _el$2\n  })()\n  const context = createThree(canvas, props)\n  createResizeObserver(\n    () => container,\n    () => {\n      context.gl.setSize(window.innerWidth, window.innerHeight)\n      context.gl.setPixelRatio(window.devicePixelRatio)\n      if (context.camera instanceof OrthographicCamera) {\n        context.camera.left = window.innerWidth / -2\n        context.camera.right = window.innerWidth / 2\n        context.camera.top = window.innerHeight / 2\n        context.camera.bottom = window.innerHeight / -2\n      } else {\n        context.camera.aspect = window.innerWidth / window.innerHeight\n      }\n      context.camera.updateProjectionMatrix()\n      context.render(performance.now())\n    },\n  )\n  createRenderEffect(() => {\n    if (props.ref instanceof Function) props.ref(container)\n    else props.ref = container\n  })\n  return (() => {\n    const _el$3 = _tmpl$2()\n    spread(\n      _el$3,\n      mergeProps(canvasProps, {\n        get style() {\n          return {\n            position: 'relative',\n            width: '100%',\n            height: '100%',\n            overflow: 'hidden',\n            ...canvasProps.style,\n          }\n        },\n      }),\n      false,\n      true,\n    )\n    insert(_el$3, container)\n    return _el$3\n  })()\n}\nvar Portal = props => {\n  const context = useThree()\n  const scene = createMemo(() =>\n    props.element\n      ? isAugmentedElement(props.element)\n        ? props.element\n        : augment(props.element, {\n            props: {},\n          })\n      : context.scene,\n  )\n  createRenderEffect(() => {\n    manageSceneGraph(\n      scene(),\n      withContext(\n        () => props.children,\n        threeContext,\n        mergeProps$1(context, {\n          get scene() {\n            return scene()\n          },\n        }),\n      ),\n    )\n  })\n  return []\n}\nfunction Primitive(props) {\n  const memo = createMemo(() =>\n    augment(props.object, {\n      props,\n    }),\n  )\n  manageProps(memo, props)\n  return memo\n}\n\n// src/proxy.tsx\nvar CATALOGUE = {}\nvar COMPONENTS = {\n  Primitive,\n  Portal,\n}\nvar extend = objects => void Object.assign(CATALOGUE, objects)\nvar T_CACHE = new Map(Object.entries(COMPONENTS))\nvar T = new Proxy(\n  {},\n  {\n    get: (_, name) => {\n      if (!T_CACHE.has(name)) {\n        const constructor = CATALOGUE[name]\n        if (!constructor) return void 0\n        T_CACHE.set(name, createThreeComponent(constructor))\n      }\n      return T_CACHE.get(name)\n    },\n  },\n)\nfunction createThreeComponent(source) {\n  const Component = props => {\n    const merged = mergeProps$1(\n      {\n        args: [],\n      },\n      props,\n    )\n    const memo = createMemo(() => {\n      try {\n        return augment(new source(...merged.args), {\n          props,\n        })\n      } catch (e) {\n        throw new Error('')\n      }\n    })\n    manageProps(memo, props)\n    return memo\n  }\n  return Component\n}\n\n// src/utils/build-graph.ts\nfunction buildGraph(object) {\n  const data = { nodes: {}, materials: {} }\n  if (object) {\n    object.traverse(obj => {\n      if (obj.name) data.nodes[obj.name] = obj\n      if (obj.material && !data.materials[obj.material.name])\n        data.materials[obj.material.name] = obj.material\n    })\n  }\n  return data\n}\n\nexport { Canvas, T, buildGraph, extend }\n"
  }
}
